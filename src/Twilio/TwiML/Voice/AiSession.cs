/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Linq;

namespace Twilio.TwiML.Voice
{

    /// <summary>
    /// AiSession TwiML Noun
    /// </summary>
    public class AiSession : TwiML
    {
        /// <summary>
        /// The unique name or installed add-on sid that identifies the installed addon resource for the AI Connector
        /// </summary>
        public string AiConnector { get; set; }
        /// <summary>
        /// The unique name or id of the AiSession Configuration resource.
        /// </summary>
        public string AiSessionConfiguration { get; set; }

        /// <summary>
        /// Create a new AiSession
        /// </summary>
        /// <param name="aiConnector"> The unique name or installed add-on sid that identifies the installed addon resource for
        ///                   the AI Connector </param>
        /// <param name="aiSessionConfiguration"> The unique name or id of the AiSession Configuration resource. </param>
        public AiSession(string aiConnector = null, string aiSessionConfiguration = null) : base("AiSession")
        {
            this.AiConnector = aiConnector;
            this.AiSessionConfiguration = aiSessionConfiguration;
        }

        /// <summary>
        /// Return the attributes of the TwiML tag
        /// </summary>
        protected override List<XAttribute> GetElementAttributes()
        {
            var attributes = new List<XAttribute>();
            if (this.AiConnector != null)
            {
                attributes.Add(new XAttribute("aiConnector", this.AiConnector));
            }
            if (this.AiSessionConfiguration != null)
            {
                attributes.Add(new XAttribute("aiSessionConfiguration", this.AiSessionConfiguration));
            }
            return attributes;
        }

        /// <summary>
        /// Append a child TwiML element to this element returning this element to allow chaining.
        /// </summary>
        /// <param name="childElem"> Child TwiML element to add </param>
        public new AiSession Append(TwiML childElem)
        {
            return (AiSession) base.Append(childElem);
        }

        /// <summary>
        /// Add freeform key-value attributes to the generated xml
        /// </summary>
        /// <param name="key"> Option key </param>
        /// <param name="value"> Option value </param>
        public new AiSession SetOption(string key, object value)
        {
            return (AiSession) base.SetOption(key, value);
        }
    }

}