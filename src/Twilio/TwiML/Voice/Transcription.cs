/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Linq;
using Twilio.Types;

namespace Twilio.TwiML.Voice
{

    /// <summary>
    /// Transcription TwiML Noun
    /// </summary>
    public class Transcription : TwiML
    {
        public sealed class TrackEnum : StringEnum
        {
            private TrackEnum(string value) : base(value) {}
            public TrackEnum() {}
            public static implicit operator TrackEnum(string value)
            {
                return new TrackEnum(value);
            }

            public static readonly TrackEnum InboundTrack = new TrackEnum("inbound_track");
            public static readonly TrackEnum OutboundTrack = new TrackEnum("outbound_track");
            public static readonly TrackEnum BothTracks = new TrackEnum("both_tracks");
        }

        public sealed class StatusCallbackMethodEnum : StringEnum
        {
            private StatusCallbackMethodEnum(string value) : base(value) {}
            public StatusCallbackMethodEnum() {}
            public static implicit operator StatusCallbackMethodEnum(string value)
            {
                return new StatusCallbackMethodEnum(value);
            }

            public static readonly StatusCallbackMethodEnum Get = new StatusCallbackMethodEnum("GET");
            public static readonly StatusCallbackMethodEnum Post = new StatusCallbackMethodEnum("POST");
        }

        /// <summary>
        /// Friendly name given to the Transcription
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// Track to be analyze by the provider
        /// </summary>
        public Transcription.TrackEnum Track { get; set; }
        /// <summary>
        /// Status Callback URL
        /// </summary>
        public string StatusCallbackUrl { get; set; }
        /// <summary>
        /// Status Callback URL method
        /// </summary>
        public Transcription.StatusCallbackMethodEnum StatusCallbackMethod { get; set; }
        /// <summary>
        /// Friendly name given to the Inbound Track
        /// </summary>
        public string InboundTrackLabel { get; set; }
        /// <summary>
        /// Friendly name given to the Outbound Track Label
        /// </summary>
        public string OutboundTrackLabel { get; set; }
        /// <summary>
        /// Indicates if partial results are going to be send to the customer
        /// </summary>
        public bool? PartialResults { get; set; }
        /// <summary>
        /// Language Code used by the transcription engine
        /// </summary>
        public string LanguageCode { get; set; }
        /// <summary>
        /// Transcription Engine to be used
        /// </summary>
        public string TranscriptionEngine { get; set; }
        /// <summary>
        /// Enable Profanity Filter
        /// </summary>
        public bool? ProfanityFilter { get; set; }
        /// <summary>
        /// Speech Model used by the transcription engine
        /// </summary>
        public string SpeechModel { get; set; }
        /// <summary>
        /// Hints to be provided to the transcription engine
        /// </summary>
        public string Hints { get; set; }
        /// <summary>
        /// Enable Automatic Punctuation
        /// </summary>
        public bool? EnableAutomaticPunctuation { get; set; }
        /// <summary>
        /// The SID or the unique name of the Intelligence Service to be used
        /// </summary>
        public string IntelligenceService { get; set; }

        /// <summary>
        /// Create a new Transcription
        /// </summary>
        /// <param name="name"> Friendly name given to the Transcription </param>
        /// <param name="track"> Track to be analyze by the provider </param>
        /// <param name="statusCallbackUrl"> Status Callback URL </param>
        /// <param name="statusCallbackMethod"> Status Callback URL method </param>
        /// <param name="inboundTrackLabel"> Friendly name given to the Inbound Track </param>
        /// <param name="outboundTrackLabel"> Friendly name given to the Outbound Track Label </param>
        /// <param name="partialResults"> Indicates if partial results are going to be send to the customer </param>
        /// <param name="languageCode"> Language Code used by the transcription engine </param>
        /// <param name="transcriptionEngine"> Transcription Engine to be used </param>
        /// <param name="profanityFilter"> Enable Profanity Filter </param>
        /// <param name="speechModel"> Speech Model used by the transcription engine </param>
        /// <param name="hints"> Hints to be provided to the transcription engine </param>
        /// <param name="enableAutomaticPunctuation"> Enable Automatic Punctuation </param>
        /// <param name="intelligenceService"> The SID or the unique name of the Intelligence Service to be used </param>
        public Transcription(string name = null,
                             Transcription.TrackEnum track = null,
                             string statusCallbackUrl = null,
                             Transcription.StatusCallbackMethodEnum statusCallbackMethod = null,
                             string inboundTrackLabel = null,
                             string outboundTrackLabel = null,
                             bool? partialResults = null,
                             string languageCode = null,
                             string transcriptionEngine = null,
                             bool? profanityFilter = null,
                             string speechModel = null,
                             string hints = null,
                             bool? enableAutomaticPunctuation = null,
                             string intelligenceService = null) : base("Transcription")
        {
            this.Name = name;
            this.Track = track;
            this.StatusCallbackUrl = statusCallbackUrl;
            this.StatusCallbackMethod = statusCallbackMethod;
            this.InboundTrackLabel = inboundTrackLabel;
            this.OutboundTrackLabel = outboundTrackLabel;
            this.PartialResults = partialResults;
            this.LanguageCode = languageCode;
            this.TranscriptionEngine = transcriptionEngine;
            this.ProfanityFilter = profanityFilter;
            this.SpeechModel = speechModel;
            this.Hints = hints;
            this.EnableAutomaticPunctuation = enableAutomaticPunctuation;
            this.IntelligenceService = intelligenceService;
        }

        /// <summary>
        /// Return the attributes of the TwiML tag
        /// </summary>
        protected override List<XAttribute> GetElementAttributes()
        {
            var attributes = new List<XAttribute>();
            if (this.Name != null)
            {
                attributes.Add(new XAttribute("name", this.Name));
            }
            if (this.Track != null)
            {
                attributes.Add(new XAttribute("track", this.Track.ToString()));
            }
            if (this.StatusCallbackUrl != null)
            {
                attributes.Add(new XAttribute("statusCallbackUrl", this.StatusCallbackUrl));
            }
            if (this.StatusCallbackMethod != null)
            {
                attributes.Add(new XAttribute("statusCallbackMethod", this.StatusCallbackMethod.ToString()));
            }
            if (this.InboundTrackLabel != null)
            {
                attributes.Add(new XAttribute("inboundTrackLabel", this.InboundTrackLabel));
            }
            if (this.OutboundTrackLabel != null)
            {
                attributes.Add(new XAttribute("outboundTrackLabel", this.OutboundTrackLabel));
            }
            if (this.PartialResults != null)
            {
                attributes.Add(new XAttribute("partialResults", this.PartialResults.Value.ToString().ToLower()));
            }
            if (this.LanguageCode != null)
            {
                attributes.Add(new XAttribute("languageCode", this.LanguageCode));
            }
            if (this.TranscriptionEngine != null)
            {
                attributes.Add(new XAttribute("transcriptionEngine", this.TranscriptionEngine));
            }
            if (this.ProfanityFilter != null)
            {
                attributes.Add(new XAttribute("profanityFilter", this.ProfanityFilter.Value.ToString().ToLower()));
            }
            if (this.SpeechModel != null)
            {
                attributes.Add(new XAttribute("speechModel", this.SpeechModel));
            }
            if (this.Hints != null)
            {
                attributes.Add(new XAttribute("hints", this.Hints));
            }
            if (this.EnableAutomaticPunctuation != null)
            {
                attributes.Add(new XAttribute("enableAutomaticPunctuation", this.EnableAutomaticPunctuation.Value.ToString().ToLower()));
            }
            if (this.IntelligenceService != null)
            {
                attributes.Add(new XAttribute("intelligenceService", this.IntelligenceService));
            }
            return attributes;
        }

        /// <summary>
        /// Create a new <Config/> element and append it as a child of this element.
        /// </summary>
        /// <param name="name"> The name of the custom config </param>
        /// <param name="value"> The value of the custom config </param>
        public Transcription Config(string name = null, string value = null)
        {
            var newChild = new Config(name, value);
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Append a <Config/> element as a child of this element
        /// </summary>
        /// <param name="config"> A Config instance. </param>
        [System.Obsolete("This method is deprecated, use .Append() instead.")]
        public Transcription Config(Config config)
        {
            this.Append(config);
            return this;
        }

        /// <summary>
        /// Create a new <Parameter/> element and append it as a child of this element.
        /// </summary>
        /// <param name="name"> The name of the custom parameter </param>
        /// <param name="value"> The value of the custom parameter </param>
        public Transcription Parameter(string name = null, string value = null)
        {
            var newChild = new Parameter(name, value);
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Append a <Parameter/> element as a child of this element
        /// </summary>
        /// <param name="parameter"> A Parameter instance. </param>
        [System.Obsolete("This method is deprecated, use .Append() instead.")]
        public Transcription Parameter(Parameter parameter)
        {
            this.Append(parameter);
            return this;
        }

        /// <summary>
        /// Append a child TwiML element to this element returning this element to allow chaining.
        /// </summary>
        /// <param name="childElem"> Child TwiML element to add </param>
        public new Transcription Append(TwiML childElem)
        {
            return (Transcription) base.Append(childElem);
        }

        /// <summary>
        /// Add freeform key-value attributes to the generated xml
        /// </summary>
        /// <param name="key"> Option key </param>
        /// <param name="value"> Option value </param>
        public new Transcription SetOption(string key, object value)
        {
            return (Transcription) base.SetOption(key, value);
        }
    }

}