/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Linq;

namespace Twilio.TwiML.Voice
{

    /// <summary>
    /// Assistant TwiML Noun
    /// </summary>
    public class Assistant : TwiML
    {
        /// <summary>
        /// The assistant ID of the AI Assistant
        /// </summary>
        public string Id { get; set; }
        /// <summary>
        /// Language to be used for both text-to-speech and transcription
        /// </summary>
        public string LanguageAttribute { get; set; }
        /// <summary>
        /// Language to be used for text-to-speech
        /// </summary>
        public string TtsLanguage { get; set; }
        /// <summary>
        /// Language to be used for transcription
        /// </summary>
        public string TranscriptionLanguage { get; set; }
        /// <summary>
        /// Provider to be used for text-to-speech
        /// </summary>
        public string TtsProvider { get; set; }
        /// <summary>
        /// Voice to be used for text-to-speech
        /// </summary>
        public string Voice { get; set; }
        /// <summary>
        /// Provider to be used for transcription
        /// </summary>
        public string TranscriptionProvider { get; set; }
        /// <summary>
        /// Speech model to be used for transcription
        /// </summary>
        public string SpeechModel { get; set; }
        /// <summary>
        /// Whether profanities should be filtered out of the speech transcription
        /// </summary>
        public bool? ProfanityFilter { get; set; }
        /// <summary>
        /// Whether DTMF tones should be detected and reported in speech transcription
        /// </summary>
        public bool? DtmfDetection { get; set; }
        /// <summary>
        /// The sentence to be played automatically when the session is connected
        /// </summary>
        public string WelcomeGreeting { get; set; }
        /// <summary>
        /// Whether partial prompts should be reported to WebSocket server before the caller finishes speaking
        /// </summary>
        public bool? PartialPrompts { get; set; }
        /// <summary>
        /// "Whether and how the input from a caller, such as speaking or DTMF can interrupt the welcome greeting
        /// </summary>
        public string WelcomeGreetingInterruptible { get; set; }
        /// <summary>
        /// Whether and how the input from a caller, such as speaking or DTMF can interrupt the play of text-to-speech
        /// </summary>
        public string Interruptible { get; set; }
        /// <summary>
        /// Whether subsequent text-to-speech or play media can interrupt the on-going play of text-to-speech or media
        /// </summary>
        public bool? Preemptible { get; set; }
        /// <summary>
        /// Phrases to help better accuracy in speech recognition of these pharases
        /// </summary>
        public string Hints { get; set; }
        /// <summary>
        /// The Conversational Intelligence Service id or unique name to be used for the session
        /// </summary>
        public string IntelligenceService { get; set; }
        /// <summary>
        /// Whether prompts should be reported to WebSocket server when text-to-speech playing and interrupt is disabled
        /// </summary>
        public bool? ReportInputDuringAgentSpeech { get; set; }
        /// <summary>
        /// When using ElevenLabs as TTS provider, this parameter allows you to enable or disable its text normalization feature
        /// </summary>
        public string ElevenlabsTextNormalization { get; set; }
        /// <summary>
        /// Set the sensitivity of the interrupt feature for speech. The value can be low, medium, or high
        /// </summary>
        public string InterruptSensitivity { get; set; }
        /// <summary>
        /// Multiple debug options to be used for troubleshooting
        /// </summary>
        public string Debug { get; set; }

        /// <summary>
        /// Create a new Assistant
        /// </summary>
        /// <param name="id"> The assistant ID of the AI Assistant </param>
        /// <param name="language"> Language to be used for both text-to-speech and transcription </param>
        /// <param name="ttsLanguage"> Language to be used for text-to-speech </param>
        /// <param name="transcriptionLanguage"> Language to be used for transcription </param>
        /// <param name="ttsProvider"> Provider to be used for text-to-speech </param>
        /// <param name="voice"> Voice to be used for text-to-speech </param>
        /// <param name="transcriptionProvider"> Provider to be used for transcription </param>
        /// <param name="speechModel"> Speech model to be used for transcription </param>
        /// <param name="profanityFilter"> Whether profanities should be filtered out of the speech transcription </param>
        /// <param name="dtmfDetection"> Whether DTMF tones should be detected and reported in speech transcription </param>
        /// <param name="welcomeGreeting"> The sentence to be played automatically when the session is connected </param>
        /// <param name="partialPrompts"> Whether partial prompts should be reported to WebSocket server before the caller
        ///                      finishes speaking </param>
        /// <param name="welcomeGreetingInterruptible"> "Whether and how the input from a caller, such as speaking or DTMF can
        ///                                    interrupt the welcome greeting </param>
        /// <param name="interruptible"> Whether and how the input from a caller, such as speaking or DTMF can interrupt the
        ///                     play of text-to-speech </param>
        /// <param name="preemptible"> Whether subsequent text-to-speech or play media can interrupt the on-going play of
        ///                   text-to-speech or media </param>
        /// <param name="hints"> Phrases to help better accuracy in speech recognition of these pharases </param>
        /// <param name="intelligenceService"> The Conversational Intelligence Service id or unique name to be used for the
        ///                           session </param>
        /// <param name="reportInputDuringAgentSpeech"> Whether prompts should be reported to WebSocket server when
        ///                                    text-to-speech playing and interrupt is disabled </param>
        /// <param name="elevenlabsTextNormalization"> When using ElevenLabs as TTS provider, this parameter allows you to
        ///                                   enable or disable its text normalization feature </param>
        /// <param name="interruptSensitivity"> Set the sensitivity of the interrupt feature for speech. The value can be low,
        ///                            medium, or high </param>
        /// <param name="debug"> Multiple debug options to be used for troubleshooting </param>
        public Assistant(string id = null,
                         string language = null,
                         string ttsLanguage = null,
                         string transcriptionLanguage = null,
                         string ttsProvider = null,
                         string voice = null,
                         string transcriptionProvider = null,
                         string speechModel = null,
                         bool? profanityFilter = null,
                         bool? dtmfDetection = null,
                         string welcomeGreeting = null,
                         bool? partialPrompts = null,
                         string welcomeGreetingInterruptible = null,
                         string interruptible = null,
                         bool? preemptible = null,
                         string hints = null,
                         string intelligenceService = null,
                         bool? reportInputDuringAgentSpeech = null,
                         string elevenlabsTextNormalization = null,
                         string interruptSensitivity = null,
                         string debug = null) : base("Assistant")
        {
            this.Id = id;
            this.LanguageAttribute = language;
            this.TtsLanguage = ttsLanguage;
            this.TranscriptionLanguage = transcriptionLanguage;
            this.TtsProvider = ttsProvider;
            this.Voice = voice;
            this.TranscriptionProvider = transcriptionProvider;
            this.SpeechModel = speechModel;
            this.ProfanityFilter = profanityFilter;
            this.DtmfDetection = dtmfDetection;
            this.WelcomeGreeting = welcomeGreeting;
            this.PartialPrompts = partialPrompts;
            this.WelcomeGreetingInterruptible = welcomeGreetingInterruptible;
            this.Interruptible = interruptible;
            this.Preemptible = preemptible;
            this.Hints = hints;
            this.IntelligenceService = intelligenceService;
            this.ReportInputDuringAgentSpeech = reportInputDuringAgentSpeech;
            this.ElevenlabsTextNormalization = elevenlabsTextNormalization;
            this.InterruptSensitivity = interruptSensitivity;
            this.Debug = debug;
        }

        /// <summary>
        /// Return the attributes of the TwiML tag
        /// </summary>
        protected override List<XAttribute> GetElementAttributes()
        {
            var attributes = new List<XAttribute>();
            if (this.Id != null)
            {
                attributes.Add(new XAttribute("id", this.Id));
            }
            if (this.LanguageAttribute != null)
            {
                attributes.Add(new XAttribute("language", this.LanguageAttribute));
            }
            if (this.TtsLanguage != null)
            {
                attributes.Add(new XAttribute("ttsLanguage", this.TtsLanguage));
            }
            if (this.TranscriptionLanguage != null)
            {
                attributes.Add(new XAttribute("transcriptionLanguage", this.TranscriptionLanguage));
            }
            if (this.TtsProvider != null)
            {
                attributes.Add(new XAttribute("ttsProvider", this.TtsProvider));
            }
            if (this.Voice != null)
            {
                attributes.Add(new XAttribute("voice", this.Voice));
            }
            if (this.TranscriptionProvider != null)
            {
                attributes.Add(new XAttribute("transcriptionProvider", this.TranscriptionProvider));
            }
            if (this.SpeechModel != null)
            {
                attributes.Add(new XAttribute("speechModel", this.SpeechModel));
            }
            if (this.ProfanityFilter != null)
            {
                attributes.Add(new XAttribute("profanityFilter", this.ProfanityFilter.Value.ToString().ToLower()));
            }
            if (this.DtmfDetection != null)
            {
                attributes.Add(new XAttribute("dtmfDetection", this.DtmfDetection.Value.ToString().ToLower()));
            }
            if (this.WelcomeGreeting != null)
            {
                attributes.Add(new XAttribute("welcomeGreeting", this.WelcomeGreeting));
            }
            if (this.PartialPrompts != null)
            {
                attributes.Add(new XAttribute("partialPrompts", this.PartialPrompts.Value.ToString().ToLower()));
            }
            if (this.WelcomeGreetingInterruptible != null)
            {
                attributes.Add(new XAttribute("welcomeGreetingInterruptible", this.WelcomeGreetingInterruptible));
            }
            if (this.Interruptible != null)
            {
                attributes.Add(new XAttribute("interruptible", this.Interruptible));
            }
            if (this.Preemptible != null)
            {
                attributes.Add(new XAttribute("preemptible", this.Preemptible.Value.ToString().ToLower()));
            }
            if (this.Hints != null)
            {
                attributes.Add(new XAttribute("hints", this.Hints));
            }
            if (this.IntelligenceService != null)
            {
                attributes.Add(new XAttribute("intelligenceService", this.IntelligenceService));
            }
            if (this.ReportInputDuringAgentSpeech != null)
            {
                attributes.Add(new XAttribute("reportInputDuringAgentSpeech", this.ReportInputDuringAgentSpeech.Value.ToString().ToLower()));
            }
            if (this.ElevenlabsTextNormalization != null)
            {
                attributes.Add(new XAttribute("elevenlabsTextNormalization", this.ElevenlabsTextNormalization));
            }
            if (this.InterruptSensitivity != null)
            {
                attributes.Add(new XAttribute("interruptSensitivity", this.InterruptSensitivity));
            }
            if (this.Debug != null)
            {
                attributes.Add(new XAttribute("debug", this.Debug));
            }
            return attributes;
        }

        /// <summary>
        /// Create a new <Language/> element and append it as a child of this element.
        /// </summary>
        /// <param name="code"> Language code of this language setting is for </param>
        /// <param name="ttsProvider"> Provider to be used for text-to-speech of this language </param>
        /// <param name="voice"> Voice to be used for text-to-speech of this language </param>
        /// <param name="transcriptionProvider"> Provider to be used for transcription of this language </param>
        /// <param name="speechModel"> Speech model to be used for transcription of this language </param>
        public Assistant Language(string code = null,
                                  string ttsProvider = null,
                                  string voice = null,
                                  string transcriptionProvider = null,
                                  string speechModel = null)
        {
            var newChild = new Language(code, ttsProvider, voice, transcriptionProvider, speechModel);
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Append a <Language/> element as a child of this element
        /// </summary>
        /// <param name="language"> A Language instance. </param>
        [System.Obsolete("This method is deprecated, use .Append() instead.")]
        public Assistant Language(Language language)
        {
            this.Append(language);
            return this;
        }

        /// <summary>
        /// Create a new <Parameter/> element and append it as a child of this element.
        /// </summary>
        /// <param name="name"> The name of the custom parameter </param>
        /// <param name="value"> The value of the custom parameter </param>
        public Assistant Parameter(string name = null, string value = null)
        {
            var newChild = new Parameter(name, value);
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Append a <Parameter/> element as a child of this element
        /// </summary>
        /// <param name="parameter"> A Parameter instance. </param>
        [System.Obsolete("This method is deprecated, use .Append() instead.")]
        public Assistant Parameter(Parameter parameter)
        {
            this.Append(parameter);
            return this;
        }

        /// <summary>
        /// Append a child TwiML element to this element returning this element to allow chaining.
        /// </summary>
        /// <param name="childElem"> Child TwiML element to add </param>
        public new Assistant Append(TwiML childElem)
        {
            return (Assistant) base.Append(childElem);
        }

        /// <summary>
        /// Add freeform key-value attributes to the generated xml
        /// </summary>
        /// <param name="key"> Option key </param>
        /// <param name="value"> Option value </param>
        public new Assistant SetOption(string key, object value)
        {
            return (Assistant) base.SetOption(key, value);
        }
    }

}