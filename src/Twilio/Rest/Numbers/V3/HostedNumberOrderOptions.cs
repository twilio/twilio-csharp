/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;
using System.Linq;



namespace Twilio.Rest.Numbers.V3
{

    /// <summary> Host a phone number's capability on Twilio's platform. </summary>
    public class CreateHostedNumberOrderOptions : IOptions<HostedNumberOrderResource>
    {
        
        ///<summary> The number to host in [+E.164](https://en.wikipedia.org/wiki/E.164) format </summary> 
        public Types.PhoneNumber PhoneNumber { get; }

        ///<summary> Used to specify that the SMS capability will be hosted on Twilio's platform. </summary> 
        public bool? SmsCapability { get; }

        ///<summary> This defaults to the AccountSid of the authorization the user is using. This can be provided to specify a subaccount to add the HostedNumberOrder to. </summary> 
        public string AccountSid { get; set; }

        ///<summary> A 64 character string that is a human readable text that describes this resource. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> Optional. Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. </summary> 
        public string UniqueName { get; set; }

        ///<summary> Optional. A list of emails that the LOA document for this HostedNumberOrder will be carbon copied to. </summary> 
        public List<string> CcEmails { get; set; }

        ///<summary> The URL that Twilio should request when somebody sends an SMS to the phone number. This will be copied onto the IncomingPhoneNumber resource. </summary> 
        public Uri SmsUrl { get; set; }

        ///<summary> The HTTP method that should be used to request the SmsUrl. Must be either `GET` or `POST`.  This will be copied onto the IncomingPhoneNumber resource. </summary> 
        public Twilio.Http.HttpMethod SmsMethod { get; set; }

        ///<summary> A URL that Twilio will request if an error occurs requesting or executing the TwiML defined by SmsUrl. This will be copied onto the IncomingPhoneNumber resource. </summary> 
        public Uri SmsFallbackUrl { get; set; }

        ///<summary> The HTTP method that should be used to request the SmsFallbackUrl. Must be either `GET` or `POST`. This will be copied onto the IncomingPhoneNumber resource. </summary> 
        public Twilio.Http.HttpMethod SmsFallbackMethod { get; set; }

        ///<summary> Optional. The Status Callback URL attached to the IncomingPhoneNumber resource. </summary> 
        public Uri StatusCallbackUrl { get; set; }

        ///<summary> Optional. The Status Callback Method attached to the IncomingPhoneNumber resource. </summary> 
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }

        ///<summary> Optional. The 34 character sid of the application Twilio should use to handle SMS messages sent to this number. If a `SmsApplicationSid` is present, Twilio will ignore all of the SMS urls above and use those set on the application. </summary> 
        public string SmsApplicationSid { get; set; }

        ///<summary> Optional. A 34 character string that uniquely identifies the Address resource that represents the address of the owner of this phone number. </summary> 
        public string AddressSid { get; set; }

        ///<summary> Optional. Email of the owner of this phone number that is being hosted. </summary> 
        public string Email { get; set; }

        
        public HostedNumberOrderResource.VerificationTypeEnum VerificationType { get; set; }

        ///<summary> Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill. </summary> 
        public string VerificationDocumentSid { get; set; }


        /// <summary> Construct a new CreateHostedNumbersHostedNumberOrderOptions </summary>
        /// <param name="phoneNumber"> The number to host in [+E.164](https://en.wikipedia.org/wiki/E.164) format </param>
        /// <param name="smsCapability"> Used to specify that the SMS capability will be hosted on Twilio's platform. </param>
        public CreateHostedNumberOrderOptions(Types.PhoneNumber phoneNumber, bool? smsCapability)
        {
            PhoneNumber = phoneNumber;
            SmsCapability = smsCapability;
            CcEmails = new List<string>();
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PhoneNumber != null)
            {
                p.Add(new KeyValuePair<string, string>("phoneNumber", PhoneNumber.ToString()));
            }
            if (SmsCapability != null)
            {
                p.Add(new KeyValuePair<string, string>("smsCapability", SmsCapability.Value.ToString().ToLower()));
            }
            if (AccountSid != null)
            {
                p.Add(new KeyValuePair<string, string>("accountSid", AccountSid));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("friendlyName", FriendlyName));
            }
            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("uniqueName", UniqueName));
            }
            if (CcEmails != null)
            {
                p.AddRange(CcEmails.Select(CcEmails => new KeyValuePair<string, string>("ccEmails", CcEmails)));
            }
            if (SmsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("smsUrl", Serializers.Url(SmsUrl)));
            }
            if (SmsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("smsMethod", SmsMethod.ToString()));
            }
            if (SmsFallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("smsFallbackUrl", Serializers.Url(SmsFallbackUrl)));
            }
            if (SmsFallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("smsFallbackMethod", SmsFallbackMethod.ToString()));
            }
            if (StatusCallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("statusCallbackUrl", Serializers.Url(StatusCallbackUrl)));
            }
            if (StatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("statusCallbackMethod", StatusCallbackMethod.ToString()));
            }
            if (SmsApplicationSid != null)
            {
                p.Add(new KeyValuePair<string, string>("smsApplicationSid", SmsApplicationSid));
            }
            if (AddressSid != null)
            {
                p.Add(new KeyValuePair<string, string>("addressSid", AddressSid));
            }
            if (Email != null)
            {
                p.Add(new KeyValuePair<string, string>("email", Email));
            }
            if (VerificationType != null)
            {
                p.Add(new KeyValuePair<string, string>("verificationType", VerificationType.ToString()));
            }
            if (VerificationDocumentSid != null)
            {
                p.Add(new KeyValuePair<string, string>("verificationDocumentSid", VerificationDocumentSid));
            }
            return p;
        }

        

    }
}

