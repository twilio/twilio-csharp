/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Numbers.V2
{

    /// <summary> Creates a new clone of the Bundle in target Account. It will internally create clones of all the bundle items (identities and documents) of the original bundle </summary>
    public class CreateBundleCloneOptions : IOptions<BundleCloneResource>
    {
        
        ///<summary> The unique string that identifies the Bundle to be cloned. </summary> 
        public string PathBundleSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) where the bundle needs to be cloned. </summary> 
        public string TargetAccountSid { get; }

        ///<summary> If set to true, the cloned bundle will be in the DRAFT state, else it will be twilio-approved </summary> 
        public bool? MoveToDraft { get; set; }

        ///<summary> The string that you assigned to describe the cloned bundle. </summary> 
        public string FriendlyName { get; set; }


        /// <summary> Construct a new CreateBundleCloneOptions </summary>
        /// <param name="pathBundleSid"> The unique string that identifies the Bundle to be cloned. </param>
        /// <param name="targetAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) where the bundle needs to be cloned. </param>
        public CreateBundleCloneOptions(string pathBundleSid, string targetAccountSid)
        {
            PathBundleSid = pathBundleSid;
            TargetAccountSid = targetAccountSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (TargetAccountSid != null)
            {
                p.Add(new KeyValuePair<string, string>("TargetAccountSid", TargetAccountSid));
            }
            if (MoveToDraft != null)
            {
                p.Add(new KeyValuePair<string, string>("MoveToDraft", MoveToDraft.Value.ToString().ToLower()));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            return p;
        }

        

    }
}

