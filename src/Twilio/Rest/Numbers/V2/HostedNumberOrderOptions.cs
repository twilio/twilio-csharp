/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;
using System.Linq;



namespace Twilio.Rest.Numbers.V2
{

    /// <summary> Host a phone number's capability on Twilio's platform. </summary>
    public class CreateHostedNumberOrderOptions : IOptions<HostedNumberOrderResource>
    {
        
        ///<summary> The number to host in [+E.164](https://en.wikipedia.org/wiki/E.164) format </summary> 
        public Types.PhoneNumber PhoneNumber { get; }

        ///<summary> The contact phone number of the person authorized to sign the Authorization Document. </summary> 
        public Types.PhoneNumber ContactPhoneNumber { get; }

        ///<summary> Optional. A 34 character string that uniquely identifies the Address resource that represents the address of the owner of this phone number. </summary> 
        public string AddressSid { get; }

        ///<summary> Optional. Email of the owner of this phone number that is being hosted. </summary> 
        public string Email { get; }

        ///<summary> This defaults to the AccountSid of the authorization the user is using. This can be provided to specify a subaccount to add the HostedNumberOrder to. </summary> 
        public string AccountSid { get; set; }

        ///<summary> A 128 character string that is a human readable text that describes this resource. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> Optional. A list of emails that the LOA document for this HostedNumberOrder will be carbon copied to. </summary> 
        public List<string> CcEmails { get; set; }

        ///<summary> The URL that Twilio should request when somebody sends an SMS to the phone number. This will be copied onto the IncomingPhoneNumber resource. </summary> 
        public Uri SmsUrl { get; set; }

        ///<summary> The HTTP method that should be used to request the SmsUrl. Must be either `GET` or `POST`.  This will be copied onto the IncomingPhoneNumber resource. </summary> 
        public Twilio.Http.HttpMethod SmsMethod { get; set; }

        ///<summary> A URL that Twilio will request if an error occurs requesting or executing the TwiML defined by SmsUrl. This will be copied onto the IncomingPhoneNumber resource. </summary> 
        public Uri SmsFallbackUrl { get; set; }

        ///<summary> Used to specify that the SMS capability will be hosted on Twilio's platform. </summary> 
        public bool? SmsCapability { get; set; }

        ///<summary> The HTTP method that should be used to request the SmsFallbackUrl. Must be either `GET` or `POST`. This will be copied onto the IncomingPhoneNumber resource. </summary> 
        public Twilio.Http.HttpMethod SmsFallbackMethod { get; set; }

        ///<summary> Optional. The Status Callback URL attached to the IncomingPhoneNumber resource. </summary> 
        public Uri StatusCallbackUrl { get; set; }

        ///<summary> Optional. The Status Callback Method attached to the IncomingPhoneNumber resource. </summary> 
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }

        ///<summary> Optional. The 34 character sid of the application Twilio should use to handle SMS messages sent to this number. If a `SmsApplicationSid` is present, Twilio will ignore all of the SMS urls above and use those set on the application. </summary> 
        public string SmsApplicationSid { get; set; }

        ///<summary> The title of the person authorized to sign the Authorization Document for this phone number. </summary> 
        public string ContactTitle { get; set; }


        /// <summary> Construct a new CreateHostedNumberOrderOptions </summary>
        /// <param name="phoneNumber"> The number to host in [+E.164](https://en.wikipedia.org/wiki/E.164) format </param>
        /// <param name="contactPhoneNumber"> The contact phone number of the person authorized to sign the Authorization Document. </param>
        /// <param name="addressSid"> Optional. A 34 character string that uniquely identifies the Address resource that represents the address of the owner of this phone number. </param>
        /// <param name="email"> Optional. Email of the owner of this phone number that is being hosted. </param>
        public CreateHostedNumberOrderOptions(Types.PhoneNumber phoneNumber, Types.PhoneNumber contactPhoneNumber, string addressSid, string email)
        {
            PhoneNumber = phoneNumber;
            ContactPhoneNumber = contactPhoneNumber;
            AddressSid = addressSid;
            Email = email;
            CcEmails = new List<string>();
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PhoneNumber != null)
            {
                p.Add(new KeyValuePair<string, string>("PhoneNumber", PhoneNumber.ToString()));
            }
            if (ContactPhoneNumber != null)
            {
                p.Add(new KeyValuePair<string, string>("ContactPhoneNumber", ContactPhoneNumber.ToString()));
            }
            if (AddressSid != null)
            {
                p.Add(new KeyValuePair<string, string>("AddressSid", AddressSid));
            }
            if (Email != null)
            {
                p.Add(new KeyValuePair<string, string>("Email", Email));
            }
            if (AccountSid != null)
            {
                p.Add(new KeyValuePair<string, string>("AccountSid", AccountSid));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (CcEmails != null)
            {
                p.AddRange(CcEmails.Select(CcEmails => new KeyValuePair<string, string>("CcEmails", CcEmails)));
            }
            if (SmsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsUrl", Serializers.Url(SmsUrl)));
            }
            if (SmsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsMethod", SmsMethod.ToString()));
            }
            if (SmsFallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsFallbackUrl", Serializers.Url(SmsFallbackUrl)));
            }
            if (SmsCapability != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCapability", SmsCapability.Value.ToString().ToLower()));
            }
            if (SmsFallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsFallbackMethod", SmsFallbackMethod.ToString()));
            }
            if (StatusCallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallbackUrl", Serializers.Url(StatusCallbackUrl)));
            }
            if (StatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
            }
            if (SmsApplicationSid != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsApplicationSid", SmsApplicationSid));
            }
            if (ContactTitle != null)
            {
                p.Add(new KeyValuePair<string, string>("ContactTitle", ContactTitle));
            }
            return p;
        }

        

    }
    /// <summary> Cancel the HostedNumberOrder (only available when the status is in `received`). </summary>
    public class DeleteHostedNumberOrderOptions : IOptions<HostedNumberOrderResource>
    {
        
        ///<summary> A 34 character string that uniquely identifies this HostedNumberOrder. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteHostedNumberOrderOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this HostedNumberOrder. </param>
        public DeleteHostedNumberOrderOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Fetch a specific HostedNumberOrder. </summary>
    public class FetchHostedNumberOrderOptions : IOptions<HostedNumberOrderResource>
    {
    
        ///<summary> A 34 character string that uniquely identifies this HostedNumberOrder. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchHostedNumberOrderOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this HostedNumberOrder. </param>
        public FetchHostedNumberOrderOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a list of HostedNumberOrders belonging to the account initiating the request. </summary>
    public class ReadHostedNumberOrderOptions : ReadOptions<HostedNumberOrderResource>
    {
    
        ///<summary> The Status of this HostedNumberOrder. One of `received`, `pending-verification`, `verified`, `pending-loa`, `carrier-processing`, `testing`, `completed`, `failed`, or `action-required`. </summary> 
        public HostedNumberOrderResource.StatusEnum Status { get; set; }

        ///<summary> Whether the SMS capability will be hosted on our platform. Can be `true` of `false`. </summary> 
        public bool? SmsCapability { get; set; }

        ///<summary> An E164 formatted phone number hosted by this HostedNumberOrder. </summary> 
        public Types.PhoneNumber PhoneNumber { get; set; }

        ///<summary> A 34 character string that uniquely identifies the IncomingPhoneNumber resource created by this HostedNumberOrder. </summary> 
        public string IncomingPhoneNumberSid { get; set; }

        ///<summary> A human readable description of this resource, up to 128 characters. </summary> 
        public string FriendlyName { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }
            if (SmsCapability != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCapability", SmsCapability.Value.ToString().ToLower()));
            }
            if (PhoneNumber != null)
            {
                p.Add(new KeyValuePair<string, string>("PhoneNumber", PhoneNumber.ToString()));
            }
            if (IncomingPhoneNumberSid != null)
            {
                p.Add(new KeyValuePair<string, string>("IncomingPhoneNumberSid", IncomingPhoneNumberSid));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

}

