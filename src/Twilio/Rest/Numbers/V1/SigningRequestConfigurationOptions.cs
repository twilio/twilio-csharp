/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Numbers.V1
{

    /// <summary> Synchronous operation to insert or update a configuration for the customer. </summary>
    public class CreateSigningRequestConfigurationOptions : IOptions<SigningRequestConfigurationResource>
    {
        
        
        public object Body { get; set; }



        
        /// <summary> Generate the request body </summary>
        public string GetBody()
        {
            string body = "";

            if (Body != null)
            {
                body = SigningRequestConfigurationResource.ToJson(Body);
            }
            return body;
        }
        

    }
    /// <summary> Synchronous operation to retrieve configurations for the customer. </summary>
    public class ReadSigningRequestConfigurationOptions : ReadOptions<SigningRequestConfigurationResource>
    {
    
        ///<summary> The country ISO code to apply this configuration, this is an optional field, Example: US, MX </summary> 
        public string Country { get; set; }

        ///<summary> The product or service for which is requesting the signature, this is an optional field, Example: Porting, Hosting </summary> 
        public string Product { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Country != null)
            {
                p.Add(new KeyValuePair<string, string>("Country", Country));
            }
            if (Product != null)
            {
                p.Add(new KeyValuePair<string, string>("Product", Product));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

}

