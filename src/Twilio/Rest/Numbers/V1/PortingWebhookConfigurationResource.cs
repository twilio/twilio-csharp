/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Numbers.V1
{
    public class PortingWebhookConfigurationResource : Resource
    {
    

    

        
        private static Request BuildCreateRequest(CreatePortingWebhookConfigurationOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Porting/Configuration/Webhook";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Numbers,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Create a Webhook Configuration </summary>
        /// <param name="options"> Create PortingWebhookConfiguration parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of PortingWebhookConfiguration </returns>
        public static PortingWebhookConfigurationResource Create(CreatePortingWebhookConfigurationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a Webhook Configuration </summary>
        /// <param name="options"> Create PortingWebhookConfiguration parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of PortingWebhookConfiguration </returns>
        public static async System.Threading.Tasks.Task<PortingWebhookConfigurationResource> CreateAsync(CreatePortingWebhookConfigurationOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a Webhook Configuration </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of PortingWebhookConfiguration </returns>
        public static PortingWebhookConfigurationResource Create(
                                            ITwilioRestClient client = null)
        {
            var options = new CreatePortingWebhookConfigurationOptions(){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a Webhook Configuration </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of PortingWebhookConfiguration </returns>
        public static async System.Threading.Tasks.Task<PortingWebhookConfigurationResource> CreateAsync(
                                                                                    ITwilioRestClient client = null,
                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreatePortingWebhookConfigurationOptions(){  };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a PortingWebhookConfigurationResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> PortingWebhookConfigurationResource object represented by the provided JSON </returns>
        public static PortingWebhookConfigurationResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<PortingWebhookConfigurationResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The URL of the webhook configuration request </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> The complete webhook url that will be called when a notification event for port in request or port in phone number happens </summary> 
        [JsonProperty("port_in_target_url")]
        public Uri PortInTargetUrl { get; private set; }

        ///<summary> The complete webhook url that will be called when a notification event for a port out phone number happens. </summary> 
        [JsonProperty("port_out_target_url")]
        public Uri PortOutTargetUrl { get; private set; }

        ///<summary> A list to filter what notification events to receive for this account and its sub accounts. If it is an empty list, then it means that there are no filters for the notifications events to send in each webhook and all events will get sent. </summary> 
        [JsonProperty("notifications_of")]
        public List<string> NotificationsOf { get; private set; }



        private PortingWebhookConfigurationResource() {

        }
    }
}

