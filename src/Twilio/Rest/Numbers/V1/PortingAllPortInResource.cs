/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Numbers.V1
{
    public class PortingAllPortInResource : Resource
    {
    

    

        
        private static Request BuildReadRequest(ReadPortingAllPortInOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Porting/PortIn/PortInRequests";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Numbers,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> Retrieve a list of all PortInRequests for a user </summary>
        /// <param name="options"> Read PortingAllPortIn parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of PortingAllPortIn </returns>
        public static ResourceSet<PortingAllPortInResource> Read(ReadPortingAllPortInOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<PortingAllPortInResource>.FromJson("port_in_requests", response.Content);
            return new ResourceSet<PortingAllPortInResource>(page, options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of all PortInRequests for a user </summary>
        /// <param name="options"> Read PortingAllPortIn parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of PortingAllPortIn </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<PortingAllPortInResource>> ReadAsync(ReadPortingAllPortInOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<PortingAllPortInResource>.FromJson("port_in_requests", response.Content);
            return new ResourceSet<PortingAllPortInResource>(page, options, client);
        }
        #endif
        /// <summary> Retrieve a list of all PortInRequests for a user </summary>
        /// <param name="token"> Page start token, if null then it will start from the beginning </param>
        /// <param name="size"> Number of items per page </param>
        /// <param name="portInRequestSid"> Filter by Port in request SID, supports multiple values separated by comma </param>
        /// <param name="portInRequestStatus"> Filter by Port In request status </param>
        /// <param name="createdBefore"> Find all created before a certain date </param>
        /// <param name="createdAfter"> Find all created after a certain date </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of PortingAllPortIn </returns>
        public static ResourceSet<PortingAllPortInResource> Read(
                                                     string token = null,
                                                     int? size = null,
                                                     string portInRequestSid = null,
                                                     string portInRequestStatus = null,
                                                     DateTime? createdBefore = null,
                                                     DateTime? createdAfter = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadPortingAllPortInOptions(){ Token = token, Size = size, PortInRequestSid = portInRequestSid, PortInRequestStatus = portInRequestStatus, CreatedBefore = createdBefore, CreatedAfter = createdAfter, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of all PortInRequests for a user </summary>
        /// <param name="token"> Page start token, if null then it will start from the beginning </param>
        /// <param name="size"> Number of items per page </param>
        /// <param name="portInRequestSid"> Filter by Port in request SID, supports multiple values separated by comma </param>
        /// <param name="portInRequestStatus"> Filter by Port In request status </param>
        /// <param name="createdBefore"> Find all created before a certain date </param>
        /// <param name="createdAfter"> Find all created after a certain date </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of PortingAllPortIn </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<PortingAllPortInResource>> ReadAsync(
                                                                                             string token = null,
                                                                                             int? size = null,
                                                                                             string portInRequestSid = null,
                                                                                             string portInRequestStatus = null,
                                                                                             DateTime? createdBefore = null,
                                                                                             DateTime? createdAfter = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null)
        {
            var options = new ReadPortingAllPortInOptions(){ Token = token, Size = size, PortInRequestSid = portInRequestSid, PortInRequestStatus = portInRequestStatus, CreatedBefore = createdBefore, CreatedAfter = createdAfter, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<PortingAllPortInResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<PortingAllPortInResource>.FromJson("port_in_requests", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<PortingAllPortInResource> NextPage(Page<PortingAllPortInResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<PortingAllPortInResource>.FromJson("port_in_requests", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<PortingAllPortInResource> PreviousPage(Page<PortingAllPortInResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<PortingAllPortInResource>.FromJson("port_in_requests", response.Content);
        }

    
        /// <summary>
        /// Converts a JSON string into a PortingAllPortInResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> PortingAllPortInResource object represented by the provided JSON </returns>
        public static PortingAllPortInResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<PortingAllPortInResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The SID of the Port-in request </summary> 
        [JsonProperty("port_in_request_sid")]
        public string PortInRequestSid { get; private set; }

        ///<summary> Status of the Port In Request </summary> 
        [JsonProperty("port_in_request_status")]
        public string PortInRequestStatus { get; private set; }

        ///<summary> The last updated timestamp of the request </summary> 
        [JsonProperty("status_last_updated_timestamp")]
        public string StatusLastUpdatedTimestamp { get; private set; }

        ///<summary> Amount of phone numbers requested </summary> 
        [JsonProperty("phone_numbers_requested")]
        public int? PhoneNumbersRequested { get; private set; }

        ///<summary> Amount of phone numbers ported </summary> 
        [JsonProperty("phone_numbers_ported")]
        public int? PhoneNumbersPorted { get; private set; }

        ///<summary> Suggested action on this ticket </summary> 
        [JsonProperty("suggested_action")]
        public string SuggestedAction { get; private set; }



        private PortingAllPortInResource() {

        }
    }
}

