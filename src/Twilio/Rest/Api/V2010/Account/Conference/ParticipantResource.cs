/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Api.V2010.Account.Conference
{
    public class ParticipantResource : Resource
    {
    

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }
            public static readonly StatusEnum Queued = new StatusEnum("queued");
            public static readonly StatusEnum Connecting = new StatusEnum("connecting");
            public static readonly StatusEnum Ringing = new StatusEnum("ringing");
            public static readonly StatusEnum Connected = new StatusEnum("connected");
            public static readonly StatusEnum Complete = new StatusEnum("complete");
            public static readonly StatusEnum Failed = new StatusEnum("failed");

        }

        
        private static Request BuildCreateRequest(CreateParticipantOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);
            string PathConferenceSid = options.PathConferenceSid;
            path = path.Replace("{"+"ConferenceSid"+"}", PathConferenceSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Api,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> create </summary>
        /// <param name="options"> Create Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ParticipantResource Create(CreateParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="options"> Create Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ParticipantResource> CreateAsync(CreateParticipantOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> create </summary>
        /// <param name="pathConferenceSid"> The SID of the participant's conference. </param>
        /// <param name="from"> The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint. </param>
        /// <param name="to"> The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. </param>
        /// <param name="statusCallback"> The URL we should call using the `status_callback_method` to send status information to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`. </param>
        /// <param name="statusCallbackEvent"> The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`. </param>
        /// <param name="label"> A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant. </param>
        /// <param name="timeout"> The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds. </param>
        /// <param name="record"> Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`. </param>
        /// <param name="muted"> Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`. </param>
        /// <param name="beep"> Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`. </param>
        /// <param name="startConferenceOnEnter"> Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference. </param>
        /// <param name="endConferenceOnExit"> Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`. </param>
        /// <param name="waitUrl"> The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). </param>
        /// <param name="waitMethod"> The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file. </param>
        /// <param name="earlyMedia"> Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`. </param>
        /// <param name="maxParticipants"> The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`. </param>
        /// <param name="conferenceRecord"> Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`. </param>
        /// <param name="conferenceTrim"> Whether to trim leading and trailing silence from the conference recording. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`. </param>
        /// <param name="conferenceStatusCallback"> The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored. </param>
        /// <param name="conferenceStatusCallbackMethod"> The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="conferenceStatusCallbackEvent"> The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`. </param>
        /// <param name="recordingChannels"> The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`. </param>
        /// <param name="recordingStatusCallback"> The URL that we should call using the `recording_status_callback_method` when the recording status changes. </param>
        /// <param name="recordingStatusCallbackMethod"> The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="sipAuthUsername"> The SIP username used for authentication. </param>
        /// <param name="sipAuthPassword"> The SIP password for authentication. </param>
        /// <param name="region"> The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`. </param>
        /// <param name="conferenceRecordingStatusCallback"> The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available. </param>
        /// <param name="conferenceRecordingStatusCallbackMethod"> The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="recordingStatusCallbackEvent"> The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`. </param>
        /// <param name="conferenceRecordingStatusCallbackEvent"> The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'` </param>
        /// <param name="coaching"> Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined. </param>
        /// <param name="callSidToCoach"> The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`. </param>
        /// <param name="jitterBufferSize"> Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`. </param>
        /// <param name="byoc"> The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta) </param>
        /// <param name="callerId"> The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint. </param>
        /// <param name="callReason"> The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta) </param>
        /// <param name="recordingTrack"> The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio. </param>
        /// <param name="timeLimit"> The maximum duration of the call in seconds. Constraints depend on account and configuration. </param>
        /// <param name="machineDetection"> Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection). </param>
        /// <param name="machineDetectionTimeout"> The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds. </param>
        /// <param name="machineDetectionSpeechThreshold"> The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400. </param>
        /// <param name="machineDetectionSpeechEndThreshold"> The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200. </param>
        /// <param name="machineDetectionSilenceTimeout"> The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000. </param>
        /// <param name="amdStatusCallback"> The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax. </param>
        /// <param name="amdStatusCallbackMethod"> The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. </param>
        /// <param name="trim"> Whether to trim any leading and trailing silence from the participant recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`. </param>
        /// <param name="callToken"> A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ParticipantResource Create(
                                          string pathConferenceSid,
                                          IEndpoint from,
                                          IEndpoint to,
                                          string pathAccountSid = null,
                                          Uri statusCallback = null,
                                          Twilio.Http.HttpMethod statusCallbackMethod = null,
                                          List<string> statusCallbackEvent = null,
                                          string label = null,
                                          int? timeout = null,
                                          bool? record = null,
                                          bool? muted = null,
                                          string beep = null,
                                          bool? startConferenceOnEnter = null,
                                          bool? endConferenceOnExit = null,
                                          Uri waitUrl = null,
                                          Twilio.Http.HttpMethod waitMethod = null,
                                          bool? earlyMedia = null,
                                          int? maxParticipants = null,
                                          string conferenceRecord = null,
                                          string conferenceTrim = null,
                                          Uri conferenceStatusCallback = null,
                                          Twilio.Http.HttpMethod conferenceStatusCallbackMethod = null,
                                          List<string> conferenceStatusCallbackEvent = null,
                                          string recordingChannels = null,
                                          Uri recordingStatusCallback = null,
                                          Twilio.Http.HttpMethod recordingStatusCallbackMethod = null,
                                          string sipAuthUsername = null,
                                          string sipAuthPassword = null,
                                          string region = null,
                                          Uri conferenceRecordingStatusCallback = null,
                                          Twilio.Http.HttpMethod conferenceRecordingStatusCallbackMethod = null,
                                          List<string> recordingStatusCallbackEvent = null,
                                          List<string> conferenceRecordingStatusCallbackEvent = null,
                                          bool? coaching = null,
                                          string callSidToCoach = null,
                                          string jitterBufferSize = null,
                                          string byoc = null,
                                          string callerId = null,
                                          string callReason = null,
                                          string recordingTrack = null,
                                          int? timeLimit = null,
                                          string machineDetection = null,
                                          int? machineDetectionTimeout = null,
                                          int? machineDetectionSpeechThreshold = null,
                                          int? machineDetectionSpeechEndThreshold = null,
                                          int? machineDetectionSilenceTimeout = null,
                                          Uri amdStatusCallback = null,
                                          Twilio.Http.HttpMethod amdStatusCallbackMethod = null,
                                          string trim = null,
                                          string callToken = null,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateParticipantOptions(pathConferenceSid, from, to){  PathAccountSid = pathAccountSid, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, StatusCallbackEvent = statusCallbackEvent, Label = label, Timeout = timeout, Record = record, Muted = muted, Beep = beep, StartConferenceOnEnter = startConferenceOnEnter, EndConferenceOnExit = endConferenceOnExit, WaitUrl = waitUrl, WaitMethod = waitMethod, EarlyMedia = earlyMedia, MaxParticipants = maxParticipants, ConferenceRecord = conferenceRecord, ConferenceTrim = conferenceTrim, ConferenceStatusCallback = conferenceStatusCallback, ConferenceStatusCallbackMethod = conferenceStatusCallbackMethod, ConferenceStatusCallbackEvent = conferenceStatusCallbackEvent, RecordingChannels = recordingChannels, RecordingStatusCallback = recordingStatusCallback, RecordingStatusCallbackMethod = recordingStatusCallbackMethod, SipAuthUsername = sipAuthUsername, SipAuthPassword = sipAuthPassword, Region = region, ConferenceRecordingStatusCallback = conferenceRecordingStatusCallback, ConferenceRecordingStatusCallbackMethod = conferenceRecordingStatusCallbackMethod, RecordingStatusCallbackEvent = recordingStatusCallbackEvent, ConferenceRecordingStatusCallbackEvent = conferenceRecordingStatusCallbackEvent, Coaching = coaching, CallSidToCoach = callSidToCoach, JitterBufferSize = jitterBufferSize, Byoc = byoc, CallerId = callerId, CallReason = callReason, RecordingTrack = recordingTrack, TimeLimit = timeLimit, MachineDetection = machineDetection, MachineDetectionTimeout = machineDetectionTimeout, MachineDetectionSpeechThreshold = machineDetectionSpeechThreshold, MachineDetectionSpeechEndThreshold = machineDetectionSpeechEndThreshold, MachineDetectionSilenceTimeout = machineDetectionSilenceTimeout, AmdStatusCallback = amdStatusCallback, AmdStatusCallbackMethod = amdStatusCallbackMethod, Trim = trim, CallToken = callToken };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="pathConferenceSid"> The SID of the participant's conference. </param>
        /// <param name="from"> The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint. </param>
        /// <param name="to"> The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. </param>
        /// <param name="statusCallback"> The URL we should call using the `status_callback_method` to send status information to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`. </param>
        /// <param name="statusCallbackEvent"> The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`. </param>
        /// <param name="label"> A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant. </param>
        /// <param name="timeout"> The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds. </param>
        /// <param name="record"> Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`. </param>
        /// <param name="muted"> Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`. </param>
        /// <param name="beep"> Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`. </param>
        /// <param name="startConferenceOnEnter"> Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference. </param>
        /// <param name="endConferenceOnExit"> Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`. </param>
        /// <param name="waitUrl"> The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). </param>
        /// <param name="waitMethod"> The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file. </param>
        /// <param name="earlyMedia"> Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`. </param>
        /// <param name="maxParticipants"> The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`. </param>
        /// <param name="conferenceRecord"> Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`. </param>
        /// <param name="conferenceTrim"> Whether to trim leading and trailing silence from the conference recording. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`. </param>
        /// <param name="conferenceStatusCallback"> The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored. </param>
        /// <param name="conferenceStatusCallbackMethod"> The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="conferenceStatusCallbackEvent"> The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`. </param>
        /// <param name="recordingChannels"> The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`. </param>
        /// <param name="recordingStatusCallback"> The URL that we should call using the `recording_status_callback_method` when the recording status changes. </param>
        /// <param name="recordingStatusCallbackMethod"> The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="sipAuthUsername"> The SIP username used for authentication. </param>
        /// <param name="sipAuthPassword"> The SIP password for authentication. </param>
        /// <param name="region"> The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`. </param>
        /// <param name="conferenceRecordingStatusCallback"> The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available. </param>
        /// <param name="conferenceRecordingStatusCallbackMethod"> The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="recordingStatusCallbackEvent"> The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`. </param>
        /// <param name="conferenceRecordingStatusCallbackEvent"> The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'` </param>
        /// <param name="coaching"> Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined. </param>
        /// <param name="callSidToCoach"> The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`. </param>
        /// <param name="jitterBufferSize"> Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`. </param>
        /// <param name="byoc"> The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta) </param>
        /// <param name="callerId"> The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint. </param>
        /// <param name="callReason"> The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta) </param>
        /// <param name="recordingTrack"> The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio. </param>
        /// <param name="timeLimit"> The maximum duration of the call in seconds. Constraints depend on account and configuration. </param>
        /// <param name="machineDetection"> Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection). </param>
        /// <param name="machineDetectionTimeout"> The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds. </param>
        /// <param name="machineDetectionSpeechThreshold"> The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400. </param>
        /// <param name="machineDetectionSpeechEndThreshold"> The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200. </param>
        /// <param name="machineDetectionSilenceTimeout"> The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000. </param>
        /// <param name="amdStatusCallback"> The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax. </param>
        /// <param name="amdStatusCallbackMethod"> The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. </param>
        /// <param name="trim"> Whether to trim any leading and trailing silence from the participant recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`. </param>
        /// <param name="callToken"> A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ParticipantResource> CreateAsync(
                                                                                  string pathConferenceSid,
                                                                                  IEndpoint from,
                                                                                  IEndpoint to,
                                                                                  string pathAccountSid = null,
                                                                                  Uri statusCallback = null,
                                                                                  Twilio.Http.HttpMethod statusCallbackMethod = null,
                                                                                  List<string> statusCallbackEvent = null,
                                                                                  string label = null,
                                                                                  int? timeout = null,
                                                                                  bool? record = null,
                                                                                  bool? muted = null,
                                                                                  string beep = null,
                                                                                  bool? startConferenceOnEnter = null,
                                                                                  bool? endConferenceOnExit = null,
                                                                                  Uri waitUrl = null,
                                                                                  Twilio.Http.HttpMethod waitMethod = null,
                                                                                  bool? earlyMedia = null,
                                                                                  int? maxParticipants = null,
                                                                                  string conferenceRecord = null,
                                                                                  string conferenceTrim = null,
                                                                                  Uri conferenceStatusCallback = null,
                                                                                  Twilio.Http.HttpMethod conferenceStatusCallbackMethod = null,
                                                                                  List<string> conferenceStatusCallbackEvent = null,
                                                                                  string recordingChannels = null,
                                                                                  Uri recordingStatusCallback = null,
                                                                                  Twilio.Http.HttpMethod recordingStatusCallbackMethod = null,
                                                                                  string sipAuthUsername = null,
                                                                                  string sipAuthPassword = null,
                                                                                  string region = null,
                                                                                  Uri conferenceRecordingStatusCallback = null,
                                                                                  Twilio.Http.HttpMethod conferenceRecordingStatusCallbackMethod = null,
                                                                                  List<string> recordingStatusCallbackEvent = null,
                                                                                  List<string> conferenceRecordingStatusCallbackEvent = null,
                                                                                  bool? coaching = null,
                                                                                  string callSidToCoach = null,
                                                                                  string jitterBufferSize = null,
                                                                                  string byoc = null,
                                                                                  string callerId = null,
                                                                                  string callReason = null,
                                                                                  string recordingTrack = null,
                                                                                  int? timeLimit = null,
                                                                                  string machineDetection = null,
                                                                                  int? machineDetectionTimeout = null,
                                                                                  int? machineDetectionSpeechThreshold = null,
                                                                                  int? machineDetectionSpeechEndThreshold = null,
                                                                                  int? machineDetectionSilenceTimeout = null,
                                                                                  Uri amdStatusCallback = null,
                                                                                  Twilio.Http.HttpMethod amdStatusCallbackMethod = null,
                                                                                  string trim = null,
                                                                                  string callToken = null,
                                                                                    ITwilioRestClient client = null, System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateParticipantOptions(pathConferenceSid, from, to){  PathAccountSid = pathAccountSid, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, StatusCallbackEvent = statusCallbackEvent, Label = label, Timeout = timeout, Record = record, Muted = muted, Beep = beep, StartConferenceOnEnter = startConferenceOnEnter, EndConferenceOnExit = endConferenceOnExit, WaitUrl = waitUrl, WaitMethod = waitMethod, EarlyMedia = earlyMedia, MaxParticipants = maxParticipants, ConferenceRecord = conferenceRecord, ConferenceTrim = conferenceTrim, ConferenceStatusCallback = conferenceStatusCallback, ConferenceStatusCallbackMethod = conferenceStatusCallbackMethod, ConferenceStatusCallbackEvent = conferenceStatusCallbackEvent, RecordingChannels = recordingChannels, RecordingStatusCallback = recordingStatusCallback, RecordingStatusCallbackMethod = recordingStatusCallbackMethod, SipAuthUsername = sipAuthUsername, SipAuthPassword = sipAuthPassword, Region = region, ConferenceRecordingStatusCallback = conferenceRecordingStatusCallback, ConferenceRecordingStatusCallbackMethod = conferenceRecordingStatusCallbackMethod, RecordingStatusCallbackEvent = recordingStatusCallbackEvent, ConferenceRecordingStatusCallbackEvent = conferenceRecordingStatusCallbackEvent, Coaching = coaching, CallSidToCoach = callSidToCoach, JitterBufferSize = jitterBufferSize, Byoc = byoc, CallerId = callerId, CallReason = callReason, RecordingTrack = recordingTrack, TimeLimit = timeLimit, MachineDetection = machineDetection, MachineDetectionTimeout = machineDetectionTimeout, MachineDetectionSpeechThreshold = machineDetectionSpeechThreshold, MachineDetectionSpeechEndThreshold = machineDetectionSpeechEndThreshold, MachineDetectionSilenceTimeout = machineDetectionSilenceTimeout, AmdStatusCallback = amdStatusCallback, AmdStatusCallbackMethod = amdStatusCallbackMethod, Trim = trim, CallToken = callToken };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        /// <summary> Kick a participant from a given conference </summary>
        /// <param name="options"> Delete Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        private static Request BuildDeleteRequest(DeleteParticipantOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);
            string PathConferenceSid = options.PathConferenceSid;
            path = path.Replace("{"+"ConferenceSid"+"}", PathConferenceSid);
            string PathCallSid = options.PathCallSid;
            path = path.Replace("{"+"CallSid"+"}", PathCallSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Kick a participant from a given conference </summary>
        /// <param name="options"> Delete Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static bool Delete(DeleteParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> Kick a participant from a given conference </summary>
        /// <param name="options"> Delete Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteParticipantOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> Kick a participant from a given conference </summary>
        /// <param name="pathConferenceSid"> The SID of the conference with the participants to delete. </param>
        /// <param name="pathCallSid"> The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static bool Delete(string pathConferenceSid, string pathCallSid, string pathAccountSid = null, ITwilioRestClient client = null)
        {
            var options = new DeleteParticipantOptions(pathConferenceSid, pathCallSid)         { PathAccountSid = pathAccountSid }   ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> Kick a participant from a given conference </summary>
        /// <param name="pathConferenceSid"> The SID of the conference with the participants to delete. </param>
        /// <param name="pathCallSid"> The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathConferenceSid, string pathCallSid, string pathAccountSid = null, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteParticipantOptions(pathConferenceSid, pathCallSid)  { PathAccountSid = pathAccountSid };
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchParticipantOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);
            string PathConferenceSid = options.PathConferenceSid;
            path = path.Replace("{"+"ConferenceSid"+"}", PathConferenceSid);
            string PathCallSid = options.PathCallSid;
            path = path.Replace("{"+"CallSid"+"}", PathCallSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch an instance of a participant </summary>
        /// <param name="options"> Fetch Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ParticipantResource Fetch(FetchParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Fetch an instance of a participant </summary>
        /// <param name="options"> Fetch Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ParticipantResource> FetchAsync(FetchParticipantOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Fetch an instance of a participant </summary>
        /// <param name="pathConferenceSid"> The SID of the conference with the participant to fetch. </param>
        /// <param name="pathCallSid"> The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ParticipantResource Fetch(
                                         string pathConferenceSid, 
                                         string pathCallSid, 
                                         string pathAccountSid = null, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchParticipantOptions(pathConferenceSid, pathCallSid){ PathAccountSid = pathAccountSid };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Fetch an instance of a participant </summary>
        /// <param name="pathConferenceSid"> The SID of the conference with the participant to fetch. </param>
        /// <param name="pathCallSid"> The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ParticipantResource> FetchAsync(string pathConferenceSid, string pathCallSid, string pathAccountSid = null, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchParticipantOptions(pathConferenceSid, pathCallSid){ PathAccountSid = pathAccountSid };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadParticipantOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);
            string PathConferenceSid = options.PathConferenceSid;
            path = path.Replace("{"+"ConferenceSid"+"}", PathConferenceSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> Retrieve a list of participants belonging to the account used to make the request </summary>
        /// <param name="options"> Read Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ResourceSet<ParticipantResource> Read(ReadParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<ParticipantResource>.FromJson("participants", response.Content);
            return new ResourceSet<ParticipantResource>(page, options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of participants belonging to the account used to make the request </summary>
        /// <param name="options"> Read Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ParticipantResource>> ReadAsync(ReadParticipantOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<ParticipantResource>.FromJson("participants", response.Content);
            return new ResourceSet<ParticipantResource>(page, options, client);
        }
        #endif
        /// <summary> Retrieve a list of participants belonging to the account used to make the request </summary>
        /// <param name="pathConferenceSid"> The SID of the conference with the participants to read. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read. </param>
        /// <param name="muted"> Whether to return only participants that are muted. Can be: `true` or `false`. </param>
        /// <param name="hold"> Whether to return only participants that are on hold. Can be: `true` or `false`. </param>
        /// <param name="coaching"> Whether to return only participants who are coaching another call. Can be: `true` or `false`. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ResourceSet<ParticipantResource> Read(
                                                     string pathConferenceSid,
                                                     string pathAccountSid = null,
                                                     bool? muted = null,
                                                     bool? hold = null,
                                                     bool? coaching = null,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadParticipantOptions(pathConferenceSid){ PathAccountSid = pathAccountSid, Muted = muted, Hold = hold, Coaching = coaching, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of participants belonging to the account used to make the request </summary>
        /// <param name="pathConferenceSid"> The SID of the conference with the participants to read. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read. </param>
        /// <param name="muted"> Whether to return only participants that are muted. Can be: `true` or `false`. </param>
        /// <param name="hold"> Whether to return only participants that are on hold. Can be: `true` or `false`. </param>
        /// <param name="coaching"> Whether to return only participants who are coaching another call. Can be: `true` or `false`. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ParticipantResource>> ReadAsync(
                                                                                             string pathConferenceSid,
                                                                                             string pathAccountSid = null,
                                                                                             bool? muted = null,
                                                                                             bool? hold = null,
                                                                                             bool? coaching = null,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadParticipantOptions(pathConferenceSid){ PathAccountSid = pathAccountSid, Muted = muted, Hold = hold, Coaching = coaching, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<ParticipantResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<ParticipantResource>.FromJson("participants", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<ParticipantResource> NextPage(Page<ParticipantResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ParticipantResource>.FromJson("participants", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<ParticipantResource> PreviousPage(Page<ParticipantResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ParticipantResource>.FromJson("participants", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateParticipantOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);
            string PathConferenceSid = options.PathConferenceSid;
            path = path.Replace("{"+"ConferenceSid"+"}", PathConferenceSid);
            string PathCallSid = options.PathCallSid;
            path = path.Replace("{"+"CallSid"+"}", PathCallSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Api,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Update the properties of the participant </summary>
        /// <param name="options"> Update Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ParticipantResource Update(UpdateParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update the properties of the participant </summary>
        /// <param name="options"> Update Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<ParticipantResource> UpdateAsync(UpdateParticipantOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Update the properties of the participant </summary>
        /// <param name="pathConferenceSid"> The SID of the conference with the participant to update. </param>
        /// <param name="pathCallSid"> The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update. </param>
        /// <param name="muted"> Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`. </param>
        /// <param name="hold"> Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference. </param>
        /// <param name="holdUrl"> The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. </param>
        /// <param name="holdMethod"> The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`. </param>
        /// <param name="announceUrl"> The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. </param>
        /// <param name="announceMethod"> The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="waitUrl"> The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). </param>
        /// <param name="waitMethod"> The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file. </param>
        /// <param name="beepOnExit"> Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`. </param>
        /// <param name="endConferenceOnExit"> Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`. </param>
        /// <param name="coaching"> Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined. </param>
        /// <param name="callSidToCoach"> The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ParticipantResource Update(
                                          string pathConferenceSid,
                                          string pathCallSid,
                                          string pathAccountSid = null,
                                          bool? muted = null,
                                          bool? hold = null,
                                          Uri holdUrl = null,
                                          Twilio.Http.HttpMethod holdMethod = null,
                                          Uri announceUrl = null,
                                          Twilio.Http.HttpMethod announceMethod = null,
                                          Uri waitUrl = null,
                                          Twilio.Http.HttpMethod waitMethod = null,
                                          bool? beepOnExit = null,
                                          bool? endConferenceOnExit = null,
                                          bool? coaching = null,
                                          string callSidToCoach = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateParticipantOptions(pathConferenceSid, pathCallSid){ PathAccountSid = pathAccountSid, Muted = muted, Hold = hold, HoldUrl = holdUrl, HoldMethod = holdMethod, AnnounceUrl = announceUrl, AnnounceMethod = announceMethod, WaitUrl = waitUrl, WaitMethod = waitMethod, BeepOnExit = beepOnExit, EndConferenceOnExit = endConferenceOnExit, Coaching = coaching, CallSidToCoach = callSidToCoach };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Update the properties of the participant </summary>
        /// <param name="pathConferenceSid"> The SID of the conference with the participant to update. </param>
        /// <param name="pathCallSid"> The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update. </param>
        /// <param name="muted"> Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`. </param>
        /// <param name="hold"> Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference. </param>
        /// <param name="holdUrl"> The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. </param>
        /// <param name="holdMethod"> The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`. </param>
        /// <param name="announceUrl"> The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. </param>
        /// <param name="announceMethod"> The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="waitUrl"> The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). </param>
        /// <param name="waitMethod"> The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file. </param>
        /// <param name="beepOnExit"> Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`. </param>
        /// <param name="endConferenceOnExit"> Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`. </param>
        /// <param name="coaching"> Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined. </param>
        /// <param name="callSidToCoach"> The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ParticipantResource> UpdateAsync(
                                                                              string pathConferenceSid,
                                                                              string pathCallSid,
                                                                              string pathAccountSid = null,
                                                                              bool? muted = null,
                                                                              bool? hold = null,
                                                                              Uri holdUrl = null,
                                                                              Twilio.Http.HttpMethod holdMethod = null,
                                                                              Uri announceUrl = null,
                                                                              Twilio.Http.HttpMethod announceMethod = null,
                                                                              Uri waitUrl = null,
                                                                              Twilio.Http.HttpMethod waitMethod = null,
                                                                              bool? beepOnExit = null,
                                                                              bool? endConferenceOnExit = null,
                                                                              bool? coaching = null,
                                                                              string callSidToCoach = null,
                                                                                ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateParticipantOptions(pathConferenceSid, pathCallSid){ PathAccountSid = pathAccountSid, Muted = muted, Hold = hold, HoldUrl = holdUrl, HoldMethod = holdMethod, AnnounceUrl = announceUrl, AnnounceMethod = announceMethod, WaitUrl = waitUrl, WaitMethod = waitMethod, BeepOnExit = beepOnExit, EndConferenceOnExit = endConferenceOnExit, Coaching = coaching, CallSidToCoach = callSidToCoach };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ParticipantResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ParticipantResource object represented by the provided JSON </returns>
        public static ParticipantResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ParticipantResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Participant resource is associated with. </summary> 
        [JsonProperty("call_sid")]
        public string CallSid { get; private set; }

        ///<summary> The user-specified label of this participant, if one was given when the participant was created. This may be used to fetch, update or delete the participant. </summary> 
        [JsonProperty("label")]
        public string Label { get; private set; }

        ///<summary> The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`. </summary> 
        [JsonProperty("call_sid_to_coach")]
        public string CallSidToCoach { get; private set; }

        ///<summary> Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined. </summary> 
        [JsonProperty("coaching")]
        public bool? Coaching { get; private set; }

        ///<summary> The SID of the conference the participant is in. </summary> 
        [JsonProperty("conference_sid")]
        public string ConferenceSid { get; private set; }

        ///<summary> The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> Whether the conference ends when the participant leaves. Can be: `true` or `false` and the default is `false`. If `true`, the conference ends and all other participants drop out when the participant leaves. </summary> 
        [JsonProperty("end_conference_on_exit")]
        public bool? EndConferenceOnExit { get; private set; }

        ///<summary> Whether the participant is muted. Can be `true` or `false`. </summary> 
        [JsonProperty("muted")]
        public bool? Muted { get; private set; }

        ///<summary> Whether the participant is on hold. Can be `true` or `false`. </summary> 
        [JsonProperty("hold")]
        public bool? Hold { get; private set; }

        ///<summary> Whether the conference starts when the participant joins the conference, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference. </summary> 
        [JsonProperty("start_conference_on_enter")]
        public bool? StartConferenceOnEnter { get; private set; }

        
        [JsonProperty("status")]
        public ParticipantResource.StatusEnum Status { get; private set; }

        ///<summary> The wait time in milliseconds before participant's call is placed. Only available in the response to a create participant request. </summary> 
        [JsonProperty("queue_time")]
        public string QueueTime { get; private set; }

        ///<summary> The URI of the resource, relative to `https://api.twilio.com`. </summary> 
        [JsonProperty("uri")]
        public string Uri { get; private set; }



        private ParticipantResource() {

        }
    }
}

