/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Api.V2010.Account.Usage
{

    /// <summary> Create a new UsageTrigger </summary>
    public class CreateTriggerOptions : IOptions<TriggerResource>
    {
        
        ///<summary> The URL we should call using `callback_method` when the trigger fires. </summary> 
        public Uri CallbackUrl { get; }

        ///<summary> The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`. </summary> 
        public string TriggerValue { get; }

        
        public TriggerResource.UsageCategoryEnum UsageCategory { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is `POST`. </summary> 
        public Twilio.Http.HttpMethod CallbackMethod { get; set; }

        ///<summary> A descriptive string that you create to describe the resource. It can be up to 64 characters long. </summary> 
        public string FriendlyName { get; set; }

        
        public TriggerResource.RecurringEnum Recurring { get; set; }

        
        public TriggerResource.TriggerFieldEnum TriggerBy { get; set; }


        /// <summary> Construct a new CreateUsageTriggerOptions </summary>
        /// <param name="callbackUrl"> The URL we should call using `callback_method` when the trigger fires. </param>
        /// <param name="triggerValue"> The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`. </param>
        /// <param name="usageCategory">  </param>
        public CreateTriggerOptions(Uri callbackUrl, string triggerValue, TriggerResource.UsageCategoryEnum usageCategory)
        {
            CallbackUrl = callbackUrl;
            TriggerValue = triggerValue;
            UsageCategory = usageCategory;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (CallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackUrl", Serializers.Url(CallbackUrl)));
            }
            if (TriggerValue != null)
            {
                p.Add(new KeyValuePair<string, string>("TriggerValue", TriggerValue));
            }
            if (UsageCategory != null)
            {
                p.Add(new KeyValuePair<string, string>("UsageCategory", UsageCategory.ToString()));
            }
            if (CallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackMethod", CallbackMethod.ToString()));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (Recurring != null)
            {
                p.Add(new KeyValuePair<string, string>("Recurring", Recurring.ToString()));
            }
            if (TriggerBy != null)
            {
                p.Add(new KeyValuePair<string, string>("TriggerBy", TriggerBy.ToString()));
            }
            return p;
        }

        

    }
    /// <summary> delete </summary>
    public class DeleteTriggerOptions : IOptions<TriggerResource>
    {
        
        ///<summary> The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete. </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new DeleteUsageTriggerOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete. </param>
        public DeleteTriggerOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Fetch and instance of a usage-trigger </summary>
    public class FetchTriggerOptions : IOptions<TriggerResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch. </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new FetchUsageTriggerOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch. </param>
        public FetchTriggerOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a list of usage-triggers belonging to the account used to make the request </summary>
    public class ReadTriggerOptions : ReadOptions<TriggerResource>
    {
    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers. </summary> 
        public TriggerResource.RecurringEnum Recurring { get; set; }

        ///<summary> The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price). </summary> 
        public TriggerResource.TriggerFieldEnum TriggerBy { get; set; }

        ///<summary> The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories). </summary> 
        public TriggerResource.UsageCategoryEnum UsageCategory { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Recurring != null)
            {
                p.Add(new KeyValuePair<string, string>("Recurring", Recurring.ToString()));
            }
            if (TriggerBy != null)
            {
                p.Add(new KeyValuePair<string, string>("TriggerBy", TriggerBy.ToString()));
            }
            if (UsageCategory != null)
            {
                p.Add(new KeyValuePair<string, string>("UsageCategory", UsageCategory.ToString()));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> Update an instance of a usage trigger </summary>
    public class UpdateTriggerOptions : IOptions<TriggerResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the UsageTrigger resource to update. </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is `POST`. </summary> 
        public Twilio.Http.HttpMethod CallbackMethod { get; set; }

        ///<summary> The URL we should call using `callback_method` when the trigger fires. </summary> 
        public Uri CallbackUrl { get; set; }

        ///<summary> A descriptive string that you create to describe the resource. It can be up to 64 characters long. </summary> 
        public string FriendlyName { get; set; }



        /// <summary> Construct a new UpdateUsageTriggerOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the UsageTrigger resource to update. </param>
        public UpdateTriggerOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (CallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackMethod", CallbackMethod.ToString()));
            }
            if (CallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackUrl", Serializers.Url(CallbackUrl)));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            return p;
        }

        

    }


}

