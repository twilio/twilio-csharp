/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Api.V2010.Account
{

    /// <summary> create </summary>
    public class CreateAddressOptions : IOptions<AddressResource>
    {
        
        ///<summary> The name to associate with the new address. </summary> 
        public string CustomerName { get; }

        ///<summary> The number and street address of the new address. </summary> 
        public string Street { get; }

        ///<summary> The city of the new address. </summary> 
        public string City { get; }

        ///<summary> The state or region of the new address. </summary> 
        public string Region { get; }

        ///<summary> The postal code of the new address. </summary> 
        public string PostalCode { get; }

        ///<summary> The ISO country code of the new address. </summary> 
        public string IsoCountry { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> A descriptive string that you create to describe the new address. It can be up to 64 characters long. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> Whether to enable emergency calling on the new address. Can be: `true` or `false`. </summary> 
        public bool? EmergencyEnabled { get; set; }

        ///<summary> Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide. </summary> 
        public bool? AutoCorrectAddress { get; set; }

        ///<summary> The additional number and street address of the address. </summary> 
        public string StreetSecondary { get; set; }


        /// <summary> Construct a new CreateAddressOptions </summary>
        /// <param name="customerName"> The name to associate with the new address. </param>
        /// <param name="street"> The number and street address of the new address. </param>
        /// <param name="city"> The city of the new address. </param>
        /// <param name="region"> The state or region of the new address. </param>
        /// <param name="postalCode"> The postal code of the new address. </param>
        /// <param name="isoCountry"> The ISO country code of the new address. </param>
        public CreateAddressOptions(string customerName, string street, string city, string region, string postalCode, string isoCountry)
        {
            CustomerName = customerName;
            Street = street;
            City = city;
            Region = region;
            PostalCode = postalCode;
            IsoCountry = isoCountry;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (CustomerName != null)
            {
                p.Add(new KeyValuePair<string, string>("CustomerName", CustomerName));
            }
            if (Street != null)
            {
                p.Add(new KeyValuePair<string, string>("Street", Street));
            }
            if (City != null)
            {
                p.Add(new KeyValuePair<string, string>("City", City));
            }
            if (Region != null)
            {
                p.Add(new KeyValuePair<string, string>("Region", Region));
            }
            if (PostalCode != null)
            {
                p.Add(new KeyValuePair<string, string>("PostalCode", PostalCode));
            }
            if (IsoCountry != null)
            {
                p.Add(new KeyValuePair<string, string>("IsoCountry", IsoCountry.ToString()));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (EmergencyEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("EmergencyEnabled", EmergencyEnabled.Value.ToString().ToLower()));
            }
            if (AutoCorrectAddress != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCorrectAddress", AutoCorrectAddress.Value.ToString().ToLower()));
            }
            if (StreetSecondary != null)
            {
                p.Add(new KeyValuePair<string, string>("StreetSecondary", StreetSecondary));
            }
            return p;
        }

        

    }
    /// <summary> delete </summary>
    public class DeleteAddressOptions : IOptions<AddressResource>
    {
        
        ///<summary> The Twilio-provided string that uniquely identifies the Address resource to delete. </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new DeleteAddressOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Address resource to delete. </param>
        public DeleteAddressOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> fetch </summary>
    public class FetchAddressOptions : IOptions<AddressResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the Address resource to fetch. </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new FetchAddressOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Address resource to fetch. </param>
        public FetchAddressOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> read </summary>
    public class ReadAddressOptions : ReadOptions<AddressResource>
    {
    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> The `customer_name` of the Address resources to read. </summary> 
        public string CustomerName { get; set; }

        ///<summary> The string that identifies the Address resources to read. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> The ISO country code of the Address resources to read. </summary> 
        public string IsoCountry { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (CustomerName != null)
            {
                p.Add(new KeyValuePair<string, string>("CustomerName", CustomerName));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (IsoCountry != null)
            {
                p.Add(new KeyValuePair<string, string>("IsoCountry", IsoCountry.ToString()));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> update </summary>
    public class UpdateAddressOptions : IOptions<AddressResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the Address resource to update. </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> A descriptive string that you create to describe the address. It can be up to 64 characters long. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> The name to associate with the address. </summary> 
        public string CustomerName { get; set; }

        ///<summary> The number and street address of the address. </summary> 
        public string Street { get; set; }

        ///<summary> The city of the address. </summary> 
        public string City { get; set; }

        ///<summary> The state or region of the address. </summary> 
        public string Region { get; set; }

        ///<summary> The postal code of the address. </summary> 
        public string PostalCode { get; set; }

        ///<summary> Whether to enable emergency calling on the address. Can be: `true` or `false`. </summary> 
        public bool? EmergencyEnabled { get; set; }

        ///<summary> Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide. </summary> 
        public bool? AutoCorrectAddress { get; set; }

        ///<summary> The additional number and street address of the address. </summary> 
        public string StreetSecondary { get; set; }



        /// <summary> Construct a new UpdateAddressOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Address resource to update. </param>
        public UpdateAddressOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (CustomerName != null)
            {
                p.Add(new KeyValuePair<string, string>("CustomerName", CustomerName));
            }
            if (Street != null)
            {
                p.Add(new KeyValuePair<string, string>("Street", Street));
            }
            if (City != null)
            {
                p.Add(new KeyValuePair<string, string>("City", City));
            }
            if (Region != null)
            {
                p.Add(new KeyValuePair<string, string>("Region", Region));
            }
            if (PostalCode != null)
            {
                p.Add(new KeyValuePair<string, string>("PostalCode", PostalCode));
            }
            if (EmergencyEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("EmergencyEnabled", EmergencyEnabled.Value.ToString().ToLower()));
            }
            if (AutoCorrectAddress != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCorrectAddress", AutoCorrectAddress.Value.ToString().ToLower()));
            }
            if (StreetSecondary != null)
            {
                p.Add(new KeyValuePair<string, string>("StreetSecondary", StreetSecondary));
            }
            return p;
        }

        

    }


}

