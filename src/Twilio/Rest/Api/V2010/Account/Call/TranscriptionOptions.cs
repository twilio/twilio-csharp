/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Api.V2010.Account.Call
{

    /// <summary> Create a Transcription </summary>
    public class CreateTranscriptionOptions : IOptions<TranscriptionResource>
    {
        
        ///<summary> The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Transcription resource is associated with. </summary> 
        public string PathCallSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Transcription resource. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> The user-specified name of this Transcription, if one was given when the Transcription was created. This may be used to stop the Transcription. </summary> 
        public string Name { get; set; }

        
        public TranscriptionResource.TrackEnum Track { get; set; }

        ///<summary> Absolute URL of the status callback. </summary> 
        public Uri StatusCallbackUrl { get; set; }

        ///<summary> The http method for the status_callback (one of GET, POST). </summary> 
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }

        ///<summary> Friendly name given to the Inbound Track </summary> 
        public string InboundTrackLabel { get; set; }

        ///<summary> Friendly name given to the Outbound Track </summary> 
        public string OutboundTrackLabel { get; set; }

        ///<summary> Indicates if partial results are going to be sent to the customer </summary> 
        public bool? PartialResults { get; set; }

        ///<summary> Language code used by the transcription engine, specified in [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) format </summary> 
        public string LanguageCode { get; set; }

        ///<summary> Definition of the transcription engine to be used, among those supported by Twilio </summary> 
        public string TranscriptionEngine { get; set; }

        ///<summary> indicates if the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks </summary> 
        public bool? ProfanityFilter { get; set; }

        ///<summary> Recognition model used by the transcription engine, among those supported by the provider </summary> 
        public string SpeechModel { get; set; }

        ///<summary> A Phrase contains words and phrase \\\"hints\\\" so that the speech recognition engine is more likely to recognize them. </summary> 
        public string Hints { get; set; }

        ///<summary> The provider will add punctuation to recognition result </summary> 
        public bool? EnableAutomaticPunctuation { get; set; }


        /// <summary> Construct a new CreateRealtimeTranscriptionOptions </summary>
        /// <param name="pathCallSid"> The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Transcription resource is associated with. </param>
        public CreateTranscriptionOptions(string pathCallSid)
        {
            PathCallSid = pathCallSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Name != null)
            {
                p.Add(new KeyValuePair<string, string>("Name", Name));
            }
            if (Track != null)
            {
                p.Add(new KeyValuePair<string, string>("Track", Track.ToString()));
            }
            if (StatusCallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallbackUrl", Serializers.Url(StatusCallbackUrl)));
            }
            if (StatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
            }
            if (InboundTrackLabel != null)
            {
                p.Add(new KeyValuePair<string, string>("InboundTrackLabel", InboundTrackLabel));
            }
            if (OutboundTrackLabel != null)
            {
                p.Add(new KeyValuePair<string, string>("OutboundTrackLabel", OutboundTrackLabel));
            }
            if (PartialResults != null)
            {
                p.Add(new KeyValuePair<string, string>("PartialResults", PartialResults.Value.ToString().ToLower()));
            }
            if (LanguageCode != null)
            {
                p.Add(new KeyValuePair<string, string>("LanguageCode", LanguageCode));
            }
            if (TranscriptionEngine != null)
            {
                p.Add(new KeyValuePair<string, string>("TranscriptionEngine", TranscriptionEngine));
            }
            if (ProfanityFilter != null)
            {
                p.Add(new KeyValuePair<string, string>("ProfanityFilter", ProfanityFilter.Value.ToString().ToLower()));
            }
            if (SpeechModel != null)
            {
                p.Add(new KeyValuePair<string, string>("SpeechModel", SpeechModel));
            }
            if (Hints != null)
            {
                p.Add(new KeyValuePair<string, string>("Hints", Hints));
            }
            if (EnableAutomaticPunctuation != null)
            {
                p.Add(new KeyValuePair<string, string>("EnableAutomaticPunctuation", EnableAutomaticPunctuation.Value.ToString().ToLower()));
            }
            return p;
        }

        

    }
    /// <summary> Stop a Transcription using either the SID of the Transcription resource or the `name` used when creating the resource </summary>
    public class UpdateTranscriptionOptions : IOptions<TranscriptionResource>
    {
    
        ///<summary> The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Transcription resource is associated with. </summary> 
        public string PathCallSid { get; }

        ///<summary> The SID of the Transcription resource, or the `name` used when creating the resource </summary> 
        public string PathSid { get; }

        
        public TranscriptionResource.UpdateStatusEnum Status { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Transcription resource. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new UpdateRealtimeTranscriptionOptions </summary>
        /// <param name="pathCallSid"> The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Transcription resource is associated with. </param>
        /// <param name="pathSid"> The SID of the Transcription resource, or the `name` used when creating the resource </param>
        /// <param name="status">  </param>
        public UpdateTranscriptionOptions(string pathCallSid, string pathSid, TranscriptionResource.UpdateStatusEnum status)
        {
            PathCallSid = pathCallSid;
            PathSid = pathSid;
            Status = status;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }
            return p;
        }

        

    }


}

