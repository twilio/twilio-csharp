/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;
using System.Linq;
using Twilio.Types;


namespace Twilio.Rest.Api.V2010.Account
{

    /// <summary> Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections </summary>
    public class CreateCallOptions : IOptions<CallResource>
    {
        
        ///<summary> The phone number, SIP address, or client identifier to call. </summary> 
        public IEndpoint To { get; }

        ///<summary> The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number. </summary> 
        public IEndpoint From { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> The HTTP method we should use when calling the `url` parameter's value. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored. </summary> 
        public Twilio.Http.HttpMethod Method { get; set; }

        ///<summary> The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored. </summary> 
        public Uri FallbackUrl { get; set; }

        ///<summary> The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored. </summary> 
        public Twilio.Http.HttpMethod FallbackMethod { get; set; }

        ///<summary> The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted). </summary> 
        public Uri StatusCallback { get; set; }

        ///<summary> The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored. </summary> 
        public List<string> StatusCallbackEvent { get; set; }

        ///<summary> The HTTP method we should use when calling the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored. </summary> 
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }

        ///<summary> A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored. </summary> 
        public string SendDigits { get; set; }

        ///<summary> The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail. </summary> 
        public int? Timeout { get; set; }

        ///<summary> Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL. </summary> 
        public bool? Record { get; set; }

        ///<summary> The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call. </summary> 
        public string RecordingChannels { get; set; }

        ///<summary> The URL that we call when the recording is available to be accessed. </summary> 
        public string RecordingStatusCallback { get; set; }

        ///<summary> The HTTP method we should use when calling the `recording_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. </summary> 
        public Twilio.Http.HttpMethod RecordingStatusCallbackMethod { get; set; }

        ///<summary> The username used to authenticate the caller making a SIP call. </summary> 
        public string SipAuthUsername { get; set; }

        ///<summary> The password required to authenticate the user account specified in `sip_auth_username`. </summary> 
        public string SipAuthPassword { get; set; }

        ///<summary> Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection). </summary> 
        public string MachineDetection { get; set; }

        ///<summary> The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds. </summary> 
        public int? MachineDetectionTimeout { get; set; }

        ///<summary> The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space. </summary> 
        public List<string> RecordingStatusCallbackEvent { get; set; }

        ///<summary> Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`. </summary> 
        public string Trim { get; set; }

        ///<summary> The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. </summary> 
        public string CallerId { get; set; }

        ///<summary> The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400. </summary> 
        public int? MachineDetectionSpeechThreshold { get; set; }

        ///<summary> The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200. </summary> 
        public int? MachineDetectionSpeechEndThreshold { get; set; }

        ///<summary> The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000. </summary> 
        public int? MachineDetectionSilenceTimeout { get; set; }

        ///<summary> Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`. </summary> 
        public string AsyncAmd { get; set; }

        ///<summary> The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax. </summary> 
        public Uri AsyncAmdStatusCallback { get; set; }

        ///<summary> The HTTP method we should use when calling the `async_amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. </summary> 
        public Twilio.Http.HttpMethod AsyncAmdStatusCallbackMethod { get; set; }

        ///<summary> The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta) </summary> 
        public string Byoc { get; set; }

        ///<summary> The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta) </summary> 
        public string CallReason { get; set; }

        ///<summary> A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call. </summary> 
        public string CallToken { get; set; }

        ///<summary> The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio. </summary> 
        public string RecordingTrack { get; set; }

        ///<summary> The maximum duration of the call in seconds. Constraints depend on account and configuration. </summary> 
        public int? TimeLimit { get; set; }

        ///<summary> The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls). </summary> 
        public Uri Url { get; set; }

        ///<summary> TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored. Max 4000 characters. </summary> 
        public Types.Twiml Twiml { get; set; }

        ///<summary> The SID of the Application resource that will handle the call, if the call will be handled by an application. </summary> 
        public string ApplicationSid { get; set; }


        /// <summary> Construct a new CreateCallOptions </summary>
        /// <param name="to"> The phone number, SIP address, or client identifier to call. </param>
        /// <param name="from"> The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number. </param>
        public CreateCallOptions(IEndpoint to, IEndpoint from)
        {
            To = to;
            From = from;
            StatusCallbackEvent = new List<string>();
            RecordingStatusCallbackEvent = new List<string>();
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (To != null)
            {
                p.Add(new KeyValuePair<string, string>("To", To.ToString()));
            }
            if (From != null)
            {
                p.Add(new KeyValuePair<string, string>("From", From.ToString()));
            }
            if (Method != null)
            {
                p.Add(new KeyValuePair<string, string>("Method", Method.ToString()));
            }
            if (FallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("FallbackUrl", Serializers.Url(FallbackUrl)));
            }
            if (FallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("FallbackMethod", FallbackMethod.ToString()));
            }
            if (StatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
            }
            if (StatusCallbackEvent != null)
            {
                p.AddRange(StatusCallbackEvent.Select(StatusCallbackEvent => new KeyValuePair<string, string>("StatusCallbackEvent", StatusCallbackEvent)));
            }
            if (StatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
            }
            if (SendDigits != null)
            {
                p.Add(new KeyValuePair<string, string>("SendDigits", SendDigits));
            }
            if (Timeout != null)
            {
                p.Add(new KeyValuePair<string, string>("Timeout", Timeout.ToString()));
            }
            if (Record != null)
            {
                p.Add(new KeyValuePair<string, string>("Record", Record.Value.ToString().ToLower()));
            }
            if (RecordingChannels != null)
            {
                p.Add(new KeyValuePair<string, string>("RecordingChannels", RecordingChannels));
            }
            if (RecordingStatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("RecordingStatusCallback", RecordingStatusCallback));
            }
            if (RecordingStatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("RecordingStatusCallbackMethod", RecordingStatusCallbackMethod.ToString()));
            }
            if (SipAuthUsername != null)
            {
                p.Add(new KeyValuePair<string, string>("SipAuthUsername", SipAuthUsername));
            }
            if (SipAuthPassword != null)
            {
                p.Add(new KeyValuePair<string, string>("SipAuthPassword", SipAuthPassword));
            }
            if (MachineDetection != null)
            {
                p.Add(new KeyValuePair<string, string>("MachineDetection", MachineDetection));
            }
            if (MachineDetectionTimeout != null)
            {
                p.Add(new KeyValuePair<string, string>("MachineDetectionTimeout", MachineDetectionTimeout.ToString()));
            }
            if (RecordingStatusCallbackEvent != null)
            {
                p.AddRange(RecordingStatusCallbackEvent.Select(RecordingStatusCallbackEvent => new KeyValuePair<string, string>("RecordingStatusCallbackEvent", RecordingStatusCallbackEvent)));
            }
            if (Trim != null)
            {
                p.Add(new KeyValuePair<string, string>("Trim", Trim));
            }
            if (CallerId != null)
            {
                p.Add(new KeyValuePair<string, string>("CallerId", CallerId));
            }
            if (MachineDetectionSpeechThreshold != null)
            {
                p.Add(new KeyValuePair<string, string>("MachineDetectionSpeechThreshold", MachineDetectionSpeechThreshold.ToString()));
            }
            if (MachineDetectionSpeechEndThreshold != null)
            {
                p.Add(new KeyValuePair<string, string>("MachineDetectionSpeechEndThreshold", MachineDetectionSpeechEndThreshold.ToString()));
            }
            if (MachineDetectionSilenceTimeout != null)
            {
                p.Add(new KeyValuePair<string, string>("MachineDetectionSilenceTimeout", MachineDetectionSilenceTimeout.ToString()));
            }
            if (AsyncAmd != null)
            {
                p.Add(new KeyValuePair<string, string>("AsyncAmd", AsyncAmd));
            }
            if (AsyncAmdStatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("AsyncAmdStatusCallback", Serializers.Url(AsyncAmdStatusCallback)));
            }
            if (AsyncAmdStatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("AsyncAmdStatusCallbackMethod", AsyncAmdStatusCallbackMethod.ToString()));
            }
            if (Byoc != null)
            {
                p.Add(new KeyValuePair<string, string>("Byoc", Byoc));
            }
            if (CallReason != null)
            {
                p.Add(new KeyValuePair<string, string>("CallReason", CallReason));
            }
            if (CallToken != null)
            {
                p.Add(new KeyValuePair<string, string>("CallToken", CallToken));
            }
            if (RecordingTrack != null)
            {
                p.Add(new KeyValuePair<string, string>("RecordingTrack", RecordingTrack));
            }
            if (TimeLimit != null)
            {
                p.Add(new KeyValuePair<string, string>("TimeLimit", TimeLimit.ToString()));
            }
            if (Url != null)
            {
                p.Add(new KeyValuePair<string, string>("Url", Serializers.Url(Url)));
            }
            if (Twiml != null)
            {
                p.Add(new KeyValuePair<string, string>("Twiml", Twiml.ToString()));
            }
            if (ApplicationSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ApplicationSid", ApplicationSid));
            }
            return p;
        }

        

    }
    /// <summary> Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs. </summary>
    public class DeleteCallOptions : IOptions<CallResource>
    {
        
        ///<summary> The Twilio-provided Call SID that uniquely identifies the Call resource to delete </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to delete. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new DeleteCallOptions </summary>
        /// <param name="pathSid"> The Twilio-provided Call SID that uniquely identifies the Call resource to delete </param>
        public DeleteCallOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Fetch the call specified by the provided Call SID </summary>
    public class FetchCallOptions : IOptions<CallResource>
    {
    
        ///<summary> The SID of the Call resource to fetch. </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to fetch. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new FetchCallOptions </summary>
        /// <param name="pathSid"> The SID of the Call resource to fetch. </param>
        public FetchCallOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieves a collection of calls made to and from your account </summary>
    public class ReadCallOptions : ReadOptions<CallResource>
    {
    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to read. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> Only show calls made to this phone number, SIP address, Client identifier or SIM SID. </summary> 
        public Types.PhoneNumber To { get; set; }

        ///<summary> Only include calls from this phone number, SIP address, Client identifier or SIM SID. </summary> 
        public Types.PhoneNumber From { get; set; }

        ///<summary> Only include calls spawned by calls with this SID. </summary> 
        public string ParentCallSid { get; set; }

        ///<summary> The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`. </summary> 
        public CallResource.StatusEnum Status { get; set; }

        ///<summary> Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date. </summary> 
        public DateTime? StartTime { get; set; }

        ///<summary> Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date. </summary> 
        public DateTime? StartTimeBefore { get; set; }

        ///<summary> Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date. </summary> 
        public DateTime? StartTimeAfter { get; set; }

        ///<summary> Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date. </summary> 
        public DateTime? EndTime { get; set; }

        ///<summary> Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date. </summary> 
        public DateTime? EndTimeBefore { get; set; }

        ///<summary> Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date. </summary> 
        public DateTime? EndTimeAfter { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (To != null)
            {
                p.Add(new KeyValuePair<string, string>("To", To.ToString()));
            }
            if (From != null)
            {
                p.Add(new KeyValuePair<string, string>("From", From.ToString()));
            }
            if (ParentCallSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ParentCallSid", ParentCallSid));
            }
            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }
            if (StartTime != null)
            {
                p.Add(new KeyValuePair<string, string>("StartTime", Serializers.DateTimeIso8601(StartTime)));
            }
            else
            {
                if (StartTimeBefore != null)
                {
                    p.Add(new KeyValuePair<string, string>("StartTime<", Serializers.DateTimeIso8601(StartTimeBefore)));
                }
                if (StartTimeAfter != null)
                {
                    p.Add(new KeyValuePair<string, string>("StartTime>", Serializers.DateTimeIso8601(StartTimeAfter)));
                }
            }
            if (EndTime != null)
            {
                p.Add(new KeyValuePair<string, string>("EndTime", Serializers.DateTimeIso8601(EndTime)));
            }
            else
            {
                if (EndTimeBefore != null)
                {
                    p.Add(new KeyValuePair<string, string>("EndTime<", Serializers.DateTimeIso8601(EndTimeBefore)));
                }
                if (EndTimeAfter != null)
                {
                    p.Add(new KeyValuePair<string, string>("EndTime>", Serializers.DateTimeIso8601(EndTimeAfter)));
                }
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> Initiates a call redirect or terminates a call </summary>
    public class UpdateCallOptions : IOptions<CallResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the Call resource to update </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to update. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls). </summary> 
        public Uri Url { get; set; }

        ///<summary> The HTTP method we should use when calling the `url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored. </summary> 
        public Twilio.Http.HttpMethod Method { get; set; }

        
        public CallResource.UpdateStatusEnum Status { get; set; }

        ///<summary> The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored. </summary> 
        public Uri FallbackUrl { get; set; }

        ///<summary> The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored. </summary> 
        public Twilio.Http.HttpMethod FallbackMethod { get; set; }

        ///<summary> The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted). </summary> 
        public Uri StatusCallback { get; set; }

        ///<summary> The HTTP method we should use when requesting the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored. </summary> 
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }

        ///<summary> TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive </summary> 
        public Types.Twiml Twiml { get; set; }

        ///<summary> The maximum duration of the call in seconds. Constraints depend on account and configuration. </summary> 
        public int? TimeLimit { get; set; }



        /// <summary> Construct a new UpdateCallOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Call resource to update </param>
        public UpdateCallOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Url != null)
            {
                p.Add(new KeyValuePair<string, string>("Url", Serializers.Url(Url)));
            }
            if (Method != null)
            {
                p.Add(new KeyValuePair<string, string>("Method", Method.ToString()));
            }
            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }
            if (FallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("FallbackUrl", Serializers.Url(FallbackUrl)));
            }
            if (FallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("FallbackMethod", FallbackMethod.ToString()));
            }
            if (StatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
            }
            if (StatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
            }
            if (Twiml != null)
            {
                p.Add(new KeyValuePair<string, string>("Twiml", Twiml.ToString()));
            }
            if (TimeLimit != null)
            {
                p.Add(new KeyValuePair<string, string>("TimeLimit", TimeLimit.ToString()));
            }
            return p;
        }

        

    }


}

