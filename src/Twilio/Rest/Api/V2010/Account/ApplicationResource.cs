/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Api.V2010.Account
{
    public class ApplicationResource : Resource
    {
    

    

        
        private static Request BuildCreateRequest(CreateApplicationOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/Applications.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Api,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Create a new application within your account </summary>
        /// <param name="options"> Create Application parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Application </returns>
        public static ApplicationResource Create(CreateApplicationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a new application within your account </summary>
        /// <param name="options"> Create Application parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Application </returns>
        public static async System.Threading.Tasks.Task<ApplicationResource> CreateAsync(CreateApplicationOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a new application within your account </summary>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. </param>
        /// <param name="apiVersion"> The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version. </param>
        /// <param name="voiceUrl"> The URL we should call when the phone number assigned to this application receives a call. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="statusCallback"> The URL we should call using the `status_callback_method` to send status information to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceCallerIdLookup"> Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`. </param>
        /// <param name="smsUrl"> The URL we should call when the phone number receives an incoming SMS message. </param>
        /// <param name="smsMethod"> The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`. </param>
        /// <param name="smsFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`. </param>
        /// <param name="smsFallbackMethod"> The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="smsStatusCallback"> The URL we should call using a POST method to send status information about SMS messages sent by the application. </param>
        /// <param name="messageStatusCallback"> The URL we should call using a POST method to send message status information to your application. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the new application. It can be up to 64 characters long. </param>
        /// <param name="publicApplicationConnectEnabled"> Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: `true` or `false`. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Application </returns>
        public static ApplicationResource Create(
                                          string pathAccountSid = null,
                                          string apiVersion = null,
                                          Uri voiceUrl = null,
                                          Twilio.Http.HttpMethod voiceMethod = null,
                                          Uri voiceFallbackUrl = null,
                                          Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                          Uri statusCallback = null,
                                          Twilio.Http.HttpMethod statusCallbackMethod = null,
                                          bool? voiceCallerIdLookup = null,
                                          Uri smsUrl = null,
                                          Twilio.Http.HttpMethod smsMethod = null,
                                          Uri smsFallbackUrl = null,
                                          Twilio.Http.HttpMethod smsFallbackMethod = null,
                                          Uri smsStatusCallback = null,
                                          Uri messageStatusCallback = null,
                                          string friendlyName = null,
                                          bool? publicApplicationConnectEnabled = null,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateApplicationOptions(){  PathAccountSid = pathAccountSid, ApiVersion = apiVersion, VoiceUrl = voiceUrl, VoiceMethod = voiceMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceFallbackMethod = voiceFallbackMethod, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, VoiceCallerIdLookup = voiceCallerIdLookup, SmsUrl = smsUrl, SmsMethod = smsMethod, SmsFallbackUrl = smsFallbackUrl, SmsFallbackMethod = smsFallbackMethod, SmsStatusCallback = smsStatusCallback, MessageStatusCallback = messageStatusCallback, FriendlyName = friendlyName, PublicApplicationConnectEnabled = publicApplicationConnectEnabled };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a new application within your account </summary>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. </param>
        /// <param name="apiVersion"> The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version. </param>
        /// <param name="voiceUrl"> The URL we should call when the phone number assigned to this application receives a call. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="statusCallback"> The URL we should call using the `status_callback_method` to send status information to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceCallerIdLookup"> Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`. </param>
        /// <param name="smsUrl"> The URL we should call when the phone number receives an incoming SMS message. </param>
        /// <param name="smsMethod"> The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`. </param>
        /// <param name="smsFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`. </param>
        /// <param name="smsFallbackMethod"> The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="smsStatusCallback"> The URL we should call using a POST method to send status information about SMS messages sent by the application. </param>
        /// <param name="messageStatusCallback"> The URL we should call using a POST method to send message status information to your application. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the new application. It can be up to 64 characters long. </param>
        /// <param name="publicApplicationConnectEnabled"> Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: `true` or `false`. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Application </returns>
        public static async System.Threading.Tasks.Task<ApplicationResource> CreateAsync(
                                                                                  string pathAccountSid = null,
                                                                                  string apiVersion = null,
                                                                                  Uri voiceUrl = null,
                                                                                  Twilio.Http.HttpMethod voiceMethod = null,
                                                                                  Uri voiceFallbackUrl = null,
                                                                                  Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                                                                  Uri statusCallback = null,
                                                                                  Twilio.Http.HttpMethod statusCallbackMethod = null,
                                                                                  bool? voiceCallerIdLookup = null,
                                                                                  Uri smsUrl = null,
                                                                                  Twilio.Http.HttpMethod smsMethod = null,
                                                                                  Uri smsFallbackUrl = null,
                                                                                  Twilio.Http.HttpMethod smsFallbackMethod = null,
                                                                                  Uri smsStatusCallback = null,
                                                                                  Uri messageStatusCallback = null,
                                                                                  string friendlyName = null,
                                                                                  bool? publicApplicationConnectEnabled = null,
                                                                                    ITwilioRestClient client = null,
                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateApplicationOptions(){  PathAccountSid = pathAccountSid, ApiVersion = apiVersion, VoiceUrl = voiceUrl, VoiceMethod = voiceMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceFallbackMethod = voiceFallbackMethod, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, VoiceCallerIdLookup = voiceCallerIdLookup, SmsUrl = smsUrl, SmsMethod = smsMethod, SmsFallbackUrl = smsFallbackUrl, SmsFallbackMethod = smsFallbackMethod, SmsStatusCallback = smsStatusCallback, MessageStatusCallback = messageStatusCallback, FriendlyName = friendlyName, PublicApplicationConnectEnabled = publicApplicationConnectEnabled };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        /// <summary> Delete the application by the specified application sid </summary>
        /// <param name="options"> Delete Application parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Application </returns>
        private static Request BuildDeleteRequest(DeleteApplicationOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Delete the application by the specified application sid </summary>
        /// <param name="options"> Delete Application parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Application </returns>
        public static bool Delete(DeleteApplicationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> Delete the application by the specified application sid </summary>
        /// <param name="options"> Delete Application parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Application </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteApplicationOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> Delete the application by the specified application sid </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Application resource to delete. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Application </returns>
        public static bool Delete(string pathSid, string pathAccountSid = null, ITwilioRestClient client = null)
        {
            var options = new DeleteApplicationOptions(pathSid)      { PathAccountSid = pathAccountSid }   ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> Delete the application by the specified application sid </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Application resource to delete. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Application </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, string pathAccountSid = null, ITwilioRestClient client = null,
                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteApplicationOptions(pathSid)  { PathAccountSid = pathAccountSid };
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchApplicationOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch the application specified by the provided sid </summary>
        /// <param name="options"> Fetch Application parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Application </returns>
        public static ApplicationResource Fetch(FetchApplicationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Fetch the application specified by the provided sid </summary>
        /// <param name="options"> Fetch Application parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Application </returns>
        public static async System.Threading.Tasks.Task<ApplicationResource> FetchAsync(FetchApplicationOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Fetch the application specified by the provided sid </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Application resource to fetch. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Application </returns>
        public static ApplicationResource Fetch(
                                         string pathSid, 
                                         string pathAccountSid = null, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchApplicationOptions(pathSid){ PathAccountSid = pathAccountSid };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Fetch the application specified by the provided sid </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Application resource to fetch. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Application </returns>
        public static async System.Threading.Tasks.Task<ApplicationResource> FetchAsync(string pathSid, string pathAccountSid = null, ITwilioRestClient client = null,
                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchApplicationOptions(pathSid){ PathAccountSid = pathAccountSid };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadApplicationOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/Applications.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> Retrieve a list of applications representing an application within the requesting account </summary>
        /// <param name="options"> Read Application parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Application </returns>
        public static ResourceSet<ApplicationResource> Read(ReadApplicationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<ApplicationResource>.FromJson("applications", response.Content);
            return new ResourceSet<ApplicationResource>(page, options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of applications representing an application within the requesting account </summary>
        /// <param name="options"> Read Application parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Application </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ApplicationResource>> ReadAsync(ReadApplicationOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<ApplicationResource>.FromJson("applications", response.Content);
            return new ResourceSet<ApplicationResource>(page, options, client);
        }
        #endif
        /// <summary> Retrieve a list of applications representing an application within the requesting account </summary>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read. </param>
        /// <param name="friendlyName"> The string that identifies the Application resources to read. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Application </returns>
        public static ResourceSet<ApplicationResource> Read(
                                                     string pathAccountSid = null,
                                                     string friendlyName = null,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadApplicationOptions(){ PathAccountSid = pathAccountSid, FriendlyName = friendlyName, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of applications representing an application within the requesting account </summary>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read. </param>
        /// <param name="friendlyName"> The string that identifies the Application resources to read. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Application </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ApplicationResource>> ReadAsync(
                                                                                             string pathAccountSid = null,
                                                                                             string friendlyName = null,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null,
                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadApplicationOptions(){ PathAccountSid = pathAccountSid, FriendlyName = friendlyName, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<ApplicationResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<ApplicationResource>.FromJson("applications", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<ApplicationResource> NextPage(Page<ApplicationResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ApplicationResource>.FromJson("applications", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<ApplicationResource> PreviousPage(Page<ApplicationResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ApplicationResource>.FromJson("applications", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateApplicationOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Api,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Updates the application's properties </summary>
        /// <param name="options"> Update Application parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Application </returns>
        public static ApplicationResource Update(UpdateApplicationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Updates the application's properties </summary>
        /// <param name="options"> Update Application parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Application </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<ApplicationResource> UpdateAsync(UpdateApplicationOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Updates the application's properties </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Application resource to update. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the resource. It can be up to 64 characters long. </param>
        /// <param name="apiVersion"> The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version. </param>
        /// <param name="voiceUrl"> The URL we should call when the phone number assigned to this application receives a call. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="statusCallback"> The URL we should call using the `status_callback_method` to send status information to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceCallerIdLookup"> Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`. </param>
        /// <param name="smsUrl"> The URL we should call when the phone number receives an incoming SMS message. </param>
        /// <param name="smsMethod"> The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`. </param>
        /// <param name="smsFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`. </param>
        /// <param name="smsFallbackMethod"> The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="smsStatusCallback"> Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility. </param>
        /// <param name="messageStatusCallback"> The URL we should call using a POST method to send message status information to your application. </param>
        /// <param name="publicApplicationConnectEnabled"> Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: `true` or `false`. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Application </returns>
        public static ApplicationResource Update(
                                          string pathSid,
                                          string pathAccountSid = null,
                                          string friendlyName = null,
                                          string apiVersion = null,
                                          Uri voiceUrl = null,
                                          Twilio.Http.HttpMethod voiceMethod = null,
                                          Uri voiceFallbackUrl = null,
                                          Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                          Uri statusCallback = null,
                                          Twilio.Http.HttpMethod statusCallbackMethod = null,
                                          bool? voiceCallerIdLookup = null,
                                          Uri smsUrl = null,
                                          Twilio.Http.HttpMethod smsMethod = null,
                                          Uri smsFallbackUrl = null,
                                          Twilio.Http.HttpMethod smsFallbackMethod = null,
                                          Uri smsStatusCallback = null,
                                          Uri messageStatusCallback = null,
                                          bool? publicApplicationConnectEnabled = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateApplicationOptions(pathSid){ PathAccountSid = pathAccountSid, FriendlyName = friendlyName, ApiVersion = apiVersion, VoiceUrl = voiceUrl, VoiceMethod = voiceMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceFallbackMethod = voiceFallbackMethod, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, VoiceCallerIdLookup = voiceCallerIdLookup, SmsUrl = smsUrl, SmsMethod = smsMethod, SmsFallbackUrl = smsFallbackUrl, SmsFallbackMethod = smsFallbackMethod, SmsStatusCallback = smsStatusCallback, MessageStatusCallback = messageStatusCallback, PublicApplicationConnectEnabled = publicApplicationConnectEnabled };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Updates the application's properties </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Application resource to update. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the resource. It can be up to 64 characters long. </param>
        /// <param name="apiVersion"> The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version. </param>
        /// <param name="voiceUrl"> The URL we should call when the phone number assigned to this application receives a call. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="statusCallback"> The URL we should call using the `status_callback_method` to send status information to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceCallerIdLookup"> Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`. </param>
        /// <param name="smsUrl"> The URL we should call when the phone number receives an incoming SMS message. </param>
        /// <param name="smsMethod"> The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`. </param>
        /// <param name="smsFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`. </param>
        /// <param name="smsFallbackMethod"> The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="smsStatusCallback"> Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility. </param>
        /// <param name="messageStatusCallback"> The URL we should call using a POST method to send message status information to your application. </param>
        /// <param name="publicApplicationConnectEnabled"> Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: `true` or `false`. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Application </returns>
        public static async System.Threading.Tasks.Task<ApplicationResource> UpdateAsync(
                                                                              string pathSid,
                                                                              string pathAccountSid = null,
                                                                              string friendlyName = null,
                                                                              string apiVersion = null,
                                                                              Uri voiceUrl = null,
                                                                              Twilio.Http.HttpMethod voiceMethod = null,
                                                                              Uri voiceFallbackUrl = null,
                                                                              Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                                                              Uri statusCallback = null,
                                                                              Twilio.Http.HttpMethod statusCallbackMethod = null,
                                                                              bool? voiceCallerIdLookup = null,
                                                                              Uri smsUrl = null,
                                                                              Twilio.Http.HttpMethod smsMethod = null,
                                                                              Uri smsFallbackUrl = null,
                                                                              Twilio.Http.HttpMethod smsFallbackMethod = null,
                                                                              Uri smsStatusCallback = null,
                                                                              Uri messageStatusCallback = null,
                                                                              bool? publicApplicationConnectEnabled = null,
                                                                                ITwilioRestClient client = null,
                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateApplicationOptions(pathSid){ PathAccountSid = pathAccountSid, FriendlyName = friendlyName, ApiVersion = apiVersion, VoiceUrl = voiceUrl, VoiceMethod = voiceMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceFallbackMethod = voiceFallbackMethod, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, VoiceCallerIdLookup = voiceCallerIdLookup, SmsUrl = smsUrl, SmsMethod = smsMethod, SmsFallbackUrl = smsFallbackUrl, SmsFallbackMethod = smsFallbackMethod, SmsStatusCallback = smsStatusCallback, MessageStatusCallback = messageStatusCallback, PublicApplicationConnectEnabled = publicApplicationConnectEnabled };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ApplicationResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ApplicationResource object represented by the provided JSON </returns>
        public static ApplicationResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ApplicationResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The API version used to start a new TwiML session. </summary> 
        [JsonProperty("api_version")]
        public string ApiVersion { get; private set; }

        ///<summary> The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The string that you assigned to describe the resource. </summary> 
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }

        ///<summary> The URL we call using a POST method to send message status information to your application. </summary> 
        [JsonProperty("message_status_callback")]
        public Uri MessageStatusCallback { get; private set; }

        ///<summary> The unique string that that we created to identify the Application resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The HTTP method we use to call `sms_fallback_url`. Can be: `GET` or `POST`. </summary> 
        [JsonProperty("sms_fallback_method")]
        public Twilio.Http.HttpMethod SmsFallbackMethod { get; private set; }

        ///<summary> The URL that we call when an error occurs while retrieving or executing the TwiML from `sms_url`. </summary> 
        [JsonProperty("sms_fallback_url")]
        public Uri SmsFallbackUrl { get; private set; }

        ///<summary> The HTTP method we use to call `sms_url`. Can be: `GET` or `POST`. </summary> 
        [JsonProperty("sms_method")]
        public Twilio.Http.HttpMethod SmsMethod { get; private set; }

        ///<summary> The URL we call using a POST method to send status information to your application about SMS messages that refer to the application. </summary> 
        [JsonProperty("sms_status_callback")]
        public Uri SmsStatusCallback { get; private set; }

        ///<summary> The URL we call when the phone number receives an incoming SMS message. </summary> 
        [JsonProperty("sms_url")]
        public Uri SmsUrl { get; private set; }

        ///<summary> The URL we call using the `status_callback_method` to send status information to your application. </summary> 
        [JsonProperty("status_callback")]
        public Uri StatusCallback { get; private set; }

        ///<summary> The HTTP method we use to call `status_callback`. Can be: `GET` or `POST`. </summary> 
        [JsonProperty("status_callback_method")]
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; private set; }

        ///<summary> The URI of the resource, relative to `https://api.twilio.com`. </summary> 
        [JsonProperty("uri")]
        public string Uri { get; private set; }

        ///<summary> Whether we look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`. </summary> 
        [JsonProperty("voice_caller_id_lookup")]
        public bool? VoiceCallerIdLookup { get; private set; }

        ///<summary> The HTTP method we use to call `voice_fallback_url`. Can be: `GET` or `POST`. </summary> 
        [JsonProperty("voice_fallback_method")]
        public Twilio.Http.HttpMethod VoiceFallbackMethod { get; private set; }

        ///<summary> The URL that we call when an error occurs retrieving or executing the TwiML requested by `url`. </summary> 
        [JsonProperty("voice_fallback_url")]
        public Uri VoiceFallbackUrl { get; private set; }

        ///<summary> The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`. </summary> 
        [JsonProperty("voice_method")]
        public Twilio.Http.HttpMethod VoiceMethod { get; private set; }

        ///<summary> The URL we call when the phone number assigned to this application receives a call. </summary> 
        [JsonProperty("voice_url")]
        public Uri VoiceUrl { get; private set; }

        ///<summary> Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: `true` or `false`. </summary> 
        [JsonProperty("public_application_connect_enabled")]
        public bool? PublicApplicationConnectEnabled { get; private set; }



        private ApplicationResource() {

        }
    }
}

