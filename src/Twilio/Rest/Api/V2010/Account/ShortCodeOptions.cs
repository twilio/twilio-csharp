/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Api.V2010.Account
{
    /// <summary> Fetch an instance of a short code </summary>
    public class FetchShortCodeOptions : IOptions<ShortCodeResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the ShortCode resource to fetch </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to fetch. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new FetchShortCodeOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the ShortCode resource to fetch </param>
        public FetchShortCodeOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a list of short-codes belonging to the account used to make the request </summary>
    public class ReadShortCodeOptions : ReadOptions<ShortCodeResource>
    {
    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to read. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> The string that identifies the ShortCode resources to read. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> Only show the ShortCode resources that match this pattern. You can specify partial numbers and use '*' as a wildcard for any digit. </summary> 
        public string ShortCode { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (ShortCode != null)
            {
                p.Add(new KeyValuePair<string, string>("ShortCode", ShortCode));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> Update a short code with the following parameters </summary>
    public class UpdateShortCodeOptions : IOptions<ShortCodeResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the ShortCode resource to update </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to update. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> A descriptive string that you created to describe this resource. It can be up to 64 characters long. By default, the `FriendlyName` is the short code. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. </summary> 
        public string ApiVersion { get; set; }

        ///<summary> The URL we should call when receiving an incoming SMS message to this short code. </summary> 
        public Uri SmsUrl { get; set; }

        ///<summary> The HTTP method we should use when calling the `sms_url`. Can be: `GET` or `POST`. </summary> 
        public Twilio.Http.HttpMethod SmsMethod { get; set; }

        ///<summary> The URL that we should call if an error occurs while retrieving or executing the TwiML from `sms_url`. </summary> 
        public Uri SmsFallbackUrl { get; set; }

        ///<summary> The HTTP method that we should use to call the `sms_fallback_url`. Can be: `GET` or `POST`. </summary> 
        public Twilio.Http.HttpMethod SmsFallbackMethod { get; set; }



        /// <summary> Construct a new UpdateShortCodeOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the ShortCode resource to update </param>
        public UpdateShortCodeOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (ApiVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("ApiVersion", ApiVersion));
            }
            if (SmsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsUrl", Serializers.Url(SmsUrl)));
            }
            if (SmsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsMethod", SmsMethod.ToString()));
            }
            if (SmsFallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsFallbackUrl", Serializers.Url(SmsFallbackUrl)));
            }
            if (SmsFallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsFallbackMethod", SmsFallbackMethod.ToString()));
            }
            return p;
        }

        

    }


}

