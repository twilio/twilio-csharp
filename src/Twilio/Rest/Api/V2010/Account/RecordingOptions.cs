/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Api.V2010.Account
{
    /// <summary> Delete a recording from your account </summary>
    public class DeleteRecordingOptions : IOptions<RecordingResource>
    {
        
        ///<summary> The Twilio-provided string that uniquely identifies the Recording resource to delete. </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new DeleteRecordingOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Recording resource to delete. </param>
        public DeleteRecordingOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Fetch an instance of a recording </summary>
    public class FetchRecordingOptions : IOptions<RecordingResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the Recording resource to fetch. </summary> 
        public string PathSid { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days. </summary> 
        public bool? IncludeSoftDeleted { get; set; }



        /// <summary> Construct a new FetchRecordingOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Recording resource to fetch. </param>
        public FetchRecordingOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (IncludeSoftDeleted != null)
            {
                p.Add(new KeyValuePair<string, string>("IncludeSoftDeleted", IncludeSoftDeleted.Value.ToString().ToLower()));
            }
            return p;
        }

    

    }


    /// <summary> Retrieve a list of recordings belonging to the account used to make the request </summary>
    public class ReadRecordingOptions : ReadOptions<RecordingResource>
    {
    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read. </summary> 
        public string PathAccountSid { get; set; }

        ///<summary> Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date. </summary> 
        public DateTime? DateCreated { get; set; }

        ///<summary> Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date. </summary> 
        public DateTime? DateCreatedBefore { get; set; }

        ///<summary> Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date. </summary> 
        public DateTime? DateCreatedAfter { get; set; }

        ///<summary> The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read. </summary> 
        public string CallSid { get; set; }

        ///<summary> The Conference SID that identifies the conference associated with the recording to read. </summary> 
        public string ConferenceSid { get; set; }

        ///<summary> A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days. </summary> 
        public bool? IncludeSoftDeleted { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (DateCreated != null)
            {
                p.Add(new KeyValuePair<string, string>("DateCreated", Serializers.DateTimeIso8601(DateCreated)));
            }
            else
            {
                if (DateCreatedBefore != null)
                {
                    p.Add(new KeyValuePair<string, string>("DateCreated<", Serializers.DateTimeIso8601(DateCreatedBefore)));
                }
                if (DateCreatedAfter != null)
                {
                    p.Add(new KeyValuePair<string, string>("DateCreated>", Serializers.DateTimeIso8601(DateCreatedAfter)));
                }
            }
            if (CallSid != null)
            {
                p.Add(new KeyValuePair<string, string>("CallSid", CallSid));
            }
            if (ConferenceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ConferenceSid", ConferenceSid));
            }
            if (IncludeSoftDeleted != null)
            {
                p.Add(new KeyValuePair<string, string>("IncludeSoftDeleted", IncludeSoftDeleted.Value.ToString().ToLower()));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

}

