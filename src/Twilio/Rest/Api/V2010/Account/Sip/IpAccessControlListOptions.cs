/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Api.V2010.Account.Sip
{

    /// <summary> Create a new IpAccessControlList resource </summary>
    public class CreateIpAccessControlListOptions : IOptions<IpAccessControlListResource>
    {
        
        ///<summary> A human readable descriptive text that describes the IpAccessControlList, up to 255 characters long. </summary> 
        public string FriendlyName { get; }

        ///<summary> The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. </summary> 
        public string PathAccountSid { get; set; }


        /// <summary> Construct a new CreateSipIpAccessControlListOptions </summary>
        /// <param name="friendlyName"> A human readable descriptive text that describes the IpAccessControlList, up to 255 characters long. </param>
        public CreateIpAccessControlListOptions(string friendlyName)
        {
            FriendlyName = friendlyName;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            return p;
        }

        

    }
    /// <summary> Delete an IpAccessControlList from the requested account </summary>
    public class DeleteIpAccessControlListOptions : IOptions<IpAccessControlListResource>
    {
        
        ///<summary> A 34 character string that uniquely identifies the resource to delete. </summary> 
        public string PathSid { get; }

        ///<summary> The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new DeleteSipIpAccessControlListOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies the resource to delete. </param>
        public DeleteIpAccessControlListOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Fetch a specific instance of an IpAccessControlList </summary>
    public class FetchIpAccessControlListOptions : IOptions<IpAccessControlListResource>
    {
    
        ///<summary> A 34 character string that uniquely identifies the resource to fetch. </summary> 
        public string PathSid { get; }

        ///<summary> The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new FetchSipIpAccessControlListOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies the resource to fetch. </param>
        public FetchIpAccessControlListOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a list of IpAccessControlLists that belong to the account used to make the request </summary>
    public class ReadIpAccessControlListOptions : ReadOptions<IpAccessControlListResource>
    {
    
        ///<summary> The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. </summary> 
        public string PathAccountSid { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> Rename an IpAccessControlList </summary>
    public class UpdateIpAccessControlListOptions : IOptions<IpAccessControlListResource>
    {
    
        ///<summary> A 34 character string that uniquely identifies the resource to udpate. </summary> 
        public string PathSid { get; }

        ///<summary> A human readable descriptive text, up to 255 characters long. </summary> 
        public string FriendlyName { get; }

        ///<summary> The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. </summary> 
        public string PathAccountSid { get; set; }



        /// <summary> Construct a new UpdateSipIpAccessControlListOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies the resource to udpate. </param>
        /// <param name="friendlyName"> A human readable descriptive text, up to 255 characters long. </param>
        public UpdateIpAccessControlListOptions(string pathSid, string friendlyName)
        {
            PathSid = pathSid;
            FriendlyName = friendlyName;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            return p;
        }

        

    }


}

