/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Api.V2010.Account.Sip
{
    public class DomainResource : Resource
    {
    

    

        
        private static Request BuildCreateRequest(CreateDomainOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Api,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Create a new Domain </summary>
        /// <param name="options"> Create Domain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Domain </returns>
        public static DomainResource Create(CreateDomainOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a new Domain </summary>
        /// <param name="options"> Create Domain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Domain </returns>
        public static async System.Threading.Tasks.Task<DomainResource> CreateAsync(CreateDomainOptions options, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a new Domain </summary>
        /// <param name="domainName"> The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. </param>
        /// <param name="friendlyName"> A descriptive string that you created to describe the resource. It can be up to 64 characters long. </param>
        /// <param name="voiceUrl"> The URL we should when the domain receives a call. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceStatusCallbackUrl"> The URL that we should call to pass status parameters (such as call ended) to your application. </param>
        /// <param name="voiceStatusCallbackMethod"> The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="sipRegistration"> Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not. </param>
        /// <param name="emergencyCallingEnabled"> Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. </param>
        /// <param name="secure"> Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. </param>
        /// <param name="byocTrunkSid"> The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. </param>
        /// <param name="emergencyCallerSid"> Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Domain </returns>
        public static DomainResource Create(
                                          string domainName,
                                          string pathAccountSid = null,
                                          string friendlyName = null,
                                          Uri voiceUrl = null,
                                          Twilio.Http.HttpMethod voiceMethod = null,
                                          Uri voiceFallbackUrl = null,
                                          Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                          Uri voiceStatusCallbackUrl = null,
                                          Twilio.Http.HttpMethod voiceStatusCallbackMethod = null,
                                          bool? sipRegistration = null,
                                          bool? emergencyCallingEnabled = null,
                                          bool? secure = null,
                                          string byocTrunkSid = null,
                                          string emergencyCallerSid = null,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateDomainOptions(domainName){  PathAccountSid = pathAccountSid, FriendlyName = friendlyName, VoiceUrl = voiceUrl, VoiceMethod = voiceMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceFallbackMethod = voiceFallbackMethod, VoiceStatusCallbackUrl = voiceStatusCallbackUrl, VoiceStatusCallbackMethod = voiceStatusCallbackMethod, SipRegistration = sipRegistration, EmergencyCallingEnabled = emergencyCallingEnabled, Secure = secure, ByocTrunkSid = byocTrunkSid, EmergencyCallerSid = emergencyCallerSid };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a new Domain </summary>
        /// <param name="domainName"> The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. </param>
        /// <param name="friendlyName"> A descriptive string that you created to describe the resource. It can be up to 64 characters long. </param>
        /// <param name="voiceUrl"> The URL we should when the domain receives a call. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceStatusCallbackUrl"> The URL that we should call to pass status parameters (such as call ended) to your application. </param>
        /// <param name="voiceStatusCallbackMethod"> The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="sipRegistration"> Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not. </param>
        /// <param name="emergencyCallingEnabled"> Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. </param>
        /// <param name="secure"> Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. </param>
        /// <param name="byocTrunkSid"> The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. </param>
        /// <param name="emergencyCallerSid"> Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Domain </returns>
        public static async System.Threading.Tasks.Task<DomainResource> CreateAsync(
                                                                                  string domainName,
                                                                                  string pathAccountSid = null,
                                                                                  string friendlyName = null,
                                                                                  Uri voiceUrl = null,
                                                                                  Twilio.Http.HttpMethod voiceMethod = null,
                                                                                  Uri voiceFallbackUrl = null,
                                                                                  Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                                                                  Uri voiceStatusCallbackUrl = null,
                                                                                  Twilio.Http.HttpMethod voiceStatusCallbackMethod = null,
                                                                                  bool? sipRegistration = null,
                                                                                  bool? emergencyCallingEnabled = null,
                                                                                  bool? secure = null,
                                                                                  string byocTrunkSid = null,
                                                                                  string emergencyCallerSid = null,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateDomainOptions(domainName){  PathAccountSid = pathAccountSid, FriendlyName = friendlyName, VoiceUrl = voiceUrl, VoiceMethod = voiceMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceFallbackMethod = voiceFallbackMethod, VoiceStatusCallbackUrl = voiceStatusCallbackUrl, VoiceStatusCallbackMethod = voiceStatusCallbackMethod, SipRegistration = sipRegistration, EmergencyCallingEnabled = emergencyCallingEnabled, Secure = secure, ByocTrunkSid = byocTrunkSid, EmergencyCallerSid = emergencyCallerSid };
            return await CreateAsync(options, client);
        }
        #endif
        
        /// <summary> Delete an instance of a Domain </summary>
        /// <param name="options"> Delete Domain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Domain </returns>
        private static Request BuildDeleteRequest(DeleteDomainOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Delete an instance of a Domain </summary>
        /// <param name="options"> Delete Domain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Domain </returns>
        public static bool Delete(DeleteDomainOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> Delete an instance of a Domain </summary>
        /// <param name="options"> Delete Domain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Domain </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteDomainOptions options,
                                                                        ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> Delete an instance of a Domain </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the SipDomain resource to delete. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Domain </returns>
        public static bool Delete(string pathSid, string pathAccountSid = null, ITwilioRestClient client = null)
        {
            var options = new DeleteDomainOptions(pathSid)      { PathAccountSid = pathAccountSid }   ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> Delete an instance of a Domain </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the SipDomain resource to delete. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Domain </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, string pathAccountSid = null, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteDomainOptions(pathSid)  { PathAccountSid = pathAccountSid };
            return await DeleteAsync(options, client);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchDomainOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch an instance of a Domain </summary>
        /// <param name="options"> Fetch Domain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Domain </returns>
        public static DomainResource Fetch(FetchDomainOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Fetch an instance of a Domain </summary>
        /// <param name="options"> Fetch Domain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Domain </returns>
        public static async System.Threading.Tasks.Task<DomainResource> FetchAsync(FetchDomainOptions options, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Fetch an instance of a Domain </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the SipDomain resource to fetch. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Domain </returns>
        public static DomainResource Fetch(
                                         string pathSid, 
                                         string pathAccountSid = null, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchDomainOptions(pathSid){ PathAccountSid = pathAccountSid };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Fetch an instance of a Domain </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the SipDomain resource to fetch. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Domain </returns>
        public static async System.Threading.Tasks.Task<DomainResource> FetchAsync(string pathSid, string pathAccountSid = null, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchDomainOptions(pathSid){ PathAccountSid = pathAccountSid };
            return await FetchAsync(options, client);
        }
        #endif
        
        private static Request BuildReadRequest(ReadDomainOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> Retrieve a list of domains belonging to the account used to make the request </summary>
        /// <param name="options"> Read Domain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Domain </returns>
        public static ResourceSet<DomainResource> Read(ReadDomainOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<DomainResource>.FromJson("domains", response.Content);
            return new ResourceSet<DomainResource>(page, options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of domains belonging to the account used to make the request </summary>
        /// <param name="options"> Read Domain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Domain </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<DomainResource>> ReadAsync(ReadDomainOptions options, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<DomainResource>.FromJson("domains", response.Content);
            return new ResourceSet<DomainResource>(page, options, client);
        }
        #endif
        /// <summary> Retrieve a list of domains belonging to the account used to make the request </summary>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Domain </returns>
        public static ResourceSet<DomainResource> Read(
                                                     string pathAccountSid = null,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadDomainOptions(){ PathAccountSid = pathAccountSid, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of domains belonging to the account used to make the request </summary>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Domain </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<DomainResource>> ReadAsync(
                                                                                             string pathAccountSid = null,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadDomainOptions(){ PathAccountSid = pathAccountSid, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<DomainResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<DomainResource>.FromJson("domains", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<DomainResource> NextPage(Page<DomainResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<DomainResource>.FromJson("domains", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<DomainResource> PreviousPage(Page<DomainResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<DomainResource>.FromJson("domains", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateDomainOptions options, ITwilioRestClient client)
        {
            
            string path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{"+"AccountSid"+"}", PathAccountSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Api,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Update the attributes of a domain </summary>
        /// <param name="options"> Update Domain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Domain </returns>
        public static DomainResource Update(UpdateDomainOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update the attributes of a domain </summary>
        /// <param name="options"> Update Domain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Domain </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<DomainResource> UpdateAsync(UpdateDomainOptions options,
                                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Update the attributes of a domain </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the SipDomain resource to update. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update. </param>
        /// <param name="friendlyName"> A descriptive string that you created to describe the resource. It can be up to 64 characters long. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url` </param>
        /// <param name="voiceStatusCallbackMethod"> The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceStatusCallbackUrl"> The URL that we should call to pass status parameters (such as call ended) to your application. </param>
        /// <param name="voiceUrl"> The URL we should call when the domain receives a call. </param>
        /// <param name="sipRegistration"> Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not. </param>
        /// <param name="domainName"> The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`. </param>
        /// <param name="emergencyCallingEnabled"> Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. </param>
        /// <param name="secure"> Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. </param>
        /// <param name="byocTrunkSid"> The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. </param>
        /// <param name="emergencyCallerSid"> Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Domain </returns>
        public static DomainResource Update(
                                          string pathSid,
                                          string pathAccountSid = null,
                                          string friendlyName = null,
                                          Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                          Uri voiceFallbackUrl = null,
                                          Twilio.Http.HttpMethod voiceMethod = null,
                                          Twilio.Http.HttpMethod voiceStatusCallbackMethod = null,
                                          Uri voiceStatusCallbackUrl = null,
                                          Uri voiceUrl = null,
                                          bool? sipRegistration = null,
                                          string domainName = null,
                                          bool? emergencyCallingEnabled = null,
                                          bool? secure = null,
                                          string byocTrunkSid = null,
                                          string emergencyCallerSid = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateDomainOptions(pathSid){ PathAccountSid = pathAccountSid, FriendlyName = friendlyName, VoiceFallbackMethod = voiceFallbackMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceMethod = voiceMethod, VoiceStatusCallbackMethod = voiceStatusCallbackMethod, VoiceStatusCallbackUrl = voiceStatusCallbackUrl, VoiceUrl = voiceUrl, SipRegistration = sipRegistration, DomainName = domainName, EmergencyCallingEnabled = emergencyCallingEnabled, Secure = secure, ByocTrunkSid = byocTrunkSid, EmergencyCallerSid = emergencyCallerSid };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Update the attributes of a domain </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the SipDomain resource to update. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update. </param>
        /// <param name="friendlyName"> A descriptive string that you created to describe the resource. It can be up to 64 characters long. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url` </param>
        /// <param name="voiceStatusCallbackMethod"> The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceStatusCallbackUrl"> The URL that we should call to pass status parameters (such as call ended) to your application. </param>
        /// <param name="voiceUrl"> The URL we should call when the domain receives a call. </param>
        /// <param name="sipRegistration"> Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not. </param>
        /// <param name="domainName"> The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`. </param>
        /// <param name="emergencyCallingEnabled"> Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. </param>
        /// <param name="secure"> Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. </param>
        /// <param name="byocTrunkSid"> The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. </param>
        /// <param name="emergencyCallerSid"> Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Domain </returns>
        public static async System.Threading.Tasks.Task<DomainResource> UpdateAsync(
                                                                              string pathSid,
                                                                              string pathAccountSid = null,
                                                                              string friendlyName = null,
                                                                              Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                                                              Uri voiceFallbackUrl = null,
                                                                              Twilio.Http.HttpMethod voiceMethod = null,
                                                                              Twilio.Http.HttpMethod voiceStatusCallbackMethod = null,
                                                                              Uri voiceStatusCallbackUrl = null,
                                                                              Uri voiceUrl = null,
                                                                              bool? sipRegistration = null,
                                                                              string domainName = null,
                                                                              bool? emergencyCallingEnabled = null,
                                                                              bool? secure = null,
                                                                              string byocTrunkSid = null,
                                                                              string emergencyCallerSid = null,
                                                                                ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateDomainOptions(pathSid){ PathAccountSid = pathAccountSid, FriendlyName = friendlyName, VoiceFallbackMethod = voiceFallbackMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceMethod = voiceMethod, VoiceStatusCallbackMethod = voiceStatusCallbackMethod, VoiceStatusCallbackUrl = voiceStatusCallbackUrl, VoiceUrl = voiceUrl, SipRegistration = sipRegistration, DomainName = domainName, EmergencyCallingEnabled = emergencyCallingEnabled, Secure = secure, ByocTrunkSid = byocTrunkSid, EmergencyCallerSid = emergencyCallerSid };
            return await UpdateAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a DomainResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> DomainResource object represented by the provided JSON </returns>
        public static DomainResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<DomainResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The API version used to process the call. </summary> 
        [JsonProperty("api_version")]
        public string ApiVersion { get; private set; }

        ///<summary> The types of authentication you have mapped to your domain. Can be: `IP_ACL` and `CREDENTIAL_LIST`. If you have both defined for your domain, both will be returned in a comma delimited string. If `auth_type` is not defined, the domain will not be able to receive any traffic. </summary> 
        [JsonProperty("auth_type")]
        public string AuthType { get; private set; }

        ///<summary> The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \"-\" and must end with `sip.twilio.com`. </summary> 
        [JsonProperty("domain_name")]
        public string DomainName { get; private set; }

        ///<summary> The string that you assigned to describe the resource. </summary> 
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }

        ///<summary> The unique string that that we created to identify the SipDomain resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The URI of the resource, relative to `https://api.twilio.com`. </summary> 
        [JsonProperty("uri")]
        public string Uri { get; private set; }

        ///<summary> The HTTP method we use to call `voice_fallback_url`. Can be: `GET` or `POST`. </summary> 
        [JsonProperty("voice_fallback_method")]
        public Twilio.Http.HttpMethod VoiceFallbackMethod { get; private set; }

        ///<summary> The URL that we call when an error occurs while retrieving or executing the TwiML requested from `voice_url`. </summary> 
        [JsonProperty("voice_fallback_url")]
        public Uri VoiceFallbackUrl { get; private set; }

        ///<summary> The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`. </summary> 
        [JsonProperty("voice_method")]
        public Twilio.Http.HttpMethod VoiceMethod { get; private set; }

        ///<summary> The HTTP method we use to call `voice_status_callback_url`. Either `GET` or `POST`. </summary> 
        [JsonProperty("voice_status_callback_method")]
        public Twilio.Http.HttpMethod VoiceStatusCallbackMethod { get; private set; }

        ///<summary> The URL that we call to pass status parameters (such as call ended) to your application. </summary> 
        [JsonProperty("voice_status_callback_url")]
        public Uri VoiceStatusCallbackUrl { get; private set; }

        ///<summary> The URL we call using the `voice_method` when the domain receives a call. </summary> 
        [JsonProperty("voice_url")]
        public Uri VoiceUrl { get; private set; }

        ///<summary> A list of mapping resources associated with the SIP Domain resource identified by their relative URIs. </summary> 
        [JsonProperty("subresource_uris")]
        public Dictionary<string, string> SubresourceUris { get; private set; }

        ///<summary> Whether to allow SIP Endpoints to register with the domain to receive calls. </summary> 
        [JsonProperty("sip_registration")]
        public bool? SipRegistration { get; private set; }

        ///<summary> Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. </summary> 
        [JsonProperty("emergency_calling_enabled")]
        public bool? EmergencyCallingEnabled { get; private set; }

        ///<summary> Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. </summary> 
        [JsonProperty("secure")]
        public bool? Secure { get; private set; }

        ///<summary> The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. </summary> 
        [JsonProperty("byoc_trunk_sid")]
        public string ByocTrunkSid { get; private set; }

        ///<summary> Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. </summary> 
        [JsonProperty("emergency_caller_sid")]
        public string EmergencyCallerSid { get; private set; }



        private DomainResource() {

        }
    }
}

