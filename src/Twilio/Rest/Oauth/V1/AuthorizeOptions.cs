/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Oauth.V1
{
    /// <summary> Retrieves authorize uri </summary>
    public class FetchAuthorizeOptions : IOptions<AuthorizeResource>
    {
    
        ///<summary> Response Type </summary> 
        public string ResponseType { get; set; }

        ///<summary> The Client Identifier </summary> 
        public string ClientId { get; set; }

        ///<summary> The url to which response will be redirected to </summary> 
        public string RedirectUri { get; set; }

        ///<summary> The scope of the access request </summary> 
        public string Scope { get; set; }

        ///<summary> An opaque value which can be used to maintain state between the request and callback </summary> 
        public string State { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (ResponseType != null)
            {
                p.Add(new KeyValuePair<string, string>("ResponseType", ResponseType));
            }
            if (ClientId != null)
            {
                p.Add(new KeyValuePair<string, string>("ClientId", ClientId));
            }
            if (RedirectUri != null)
            {
                p.Add(new KeyValuePair<string, string>("RedirectUri", RedirectUri));
            }
            if (Scope != null)
            {
                p.Add(new KeyValuePair<string, string>("Scope", Scope));
            }
            if (State != null)
            {
                p.Add(new KeyValuePair<string, string>("State", State));
            }
            return p;
        }

    

    }


}

