/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Oauth.V1
{

    /// <summary> Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant </summary>
    public class CreateTokenOptions : IOptions<TokenResource>
    {
        
        ///<summary> Grant type is a credential representing resource owner's authorization which can be used by client to obtain access token. </summary> 
        public string GrantType { get; }

        ///<summary> A 34 character string that uniquely identifies this OAuth App. </summary> 
        public string ClientId { get; }

        ///<summary> The credential for confidential OAuth App. </summary> 
        public string ClientSecret { get; set; }

        ///<summary> JWT token related to the authorization code grant type. </summary> 
        public string Code { get; set; }

        ///<summary> The redirect uri </summary> 
        public string RedirectUri { get; set; }

        ///<summary> The targeted audience uri </summary> 
        public string Audience { get; set; }

        ///<summary> JWT token related to refresh access token. </summary> 
        public string RefreshToken { get; set; }

        ///<summary> The scope of token </summary> 
        public string Scope { get; set; }


        /// <summary> Construct a new CreateTokenOptions </summary>
        /// <param name="grantType"> Grant type is a credential representing resource owner's authorization which can be used by client to obtain access token. </param>
        /// <param name="clientId"> A 34 character string that uniquely identifies this OAuth App. </param>
        public CreateTokenOptions(string grantType, string clientId)
        {
            GrantType = grantType;
            ClientId = clientId;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (GrantType != null)
            {
                p.Add(new KeyValuePair<string, string>("GrantType", GrantType));
            }
            if (ClientId != null)
            {
                p.Add(new KeyValuePair<string, string>("ClientId", ClientId));
            }
            if (ClientSecret != null)
            {
                p.Add(new KeyValuePair<string, string>("ClientSecret", ClientSecret));
            }
            if (Code != null)
            {
                p.Add(new KeyValuePair<string, string>("Code", Code));
            }
            if (RedirectUri != null)
            {
                p.Add(new KeyValuePair<string, string>("RedirectUri", RedirectUri));
            }
            if (Audience != null)
            {
                p.Add(new KeyValuePair<string, string>("Audience", Audience));
            }
            if (RefreshToken != null)
            {
                p.Add(new KeyValuePair<string, string>("RefreshToken", RefreshToken));
            }
            if (Scope != null)
            {
                p.Add(new KeyValuePair<string, string>("Scope", Scope));
            }
            return p;
        }

        

    }
}

