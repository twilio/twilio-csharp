/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;
using Twilio.Base.BearerToken;
using Twilio.Clients.BearerToken;
using Twilio.Http.BearerToken;



namespace Twilio.Rest.PreviewIam.Organizations
{
    public class UserResource : Resource
    {
    
        public class ScimName
        {
            [JsonProperty("givenName")]
            private string GivenName {get; set;}
            [JsonProperty("familyName")]
            private string FamilyName {get; set;}
            public ScimName() { }
            public class Builder
            {
                private ScimName _scimName = new ScimName();
                public Builder()
                {
                }
                public Builder WithGivenName(string givenName)
                {
                    _scimName.GivenName= givenName;
                    return this;
                }
                public Builder WithFamilyName(string familyName)
                {
                    _scimName.FamilyName= familyName;
                    return this;
                }
                public ScimName Build()
                {
                    return _scimName;
                }
            }
        }
        public class ScimEmailAddress
        {
            [JsonProperty("primary")]
            private bool? Primary {get; set;}
            [JsonProperty("value")]
            private string Value {get; set;}
            [JsonProperty("type")]
            private string Type {get; set;}
            public ScimEmailAddress() { }
            public class Builder
            {
                private ScimEmailAddress _scimEmailAddress = new ScimEmailAddress();
                public Builder()
                {
                }
                public Builder WithPrimary(bool? primary)
                {
                    _scimEmailAddress.Primary= primary;
                    return this;
                }
                public Builder WithValue(string value)
                {
                    _scimEmailAddress.Value= value;
                    return this;
                }
                public Builder WithType(string type)
                {
                    _scimEmailAddress.Type= type;
                    return this;
                }
                public ScimEmailAddress Build()
                {
                    return _scimEmailAddress;
                }
            }
        }
        public class ScimMeta
        {
            [JsonProperty("resourceType")]
            private string ResourceType {get; set;}
            [JsonProperty("created")]
            private DateTime? Created {get; set;}
            [JsonProperty("lastModified")]
            private DateTime? LastModified {get; set;}
            [JsonProperty("version")]
            private string Version {get; set;}
            public ScimMeta() { }
            public class Builder
            {
                private ScimMeta _scimMeta = new ScimMeta();
                public Builder()
                {
                }
                public Builder WithResourceType(string resourceType)
                {
                    _scimMeta.ResourceType= resourceType;
                    return this;
                }
                public Builder WithCreated(DateTime? created)
                {
                    _scimMeta.Created= created;
                    return this;
                }
                public Builder WithLastModified(DateTime? lastModified)
                {
                    _scimMeta.LastModified= lastModified;
                    return this;
                }
                public Builder WithVersion(string version)
                {
                    _scimMeta.Version= version;
                    return this;
                }
                public ScimMeta Build()
                {
                    return _scimMeta;
                }
            }
        }
        public class ScimUser
        {
            [JsonProperty("id")]
            private string Id {get; set;}
            [JsonProperty("externalId")]
            private string ExternalId {get; set;}
            [JsonProperty("userName")]
            private string UserName {get; set;}
            [JsonProperty("displayName")]
            private string DisplayName {get; set;}
            [JsonProperty("name")]
            private ScimName Name {get; set;}
            [JsonProperty("emails")]
            private List<ScimEmailAddress> Emails {get; set;}
            [JsonProperty("active")]
            private bool? Active {get; set;}
            [JsonProperty("locale")]
            private string Locale {get; set;}
            [JsonProperty("timezone")]
            private string Timezone {get; set;}
            [JsonProperty("schemas")]
            private List<string> Schemas {get; set;}
            [JsonProperty("meta")]
            private ScimMeta Meta {get; set;}
            public ScimUser() { }
            public class Builder
            {
                private ScimUser _scimUser = new ScimUser();
                public Builder()
                {
                }
                public Builder WithId(string id)
                {
                    _scimUser.Id= id;
                    return this;
                }
                public Builder WithExternalId(string externalId)
                {
                    _scimUser.ExternalId= externalId;
                    return this;
                }
                public Builder WithUserName(string userName)
                {
                    _scimUser.UserName= userName;
                    return this;
                }
                public Builder WithDisplayName(string displayName)
                {
                    _scimUser.DisplayName= displayName;
                    return this;
                }
                public Builder WithName(ScimName name)
                {
                    _scimUser.Name= name;
                    return this;
                }
                public Builder WithEmails(List<ScimEmailAddress> emails)
                {
                    _scimUser.Emails= emails;
                    return this;
                }
                public Builder WithActive(bool? active)
                {
                    _scimUser.Active= active;
                    return this;
                }
                public Builder WithLocale(string locale)
                {
                    _scimUser.Locale= locale;
                    return this;
                }
                public Builder WithTimezone(string timezone)
                {
                    _scimUser.Timezone= timezone;
                    return this;
                }
                public Builder WithSchemas(List<string> schemas)
                {
                    _scimUser.Schemas= schemas;
                    return this;
                }
                public Builder WithMeta(ScimMeta meta)
                {
                    _scimUser.Meta= meta;
                    return this;
                }
                public ScimUser Build()
                {
                    return _scimUser;
                }
            }
        }

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class ScimTypeEnum : StringEnum
        {
            private ScimTypeEnum(string value) : base(value) {}
            public ScimTypeEnum() {}
            public static implicit operator ScimTypeEnum(string value)
            {
                return new ScimTypeEnum(value);
            }
            public static readonly ScimTypeEnum Invalidfilter = new ScimTypeEnum("invalidFilter");
            public static readonly ScimTypeEnum Uniqueness = new ScimTypeEnum("uniqueness");
            public static readonly ScimTypeEnum Mutability = new ScimTypeEnum("mutability");
            public static readonly ScimTypeEnum Invalidvalue = new ScimTypeEnum("invalidValue");
            public static readonly ScimTypeEnum Invalidsyntax = new ScimTypeEnum("invalidSyntax");

        }

        
        private static BearerTokenRequest BuildCreateRequest(CreateUserOptions options, TwilioBearerTokenRestClient client)
        {
            
            string path = "/Organizations/{OrganizationSid}/scim/Users";

            string PathOrganizationSid = options.PathOrganizationSid.ToString();
            path = path.Replace("{"+"OrganizationSid"+"}", PathOrganizationSid);

            return new BearerTokenRequest(
                HttpMethod.Post,
                Rest.Domain.PreviewIam,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> create </summary>
        /// <param name="options"> Create User parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of User </returns>
        public static UserResource Create(CreateUserOptions options, TwilioBearerTokenRestClient client = null)
        {
            client = client ?? TwilioOrgsTokenAuthClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="options"> Create User parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of User </returns>
        public static async System.Threading.Tasks.Task<UserResource> CreateAsync(CreateUserOptions options, TwilioBearerTokenRestClient client = null)
        {
            client = client ?? TwilioOrgsTokenAuthClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> create </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="scimUser">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of User </returns>
        public static UserResource Create(
                                          string pathOrganizationSid,
                                          UserResource.ScimUser scimUser,
                                            TwilioBearerTokenRestClient client = null)
        {
            var options = new CreateUserOptions(pathOrganizationSid, scimUser){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="scimUser">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of User </returns>
        public static async System.Threading.Tasks.Task<UserResource> CreateAsync(
                                                                                  string pathOrganizationSid,
                                                                                  UserResource.ScimUser scimUser,
                                                                                    TwilioBearerTokenRestClient client = null)
        {
        var options = new CreateUserOptions(pathOrganizationSid, scimUser){  };
            return await CreateAsync(options, client);
        }
        #endif
        
        /// <summary> delete </summary>
        /// <param name="options"> Delete User parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of User </returns>
        private static BearerTokenRequest BuildDeleteRequest(DeleteUserOptions options, TwilioBearerTokenRestClient client)
        {
            
            string path = "/Organizations/{OrganizationSid}/scim/Users/{UserSid}";

            string PathOrganizationSid = options.PathOrganizationSid.ToString();
            path = path.Replace("{"+"OrganizationSid"+"}", PathOrganizationSid);
            string PathUserSid = options.PathUserSid.ToString();
            path = path.Replace("{"+"UserSid"+"}", PathUserSid);

            return new BearerTokenRequest(
                HttpMethod.Delete,
                Rest.Domain.PreviewIam,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> delete </summary>
        /// <param name="options"> Delete User parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of User </returns>
        public static bool Delete(DeleteUserOptions options, TwilioBearerTokenRestClient client = null)
        {
            client = client ?? TwilioOrgsTokenAuthClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> delete </summary>
        /// <param name="options"> Delete User parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of User </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteUserOptions options,
                                                                        TwilioBearerTokenRestClient client = null)
        {
            client = client ?? TwilioOrgsTokenAuthClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> delete </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="pathUserSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of User </returns>
        public static bool Delete(string pathOrganizationSid, string pathUserSid, TwilioBearerTokenRestClient client = null)
        {
            var options = new DeleteUserOptions(pathOrganizationSid, pathUserSid)        ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> delete </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="pathUserSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of User </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathOrganizationSid, string pathUserSid, TwilioBearerTokenRestClient client = null)
        {
            var options = new DeleteUserOptions(pathOrganizationSid, pathUserSid) ;
            return await DeleteAsync(options, client);
        }
        #endif
        
        private static BearerTokenRequest BuildFetchRequest(FetchUserOptions options, TwilioBearerTokenRestClient client)
        {
            
            string path = "/Organizations/{OrganizationSid}/scim/Users/{UserSid}";

            string PathOrganizationSid = options.PathOrganizationSid.ToString();
            path = path.Replace("{"+"OrganizationSid"+"}", PathOrganizationSid);
            string PathUserSid = options.PathUserSid.ToString();
            path = path.Replace("{"+"UserSid"+"}", PathUserSid);

            return new BearerTokenRequest(
                HttpMethod.Get,
                Rest.Domain.PreviewIam,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> fetch </summary>
        /// <param name="options"> Fetch User parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of User </returns>
        public static UserResource Fetch(FetchUserOptions options, TwilioBearerTokenRestClient client = null)
        {
            client = client ?? TwilioOrgsTokenAuthClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="options"> Fetch User parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of User </returns>
        public static async System.Threading.Tasks.Task<UserResource> FetchAsync(FetchUserOptions options, TwilioBearerTokenRestClient client = null)
        {
            client = client ?? TwilioOrgsTokenAuthClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> fetch </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="pathUserSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of User </returns>
        public static UserResource Fetch(
                                         string pathOrganizationSid, 
                                         string pathUserSid, 
                                        TwilioBearerTokenRestClient client = null)
        {
            var options = new FetchUserOptions(pathOrganizationSid, pathUserSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="pathUserSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of User </returns>
        public static async System.Threading.Tasks.Task<UserResource> FetchAsync(string pathOrganizationSid, string pathUserSid, TwilioBearerTokenRestClient client = null)
        {
            var options = new FetchUserOptions(pathOrganizationSid, pathUserSid){  };
            return await FetchAsync(options, client);
        }
        #endif
        
        private static BearerTokenRequest BuildReadRequest(ReadUserOptions options, TwilioBearerTokenRestClient client)
        {
            
            string path = "/Organizations/{OrganizationSid}/scim/Users";

            string PathOrganizationSid = options.PathOrganizationSid.ToString();
            path = path.Replace("{"+"OrganizationSid"+"}", PathOrganizationSid);

            return new BearerTokenRequest(
                HttpMethod.Get,
                Rest.Domain.PreviewIam,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> read </summary>
        /// <param name="options"> Read User parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of User </returns>
        public static BearerTokenResourceSet<UserResource> Read(ReadUserOptions options, TwilioBearerTokenRestClient client = null)
        {
            client = client ?? TwilioOrgsTokenAuthClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<UserResource>.FromJson("Resources", response.Content);
            return new BearerTokenResourceSet<UserResource>(page, options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="options"> Read User parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of User </returns>
        public static async System.Threading.Tasks.Task<BearerTokenResourceSet<UserResource>> ReadAsync(ReadUserOptions options, TwilioBearerTokenRestClient client = null)
        {
            client = client ?? TwilioOrgsTokenAuthClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<UserResource>.FromJson("Resources", response.Content);
            return new BearerTokenResourceSet<UserResource>(page, options, client);
        }
        #endif
        /// <summary> read </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="filter">  </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of User </returns>
        public static BearerTokenResourceSet<UserResource> Read(
                                                     string pathOrganizationSid,
                                                     string filter = null,
                                                     long? limit = null,
                                                    TwilioBearerTokenRestClient client = null)
        {
            var options = new ReadUserOptions(pathOrganizationSid){ Filter = filter, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="filter">  </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of User </returns>
        public static async System.Threading.Tasks.Task<BearerTokenResourceSet<UserResource>> ReadAsync(
                                                                                             string pathOrganizationSid,
                                                                                             string filter = null,
                                                                                             long? limit = null,
                                                                                            TwilioBearerTokenRestClient client = null)
        {
            var options = new ReadUserOptions(pathOrganizationSid){ Filter = filter, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<UserResource> GetPage(string targetUrl, TwilioBearerTokenRestClient client)
        {
            client = client ?? TwilioOrgsTokenAuthClient.GetRestClient();

            var request = new BearerTokenRequest(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<UserResource>.FromJson("Resources", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<UserResource> NextPage(Page<UserResource> page, TwilioBearerTokenRestClient client)
        {
            var request = new BearerTokenRequest(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<UserResource>.FromJson("Resources", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<UserResource> PreviousPage(Page<UserResource> page, TwilioBearerTokenRestClient client)
        {
            var request = new BearerTokenRequest(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<UserResource>.FromJson("Resources", response.Content);
        }

        
        private static BearerTokenRequest BuildUpdateRequest(UpdateUserOptions options, TwilioBearerTokenRestClient client)
        {
            
            string path = "/Organizations/{OrganizationSid}/scim/Users/{UserSid}";

            string PathOrganizationSid = options.PathOrganizationSid.ToString();
            path = path.Replace("{"+"OrganizationSid"+"}", PathOrganizationSid);
            string PathUserSid = options.PathUserSid.ToString();
            path = path.Replace("{"+"UserSid"+"}", PathUserSid);

            return new BearerTokenRequest(
                HttpMethod.Put,
                Rest.Domain.PreviewIam,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: options.GetHeaderParams()
            );
        }

        /// <summary> update </summary>
        /// <param name="options"> Update User parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of User </returns>
        public static UserResource Update(UpdateUserOptions options, TwilioBearerTokenRestClient client = null)
        {
            client = client ?? TwilioOrgsTokenAuthClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> update </summary>
        /// <param name="options"> Update User parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of User </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<UserResource> UpdateAsync(UpdateUserOptions options,
                                                                                                    TwilioBearerTokenRestClient client = null)
        {
            client = client ?? TwilioOrgsTokenAuthClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> update </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="pathUserSid">  </param>
        /// <param name="scimUser">  </param>
        /// <param name="ifMatch">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of User </returns>
        public static UserResource Update(
                                          string pathOrganizationSid,
                                          string pathUserSid,
                                          UserResource.ScimUser scimUser,
                                          string ifMatch = null,
                                            TwilioBearerTokenRestClient client = null)
        {
            var options = new UpdateUserOptions(pathOrganizationSid, pathUserSid, scimUser){ IfMatch = ifMatch };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> update </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="pathUserSid">  </param>
        /// <param name="scimUser">  </param>
        /// <param name="ifMatch">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of User </returns>
        public static async System.Threading.Tasks.Task<UserResource> UpdateAsync(
                                                                              string pathOrganizationSid,
                                                                              string pathUserSid,
                                                                              UserResource.ScimUser scimUser,
                                                                              string ifMatch = null,
                                                                                TwilioBearerTokenRestClient client = null)
        {
            var options = new UpdateUserOptions(pathOrganizationSid, pathUserSid, scimUser){ IfMatch = ifMatch };
            return await UpdateAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a UserResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> UserResource object represented by the provided JSON </returns>
        public static UserResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<UserResource>(json);
            }
            catch (JsonException e)
            {
                 throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> Unique Twilio user sid </summary> 
        [JsonProperty("id")]
        public string Id { get; private set; }

        ///<summary> External unique resource id defined by provisioning client </summary> 
        [JsonProperty("externalId")]
        public string ExternalId { get; private set; }

        ///<summary> Unique username, MUST be same as primary email address </summary> 
        [JsonProperty("userName")]
        public string UserName { get; }

        ///<summary> User friendly display name </summary> 
        [JsonProperty("displayName")]
        public string DisplayName { get; private set; }

        ///<summary> The name </summary> 
        [JsonProperty("name")]
        public ScimName Name { get; private set; }

        ///<summary> Email address list of the user. Primary email must be defined if there are more than 1 email. Primary email must match the username. </summary> 
        [JsonProperty("emails")]
        public List<ScimEmailAddress> Emails { get; private set; }

        ///<summary> Indicates whether the user is active </summary> 
        [JsonProperty("active")]
        public bool? Active { get; private set; }

        ///<summary> User's locale </summary> 
        [JsonProperty("locale")]
        public string Locale { get; private set; }

        ///<summary> User's time zone </summary> 
        [JsonProperty("timezone")]
        public string Timezone { get; private set; }

        ///<summary> An array of URIs that indicate the schemas supported for this user resource </summary> 
        [JsonProperty("schemas")]
        public List<string> Schemas { get; private set; }

        ///<summary> The meta </summary> 
        [JsonProperty("meta")]
        public ScimMeta Meta { get; private set; }

        ///<summary> Schema URIs that define the contents of the error structure </summary> 
        [JsonProperty("_schemas")]
        public List<string> _Schemas { get; private set; }

        ///<summary> A human-readable description of the error </summary> 
        [JsonProperty("detail")]
        public string Detail { get; private set; }

        ///<summary> A scimType error code as defined in RFC7644 </summary> 
        [JsonProperty("scimType")]
        public UserResource.ScimTypeEnum ScimType { get; private set; }

        ///<summary> Http status code </summary> 
        [JsonProperty("status")]
        public string Status { get; private set; }

        ///<summary> Twilio-specific error code </summary> 
        [JsonProperty("code")]
        public int? Code { get; private set; }

        ///<summary> Link to Error Code References </summary> 
        [JsonProperty("moreInfo")]
        public string MoreInfo { get; private set; }



        private UserResource() {

        }
    }
}

