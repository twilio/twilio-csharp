/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.PreviewIam.Organizations
{

    /// <summary> Create a role assignment for the given organization </summary>
    public class CreateRoleAssignmentOptions : IOptions<RoleAssignmentResource>
    {
        
        
        public string PathOrganizationSid { get; }

        
        public RoleAssignmentResource.PublicApiCreateRoleAssignmentRequest PublicApiCreateRoleAssignmentRequest { get; }


        /// <summary> Construct a new CreateRoleAssignmentOptions </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="publicApiCreateRoleAssignmentRequest">  </param>
        public CreateRoleAssignmentOptions(string pathOrganizationSid, RoleAssignmentResource.PublicApiCreateRoleAssignmentRequest publicApiCreateRoleAssignmentRequest)
        {
            PathOrganizationSid = pathOrganizationSid;
            PublicApiCreateRoleAssignmentRequest = publicApiCreateRoleAssignmentRequest;
        }

        
        /// <summary> Generate the request body </summary>
        public string GetBody()
        {
            string body = "";

            if (PublicApiCreateRoleAssignmentRequest != null)
            {
                body = RoleAssignmentResource.ToJson(PublicApiCreateRoleAssignmentRequest);
            }
            return body;
        }
        

    }
    /// <summary> Delete a role assignment for the given organization </summary>
    public class DeleteRoleAssignmentOptions : IOptions<RoleAssignmentResource>
    {
        
        
        public string PathOrganizationSid { get; }

        
        public string PathRoleAssignmentSid { get; }



        /// <summary> Construct a new DeleteRoleAssignmentOptions </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="pathRoleAssignmentSid">  </param>
        public DeleteRoleAssignmentOptions(string pathOrganizationSid, string pathRoleAssignmentSid)
        {
            PathOrganizationSid = pathOrganizationSid;
            PathRoleAssignmentSid = pathRoleAssignmentSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> List role assignments for the given organization </summary>
    public class ReadRoleAssignmentOptions : ReadOptions<RoleAssignmentResource>
    {
    
        
        public string PathOrganizationSid { get; }

        
        public string Identity { get; set; }

        
        public string Scope { get; set; }



        /// <summary> Construct a new ListRoleAssignmentsOptions </summary>
        /// <param name="pathOrganizationSid">  </param>
        public ReadRoleAssignmentOptions(string pathOrganizationSid)
        {
            PathOrganizationSid = pathOrganizationSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            if (Identity != null)
            {
                p.Add(new KeyValuePair<string, string>("Identity", Identity.ToString()));
            }
            if (Scope != null)
            {
                p.Add(new KeyValuePair<string, string>("Scope", Scope.ToString()));
            }
            return p;
        }

    

    }

}

