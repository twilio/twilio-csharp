/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.PreviewIam.Organizations
{
    public class RoleAssignmentResource : Resource
    {
    
        public class PublicApiCreateRoleAssignmentRequest
        {
            [JsonProperty("role_sid")]
            private string RoleSid {get; set;}
            [JsonProperty("scope")]
            private string Scope {get; set;}
            [JsonProperty("identity")]
            private string Identity {get; set;}
            public PublicApiCreateRoleAssignmentRequest() { }
            public class Builder
            {
                private PublicApiCreateRoleAssignmentRequest _publicApiCreateRoleAssignmentRequest = new PublicApiCreateRoleAssignmentRequest();
                public Builder()
                {
                }
                public Builder WithRoleSid(string roleSid)
                {
                    _publicApiCreateRoleAssignmentRequest.RoleSid= roleSid;
                    return this;
                }
                public Builder WithScope(string scope)
                {
                    _publicApiCreateRoleAssignmentRequest.Scope= scope;
                    return this;
                }
                public Builder WithIdentity(string identity)
                {
                    _publicApiCreateRoleAssignmentRequest.Identity= identity;
                    return this;
                }
                public PublicApiCreateRoleAssignmentRequest Build()
                {
                    return _publicApiCreateRoleAssignmentRequest;
                }
            }
        }

    

        
        private static Request BuildCreateRequest(CreateRoleAssignmentOptions options, ITwilioRestClient client)
        {
            
            string path = "/Organizations/{OrganizationSid}/RoleAssignments";

            string PathOrganizationSid = options.PathOrganizationSid.ToString();
            path = path.Replace("{"+"OrganizationSid"+"}", PathOrganizationSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.PreviewIam,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Create a role assignment for the given organization </summary>
        /// <param name="options"> Create RoleAssignment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of RoleAssignment </returns>
        public static RoleAssignmentResource Create(CreateRoleAssignmentOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a role assignment for the given organization </summary>
        /// <param name="options"> Create RoleAssignment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of RoleAssignment </returns>
        public static async System.Threading.Tasks.Task<RoleAssignmentResource> CreateAsync(CreateRoleAssignmentOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a role assignment for the given organization </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="publicApiCreateRoleAssignmentRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of RoleAssignment </returns>
        public static RoleAssignmentResource Create(
                                          string pathOrganizationSid,
                                          RoleAssignmentResource.PublicApiCreateRoleAssignmentRequest publicApiCreateRoleAssignmentRequest,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateRoleAssignmentOptions(pathOrganizationSid, publicApiCreateRoleAssignmentRequest){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a role assignment for the given organization </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="publicApiCreateRoleAssignmentRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of RoleAssignment </returns>
        public static async System.Threading.Tasks.Task<RoleAssignmentResource> CreateAsync(
                                                                                  string pathOrganizationSid,
                                                                                  RoleAssignmentResource.PublicApiCreateRoleAssignmentRequest publicApiCreateRoleAssignmentRequest,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateRoleAssignmentOptions(pathOrganizationSid, publicApiCreateRoleAssignmentRequest){  };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        /// <summary> Delete a role assignment for the given organization </summary>
        /// <param name="options"> Delete RoleAssignment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of RoleAssignment </returns>
        private static Request BuildDeleteRequest(DeleteRoleAssignmentOptions options, ITwilioRestClient client)
        {
            
            string path = "/Organizations/{OrganizationSid}/RoleAssignments/{RoleAssignmentSid}";

            string PathOrganizationSid = options.PathOrganizationSid.ToString();
            path = path.Replace("{"+"OrganizationSid"+"}", PathOrganizationSid);
            string PathRoleAssignmentSid = options.PathRoleAssignmentSid.ToString();
            path = path.Replace("{"+"RoleAssignmentSid"+"}", PathRoleAssignmentSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.PreviewIam,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Delete a role assignment for the given organization </summary>
        /// <param name="options"> Delete RoleAssignment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of RoleAssignment </returns>
        public static bool Delete(DeleteRoleAssignmentOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> Delete a role assignment for the given organization </summary>
        /// <param name="options"> Delete RoleAssignment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of RoleAssignment </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteRoleAssignmentOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> Delete a role assignment for the given organization </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="pathRoleAssignmentSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of RoleAssignment </returns>
        public static bool Delete(string pathOrganizationSid, string pathRoleAssignmentSid, ITwilioRestClient client = null)
        {
            var options = new DeleteRoleAssignmentOptions(pathOrganizationSid, pathRoleAssignmentSid)        ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> Delete a role assignment for the given organization </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="pathRoleAssignmentSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of RoleAssignment </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathOrganizationSid, string pathRoleAssignmentSid, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteRoleAssignmentOptions(pathOrganizationSid, pathRoleAssignmentSid) ;
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadRoleAssignmentOptions options, ITwilioRestClient client)
        {
            
            string path = "/Organizations/{OrganizationSid}/RoleAssignments";

            string PathOrganizationSid = options.PathOrganizationSid.ToString();
            path = path.Replace("{"+"OrganizationSid"+"}", PathOrganizationSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.PreviewIam,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> List role assignments for the given organization </summary>
        /// <param name="options"> Read RoleAssignment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of RoleAssignment </returns>
        public static ResourceSet<RoleAssignmentResource> Read(ReadRoleAssignmentOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<RoleAssignmentResource>.FromJson("content", response.Content);
            return new ResourceSet<RoleAssignmentResource>(page, options, client);
        }

        #if !NET35
        /// <summary> List role assignments for the given organization </summary>
        /// <param name="options"> Read RoleAssignment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of RoleAssignment </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<RoleAssignmentResource>> ReadAsync(ReadRoleAssignmentOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<RoleAssignmentResource>.FromJson("content", response.Content);
            return new ResourceSet<RoleAssignmentResource>(page, options, client);
        }
        #endif
        /// <summary> List role assignments for the given organization </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="pageSize">  </param>
        /// <param name="identity">  </param>
        /// <param name="scope">  </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of RoleAssignment </returns>
        public static ResourceSet<RoleAssignmentResource> Read(
                                                     string pathOrganizationSid,
                                                     int? pageSize = null,
                                                     string identity = null,
                                                     string scope = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadRoleAssignmentOptions(pathOrganizationSid){ PageSize = pageSize, Identity = identity, Scope = scope, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> List role assignments for the given organization </summary>
        /// <param name="pathOrganizationSid">  </param>
        /// <param name="pageSize">  </param>
        /// <param name="identity">  </param>
        /// <param name="scope">  </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of RoleAssignment </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<RoleAssignmentResource>> ReadAsync(
                                                                                             string pathOrganizationSid,
                                                                                             int? pageSize = null,
                                                                                             string identity = null,
                                                                                             string scope = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadRoleAssignmentOptions(pathOrganizationSid){ PageSize = pageSize, Identity = identity, Scope = scope, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<RoleAssignmentResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<RoleAssignmentResource>.FromJson("content", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<RoleAssignmentResource> NextPage(Page<RoleAssignmentResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<RoleAssignmentResource>.FromJson("content", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<RoleAssignmentResource> PreviousPage(Page<RoleAssignmentResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<RoleAssignmentResource>.FromJson("content", response.Content);
        }

    
        /// <summary>
        /// Converts a JSON string into a RoleAssignmentResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> RoleAssignmentResource object represented by the provided JSON </returns>
        public static RoleAssignmentResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<RoleAssignmentResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> Twilio Role Assignment Sid representing this role assignment </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> Twilio Role Sid representing assigned role </summary> 
        [JsonProperty("role_sid")]
        public string RoleSid { get; private set; }

        ///<summary> Twilio Sid representing identity of this assignment </summary> 
        [JsonProperty("scope")]
        public string Scope { get; private set; }

        ///<summary> Twilio Sid representing scope of this assignment </summary> 
        [JsonProperty("identity")]
        public string Identity { get; private set; }



        private RoleAssignmentResource() {

        }
    }
}

