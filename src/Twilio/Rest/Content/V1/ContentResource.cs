/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Content.V1
{
    public class ContentResource : Resource
    {
    
        public class TwilioText
        {
            [JsonProperty("body")]
            private string Body {get; set;}
            public TwilioText() { }
            public class Builder
            {
                private TwilioText _twilioText = new TwilioText();
                public Builder()
                {
                }
                public Builder WithBody(string body)
                {
                    _twilioText.Body= body;
                    return this;
                }
                public TwilioText Build()
                {
                    return _twilioText;
                }
            }
        }
        public class TwilioMedia
        {
            [JsonProperty("body")]
            private string Body {get; set;}
            [JsonProperty("media")]
            private List<string> Media {get; set;}
            public TwilioMedia() { }
            public class Builder
            {
                private TwilioMedia _twilioMedia = new TwilioMedia();
                public Builder()
                {
                }
                public Builder WithBody(string body)
                {
                    _twilioMedia.Body= body;
                    return this;
                }
                public Builder WithMedia(List<string> media)
                {
                    _twilioMedia.Media= media;
                    return this;
                }
                public TwilioMedia Build()
                {
                    return _twilioMedia;
                }
            }
        }
        public class TwilioLocation
        {
            [JsonProperty("latitude")]
            private decimal? Latitude {get; set;}
            [JsonProperty("longitude")]
            private decimal? Longitude {get; set;}
            [JsonProperty("label")]
            private string Label {get; set;}
            public TwilioLocation() { }
            public class Builder
            {
                private TwilioLocation _twilioLocation = new TwilioLocation();
                public Builder()
                {
                }
                public Builder WithLatitude(decimal? latitude)
                {
                    _twilioLocation.Latitude= latitude;
                    return this;
                }
                public Builder WithLongitude(decimal? longitude)
                {
                    _twilioLocation.Longitude= longitude;
                    return this;
                }
                public Builder WithLabel(string label)
                {
                    _twilioLocation.Label= label;
                    return this;
                }
                public TwilioLocation Build()
                {
                    return _twilioLocation;
                }
            }
        }
        public class ListItem
        {
            [JsonProperty("id")]
            private string Id {get; set;}
            [JsonProperty("item")]
            private string Item {get; set;}
            [JsonProperty("description")]
            private string Description {get; set;}
            public ListItem() { }
            public class Builder
            {
                private ListItem _listItem = new ListItem();
                public Builder()
                {
                }
                public Builder WithId(string id)
                {
                    _listItem.Id= id;
                    return this;
                }
                public Builder WithItem(string item)
                {
                    _listItem.Item= item;
                    return this;
                }
                public Builder WithDescription(string description)
                {
                    _listItem.Description= description;
                    return this;
                }
                public ListItem Build()
                {
                    return _listItem;
                }
            }
        }
        public class TwilioListPicker
        {
            [JsonProperty("body")]
            private string Body {get; set;}
            [JsonProperty("button")]
            private string Button {get; set;}
            [JsonProperty("items")]
            private List<ListItem> Items {get; set;}
            public TwilioListPicker() { }
            public class Builder
            {
                private TwilioListPicker _twilioListPicker = new TwilioListPicker();
                public Builder()
                {
                }
                public Builder WithBody(string body)
                {
                    _twilioListPicker.Body= body;
                    return this;
                }
                public Builder WithButton(string button)
                {
                    _twilioListPicker.Button= button;
                    return this;
                }
                public Builder WithItems(List<ListItem> items)
                {
                    _twilioListPicker.Items= items;
                    return this;
                }
                public TwilioListPicker Build()
                {
                    return _twilioListPicker;
                }
            }
        }
        public class CallToActionAction
        {
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("type")]
            private ContentResource.CallToActionActionType Type {get; set;}
            [JsonProperty("title")]
            private string Title {get; set;}
            [JsonProperty("url")]
            private string Url {get; set;}
            [JsonProperty("phone")]
            private string Phone {get; set;}
            [JsonProperty("code")]
            private string Code {get; set;}
            public CallToActionAction() { }
            public class Builder
            {
                private CallToActionAction _callToActionAction = new CallToActionAction();
                public Builder()
                {
                }
                public Builder WithType(ContentResource.CallToActionActionType type)
                {
                    _callToActionAction.Type= type;
                    return this;
                }
                public Builder WithTitle(string title)
                {
                    _callToActionAction.Title= title;
                    return this;
                }
                public Builder WithUrl(string url)
                {
                    _callToActionAction.Url= url;
                    return this;
                }
                public Builder WithPhone(string phone)
                {
                    _callToActionAction.Phone= phone;
                    return this;
                }
                public Builder WithCode(string code)
                {
                    _callToActionAction.Code= code;
                    return this;
                }
                public CallToActionAction Build()
                {
                    return _callToActionAction;
                }
            }
        }
        public class TwilioCallToAction
        {
            [JsonProperty("body")]
            private string Body {get; set;}
            [JsonProperty("actions")]
            private List<CallToActionAction> Actions {get; set;}
            public TwilioCallToAction() { }
            public class Builder
            {
                private TwilioCallToAction _twilioCallToAction = new TwilioCallToAction();
                public Builder()
                {
                }
                public Builder WithBody(string body)
                {
                    _twilioCallToAction.Body= body;
                    return this;
                }
                public Builder WithActions(List<CallToActionAction> actions)
                {
                    _twilioCallToAction.Actions= actions;
                    return this;
                }
                public TwilioCallToAction Build()
                {
                    return _twilioCallToAction;
                }
            }
        }
        public class QuickReplyAction
        {
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("type")]
            private ContentResource.QuickReplyActionType Type {get; set;}
            [JsonProperty("title")]
            private string Title {get; set;}
            [JsonProperty("id")]
            private string Id {get; set;}
            public QuickReplyAction() { }
            public class Builder
            {
                private QuickReplyAction _quickReplyAction = new QuickReplyAction();
                public Builder()
                {
                }
                public Builder WithType(ContentResource.QuickReplyActionType type)
                {
                    _quickReplyAction.Type= type;
                    return this;
                }
                public Builder WithTitle(string title)
                {
                    _quickReplyAction.Title= title;
                    return this;
                }
                public Builder WithId(string id)
                {
                    _quickReplyAction.Id= id;
                    return this;
                }
                public QuickReplyAction Build()
                {
                    return _quickReplyAction;
                }
            }
        }
        public class TwilioQuickReply
        {
            [JsonProperty("body")]
            private string Body {get; set;}
            [JsonProperty("actions")]
            private List<QuickReplyAction> Actions {get; set;}
            public TwilioQuickReply() { }
            public class Builder
            {
                private TwilioQuickReply _twilioQuickReply = new TwilioQuickReply();
                public Builder()
                {
                }
                public Builder WithBody(string body)
                {
                    _twilioQuickReply.Body= body;
                    return this;
                }
                public Builder WithActions(List<QuickReplyAction> actions)
                {
                    _twilioQuickReply.Actions= actions;
                    return this;
                }
                public TwilioQuickReply Build()
                {
                    return _twilioQuickReply;
                }
            }
        }
        public class CardAction
        {
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("type")]
            private ContentResource.CardActionType Type {get; set;}
            [JsonProperty("title")]
            private string Title {get; set;}
            [JsonProperty("url")]
            private string Url {get; set;}
            [JsonProperty("phone")]
            private string Phone {get; set;}
            [JsonProperty("id")]
            private string Id {get; set;}
            [JsonProperty("code")]
            private string Code {get; set;}
            public CardAction() { }
            public class Builder
            {
                private CardAction _cardAction = new CardAction();
                public Builder()
                {
                }
                public Builder WithType(ContentResource.CardActionType type)
                {
                    _cardAction.Type= type;
                    return this;
                }
                public Builder WithTitle(string title)
                {
                    _cardAction.Title= title;
                    return this;
                }
                public Builder WithUrl(string url)
                {
                    _cardAction.Url= url;
                    return this;
                }
                public Builder WithPhone(string phone)
                {
                    _cardAction.Phone= phone;
                    return this;
                }
                public Builder WithId(string id)
                {
                    _cardAction.Id= id;
                    return this;
                }
                public Builder WithCode(string code)
                {
                    _cardAction.Code= code;
                    return this;
                }
                public CardAction Build()
                {
                    return _cardAction;
                }
            }
        }
        public class TwilioCard
        {
            [JsonProperty("title")]
            private string Title {get; set;}
            [JsonProperty("subtitle")]
            private string Subtitle {get; set;}
            [JsonProperty("media")]
            private List<string> Media {get; set;}
            [JsonProperty("actions")]
            private List<CardAction> Actions {get; set;}
            public TwilioCard() { }
            public class Builder
            {
                private TwilioCard _twilioCard = new TwilioCard();
                public Builder()
                {
                }
                public Builder WithTitle(string title)
                {
                    _twilioCard.Title= title;
                    return this;
                }
                public Builder WithSubtitle(string subtitle)
                {
                    _twilioCard.Subtitle= subtitle;
                    return this;
                }
                public Builder WithMedia(List<string> media)
                {
                    _twilioCard.Media= media;
                    return this;
                }
                public Builder WithActions(List<CardAction> actions)
                {
                    _twilioCard.Actions= actions;
                    return this;
                }
                public TwilioCard Build()
                {
                    return _twilioCard;
                }
            }
        }
        public class CatalogItem
        {
            [JsonProperty("id")]
            private string Id {get; set;}
            [JsonProperty("section_title")]
            private string SectionTitle {get; set;}
            [JsonProperty("name")]
            private string Name {get; set;}
            [JsonProperty("media_url")]
            private string MediaUrl {get; set;}
            [JsonProperty("price")]
            private decimal? Price {get; set;}
            [JsonProperty("description")]
            private string Description {get; set;}
            public CatalogItem() { }
            public class Builder
            {
                private CatalogItem _catalogItem = new CatalogItem();
                public Builder()
                {
                }
                public Builder WithId(string id)
                {
                    _catalogItem.Id= id;
                    return this;
                }
                public Builder WithSectionTitle(string sectionTitle)
                {
                    _catalogItem.SectionTitle= sectionTitle;
                    return this;
                }
                public Builder WithName(string name)
                {
                    _catalogItem.Name= name;
                    return this;
                }
                public Builder WithMediaUrl(string mediaUrl)
                {
                    _catalogItem.MediaUrl= mediaUrl;
                    return this;
                }
                public Builder WithPrice(decimal? price)
                {
                    _catalogItem.Price= price;
                    return this;
                }
                public Builder WithDescription(string description)
                {
                    _catalogItem.Description= description;
                    return this;
                }
                public CatalogItem Build()
                {
                    return _catalogItem;
                }
            }
        }
        public class TwilioCatalog
        {
            [JsonProperty("title")]
            private string Title {get; set;}
            [JsonProperty("body")]
            private string Body {get; set;}
            [JsonProperty("subtitle")]
            private string Subtitle {get; set;}
            [JsonProperty("id")]
            private string Id {get; set;}
            [JsonProperty("items")]
            private List<CatalogItem> Items {get; set;}
            [JsonProperty("dynamic_items")]
            private string DynamicItems {get; set;}
            public TwilioCatalog() { }
            public class Builder
            {
                private TwilioCatalog _twilioCatalog = new TwilioCatalog();
                public Builder()
                {
                }
                public Builder WithTitle(string title)
                {
                    _twilioCatalog.Title= title;
                    return this;
                }
                public Builder WithBody(string body)
                {
                    _twilioCatalog.Body= body;
                    return this;
                }
                public Builder WithSubtitle(string subtitle)
                {
                    _twilioCatalog.Subtitle= subtitle;
                    return this;
                }
                public Builder WithId(string id)
                {
                    _twilioCatalog.Id= id;
                    return this;
                }
                public Builder WithItems(List<CatalogItem> items)
                {
                    _twilioCatalog.Items= items;
                    return this;
                }
                public Builder WithDynamicItems(string dynamicItems)
                {
                    _twilioCatalog.DynamicItems= dynamicItems;
                    return this;
                }
                public TwilioCatalog Build()
                {
                    return _twilioCatalog;
                }
            }
        }
        public class CarouselAction
        {
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("type")]
            private ContentResource.CarouselActionType Type {get; set;}
            [JsonProperty("title")]
            private string Title {get; set;}
            [JsonProperty("url")]
            private string Url {get; set;}
            [JsonProperty("phone")]
            private string Phone {get; set;}
            [JsonProperty("id")]
            private string Id {get; set;}
            public CarouselAction() { }
            public class Builder
            {
                private CarouselAction _carouselAction = new CarouselAction();
                public Builder()
                {
                }
                public Builder WithType(ContentResource.CarouselActionType type)
                {
                    _carouselAction.Type= type;
                    return this;
                }
                public Builder WithTitle(string title)
                {
                    _carouselAction.Title= title;
                    return this;
                }
                public Builder WithUrl(string url)
                {
                    _carouselAction.Url= url;
                    return this;
                }
                public Builder WithPhone(string phone)
                {
                    _carouselAction.Phone= phone;
                    return this;
                }
                public Builder WithId(string id)
                {
                    _carouselAction.Id= id;
                    return this;
                }
                public CarouselAction Build()
                {
                    return _carouselAction;
                }
            }
        }
        public class CarouselCard
        {
            [JsonProperty("title")]
            private string Title {get; set;}
            [JsonProperty("body")]
            private string Body {get; set;}
            [JsonProperty("media")]
            private string Media {get; set;}
            [JsonProperty("actions")]
            private List<CarouselAction> Actions {get; set;}
            public CarouselCard() { }
            public class Builder
            {
                private CarouselCard _carouselCard = new CarouselCard();
                public Builder()
                {
                }
                public Builder WithTitle(string title)
                {
                    _carouselCard.Title= title;
                    return this;
                }
                public Builder WithBody(string body)
                {
                    _carouselCard.Body= body;
                    return this;
                }
                public Builder WithMedia(string media)
                {
                    _carouselCard.Media= media;
                    return this;
                }
                public Builder WithActions(List<CarouselAction> actions)
                {
                    _carouselCard.Actions= actions;
                    return this;
                }
                public CarouselCard Build()
                {
                    return _carouselCard;
                }
            }
        }
        public class TwilioCarousel
        {
            [JsonProperty("body")]
            private string Body {get; set;}
            [JsonProperty("cards")]
            private List<CarouselCard> Cards {get; set;}
            public TwilioCarousel() { }
            public class Builder
            {
                private TwilioCarousel _twilioCarousel = new TwilioCarousel();
                public Builder()
                {
                }
                public Builder WithBody(string body)
                {
                    _twilioCarousel.Body= body;
                    return this;
                }
                public Builder WithCards(List<CarouselCard> cards)
                {
                    _twilioCarousel.Cards= cards;
                    return this;
                }
                public TwilioCarousel Build()
                {
                    return _twilioCarousel;
                }
            }
        }
        public class FlowsPageComponent
        {
            [JsonProperty("label")]
            private string Label {get; set;}
            [JsonProperty("type")]
            private string Type {get; set;}
            public FlowsPageComponent() { }
            public class Builder
            {
                private FlowsPageComponent _flowsPageComponent = new FlowsPageComponent();
                public Builder()
                {
                }
                public Builder WithLabel(string label)
                {
                    _flowsPageComponent.Label= label;
                    return this;
                }
                public Builder WithType(string type)
                {
                    _flowsPageComponent.Type= type;
                    return this;
                }
                public FlowsPageComponent Build()
                {
                    return _flowsPageComponent;
                }
            }
        }
        public class FlowsPage
        {
            [JsonProperty("id")]
            private string Id {get; set;}
            [JsonProperty("next_page_id")]
            private string NextPageId {get; set;}
            [JsonProperty("title")]
            private string Title {get; set;}
            [JsonProperty("subtitle")]
            private string Subtitle {get; set;}
            [JsonProperty("layout")]
            private List<FlowsPageComponent> Layout {get; set;}
            public FlowsPage() { }
            public class Builder
            {
                private FlowsPage _flowsPage = new FlowsPage();
                public Builder()
                {
                }
                public Builder WithId(string id)
                {
                    _flowsPage.Id= id;
                    return this;
                }
                public Builder WithNextPageId(string nextPageId)
                {
                    _flowsPage.NextPageId= nextPageId;
                    return this;
                }
                public Builder WithTitle(string title)
                {
                    _flowsPage.Title= title;
                    return this;
                }
                public Builder WithSubtitle(string subtitle)
                {
                    _flowsPage.Subtitle= subtitle;
                    return this;
                }
                public Builder WithLayout(List<FlowsPageComponent> layout)
                {
                    _flowsPage.Layout= layout;
                    return this;
                }
                public FlowsPage Build()
                {
                    return _flowsPage;
                }
            }
        }
        public class TwilioFlows
        {
            [JsonProperty("body")]
            private string Body {get; set;}
            [JsonProperty("button_text")]
            private string ButtonText {get; set;}
            [JsonProperty("subtitle")]
            private string Subtitle {get; set;}
            [JsonProperty("media_url")]
            private string MediaUrl {get; set;}
            [JsonProperty("pages")]
            private List<FlowsPage> Pages {get; set;}
            [JsonProperty("type")]
            private string Type {get; set;}
            public TwilioFlows() { }
            public class Builder
            {
                private TwilioFlows _twilioFlows = new TwilioFlows();
                public Builder()
                {
                }
                public Builder WithBody(string body)
                {
                    _twilioFlows.Body= body;
                    return this;
                }
                public Builder WithButtonText(string buttonText)
                {
                    _twilioFlows.ButtonText= buttonText;
                    return this;
                }
                public Builder WithSubtitle(string subtitle)
                {
                    _twilioFlows.Subtitle= subtitle;
                    return this;
                }
                public Builder WithMediaUrl(string mediaUrl)
                {
                    _twilioFlows.MediaUrl= mediaUrl;
                    return this;
                }
                public Builder WithPages(List<FlowsPage> pages)
                {
                    _twilioFlows.Pages= pages;
                    return this;
                }
                public Builder WithType(string type)
                {
                    _twilioFlows.Type= type;
                    return this;
                }
                public TwilioFlows Build()
                {
                    return _twilioFlows;
                }
            }
        }
        public class WhatsappCard
        {
            [JsonProperty("body")]
            private string Body {get; set;}
            [JsonProperty("footer")]
            private string Footer {get; set;}
            [JsonProperty("media")]
            private List<string> Media {get; set;}
            [JsonProperty("header_text")]
            private string HeaderText {get; set;}
            [JsonProperty("actions")]
            private List<CardAction> Actions {get; set;}
            public WhatsappCard() { }
            public class Builder
            {
                private WhatsappCard _whatsappCard = new WhatsappCard();
                public Builder()
                {
                }
                public Builder WithBody(string body)
                {
                    _whatsappCard.Body= body;
                    return this;
                }
                public Builder WithFooter(string footer)
                {
                    _whatsappCard.Footer= footer;
                    return this;
                }
                public Builder WithMedia(List<string> media)
                {
                    _whatsappCard.Media= media;
                    return this;
                }
                public Builder WithHeaderText(string headerText)
                {
                    _whatsappCard.HeaderText= headerText;
                    return this;
                }
                public Builder WithActions(List<CardAction> actions)
                {
                    _whatsappCard.Actions= actions;
                    return this;
                }
                public WhatsappCard Build()
                {
                    return _whatsappCard;
                }
            }
        }
        public class AuthenticationAction
        {
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("type")]
            private ContentResource.AuthenticationActionType Type {get; set;}
            [JsonProperty("copy_code_text")]
            private string CopyCodeText {get; set;}
            public AuthenticationAction() { }
            public class Builder
            {
                private AuthenticationAction _authenticationAction = new AuthenticationAction();
                public Builder()
                {
                }
                public Builder WithType(ContentResource.AuthenticationActionType type)
                {
                    _authenticationAction.Type= type;
                    return this;
                }
                public Builder WithCopyCodeText(string copyCodeText)
                {
                    _authenticationAction.CopyCodeText= copyCodeText;
                    return this;
                }
                public AuthenticationAction Build()
                {
                    return _authenticationAction;
                }
            }
        }
        public class WhatsappAuthentication
        {
            [JsonProperty("add_security_recommendation")]
            private bool? AddSecurityRecommendation {get; set;}
            [JsonProperty("code_expiration_minutes")]
            private decimal? CodeExpirationMinutes {get; set;}
            [JsonProperty("actions")]
            private List<AuthenticationAction> Actions {get; set;}
            public WhatsappAuthentication() { }
            public class Builder
            {
                private WhatsappAuthentication _whatsappAuthentication = new WhatsappAuthentication();
                public Builder()
                {
                }
                public Builder WithAddSecurityRecommendation(bool? addSecurityRecommendation)
                {
                    _whatsappAuthentication.AddSecurityRecommendation= addSecurityRecommendation;
                    return this;
                }
                public Builder WithCodeExpirationMinutes(decimal? codeExpirationMinutes)
                {
                    _whatsappAuthentication.CodeExpirationMinutes= codeExpirationMinutes;
                    return this;
                }
                public Builder WithActions(List<AuthenticationAction> actions)
                {
                    _whatsappAuthentication.Actions= actions;
                    return this;
                }
                public WhatsappAuthentication Build()
                {
                    return _whatsappAuthentication;
                }
            }
        }
        public class Types
        {
            [JsonProperty("twilio/text")]
            private TwilioText TwilioText {get; set;}
            [JsonProperty("twilio/media")]
            private TwilioMedia TwilioMedia {get; set;}
            [JsonProperty("twilio/location")]
            private TwilioLocation TwilioLocation {get; set;}
            [JsonProperty("twilio/list-picker")]
            private TwilioListPicker TwilioListPicker {get; set;}
            [JsonProperty("twilio/call-to-action")]
            private TwilioCallToAction TwilioCallToAction {get; set;}
            [JsonProperty("twilio/quick-reply")]
            private TwilioQuickReply TwilioQuickReply {get; set;}
            [JsonProperty("twilio/card")]
            private TwilioCard TwilioCard {get; set;}
            [JsonProperty("twilio/catalog")]
            private TwilioCatalog TwilioCatalog {get; set;}
            [JsonProperty("twilio/carousel")]
            private TwilioCarousel TwilioCarousel {get; set;}
            [JsonProperty("twilio/flows")]
            private TwilioFlows TwilioFlows {get; set;}
            [JsonProperty("whatsapp/card")]
            private WhatsappCard WhatsappCard {get; set;}
            [JsonProperty("whatsapp/authentication")]
            private WhatsappAuthentication WhatsappAuthentication {get; set;}
            public Types() { }
            public class Builder
            {
                private Types _types = new Types();
                public Builder()
                {
                }
                public Builder WithTwilioText(TwilioText twilioText)
                {
                    _types.TwilioText= twilioText;
                    return this;
                }
                public Builder WithTwilioMedia(TwilioMedia twilioMedia)
                {
                    _types.TwilioMedia= twilioMedia;
                    return this;
                }
                public Builder WithTwilioLocation(TwilioLocation twilioLocation)
                {
                    _types.TwilioLocation= twilioLocation;
                    return this;
                }
                public Builder WithTwilioListPicker(TwilioListPicker twilioListPicker)
                {
                    _types.TwilioListPicker= twilioListPicker;
                    return this;
                }
                public Builder WithTwilioCallToAction(TwilioCallToAction twilioCallToAction)
                {
                    _types.TwilioCallToAction= twilioCallToAction;
                    return this;
                }
                public Builder WithTwilioQuickReply(TwilioQuickReply twilioQuickReply)
                {
                    _types.TwilioQuickReply= twilioQuickReply;
                    return this;
                }
                public Builder WithTwilioCard(TwilioCard twilioCard)
                {
                    _types.TwilioCard= twilioCard;
                    return this;
                }
                public Builder WithTwilioCatalog(TwilioCatalog twilioCatalog)
                {
                    _types.TwilioCatalog= twilioCatalog;
                    return this;
                }
                public Builder WithTwilioCarousel(TwilioCarousel twilioCarousel)
                {
                    _types.TwilioCarousel= twilioCarousel;
                    return this;
                }
                public Builder WithTwilioFlows(TwilioFlows twilioFlows)
                {
                    _types.TwilioFlows= twilioFlows;
                    return this;
                }
                public Builder WithWhatsappCard(WhatsappCard whatsappCard)
                {
                    _types.WhatsappCard= whatsappCard;
                    return this;
                }
                public Builder WithWhatsappAuthentication(WhatsappAuthentication whatsappAuthentication)
                {
                    _types.WhatsappAuthentication= whatsappAuthentication;
                    return this;
                }
                public Types Build()
                {
                    return _types;
                }
            }
        }
        public class ContentCreateRequest
        {
            [JsonProperty("friendly_name")]
            private string FriendlyName {get; set;}
            [JsonProperty("variables")]
            private Dictionary<string, string> Variables {get; set;}
            [JsonProperty("language")]
            private string Language {get; set;}
            [JsonProperty("types")]
            private Types Types {get; set;}
            public ContentCreateRequest() { }
            public class Builder
            {
                private ContentCreateRequest _contentCreateRequest = new ContentCreateRequest();
                public Builder()
                {
                }
                public Builder WithFriendlyName(string friendlyName)
                {
                    _contentCreateRequest.FriendlyName= friendlyName;
                    return this;
                }
                public Builder WithVariables(Dictionary<string, string> variables)
                {
                    _contentCreateRequest.Variables= variables;
                    return this;
                }
                public Builder WithLanguage(string language)
                {
                    _contentCreateRequest.Language= language;
                    return this;
                }
                public Builder WithTypes(Types types)
                {
                    _contentCreateRequest.Types= types;
                    return this;
                }
                public ContentCreateRequest Build()
                {
                    return _contentCreateRequest;
                }
            }
        }

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class CarouselActionType : StringEnum
        {
            private CarouselActionType(string value) : base(value) {}
            public CarouselActionType() {}
            public static implicit operator CarouselActionType(string value)
            {
                return new CarouselActionType(value);
            }
            public static readonly CarouselActionType Url = new CarouselActionType("URL");
            public static readonly CarouselActionType PhoneNumber = new CarouselActionType("PHONE_NUMBER");
            public static readonly CarouselActionType QuickReply = new CarouselActionType("QUICK_REPLY");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class AuthenticationActionType : StringEnum
        {
            private AuthenticationActionType(string value) : base(value) {}
            public AuthenticationActionType() {}
            public static implicit operator AuthenticationActionType(string value)
            {
                return new AuthenticationActionType(value);
            }
            public static readonly AuthenticationActionType CopyCode = new AuthenticationActionType("COPY_CODE");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class CardActionType : StringEnum
        {
            private CardActionType(string value) : base(value) {}
            public CardActionType() {}
            public static implicit operator CardActionType(string value)
            {
                return new CardActionType(value);
            }
            public static readonly CardActionType Url = new CardActionType("URL");
            public static readonly CardActionType PhoneNumber = new CardActionType("PHONE_NUMBER");
            public static readonly CardActionType QuickReply = new CardActionType("QUICK_REPLY");
            public static readonly CardActionType CopyCode = new CardActionType("COPY_CODE");
            public static readonly CardActionType VoiceCall = new CardActionType("VOICE_CALL");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class QuickReplyActionType : StringEnum
        {
            private QuickReplyActionType(string value) : base(value) {}
            public QuickReplyActionType() {}
            public static implicit operator QuickReplyActionType(string value)
            {
                return new QuickReplyActionType(value);
            }
            public static readonly QuickReplyActionType QuickReply = new QuickReplyActionType("QUICK_REPLY");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class CallToActionActionType : StringEnum
        {
            private CallToActionActionType(string value) : base(value) {}
            public CallToActionActionType() {}
            public static implicit operator CallToActionActionType(string value)
            {
                return new CallToActionActionType(value);
            }
            public static readonly CallToActionActionType Url = new CallToActionActionType("URL");
            public static readonly CallToActionActionType PhoneNumber = new CallToActionActionType("PHONE_NUMBER");
            public static readonly CallToActionActionType CopyCode = new CallToActionActionType("COPY_CODE");
            public static readonly CallToActionActionType VoiceCall = new CallToActionActionType("VOICE_CALL");
            public static readonly CallToActionActionType VoiceCallRequest = new CallToActionActionType("VOICE_CALL_REQUEST");

        }

        
        private static Request BuildCreateRequest(CreateContentOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Content";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Content,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Create a Content resource </summary>
        /// <param name="options"> Create Content parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Content </returns>
        public static ContentResource Create(CreateContentOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a Content resource </summary>
        /// <param name="options"> Create Content parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Content </returns>
        public static async System.Threading.Tasks.Task<ContentResource> CreateAsync(CreateContentOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a Content resource </summary>
        /// <param name="contentCreateRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Content </returns>
        public static ContentResource Create(
                                          ContentResource.ContentCreateRequest contentCreateRequest,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateContentOptions(contentCreateRequest){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a Content resource </summary>
        /// <param name="contentCreateRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Content </returns>
        public static async System.Threading.Tasks.Task<ContentResource> CreateAsync(
                                                                                  ContentResource.ContentCreateRequest contentCreateRequest,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateContentOptions(contentCreateRequest){  };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        /// <summary> Deletes a Content resource </summary>
        /// <param name="options"> Delete Content parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Content </returns>
        private static Request BuildDeleteRequest(DeleteContentOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Content/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Content,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Deletes a Content resource </summary>
        /// <param name="options"> Delete Content parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Content </returns>
        public static bool Delete(DeleteContentOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> Deletes a Content resource </summary>
        /// <param name="options"> Delete Content parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Content </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteContentOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> Deletes a Content resource </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Content resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Content </returns>
        public static bool Delete(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteContentOptions(pathSid)     ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> Deletes a Content resource </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Content resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Content </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteContentOptions(pathSid) ;
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchContentOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Content/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Content,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch a Content resource by its unique Content Sid </summary>
        /// <param name="options"> Fetch Content parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Content </returns>
        public static ContentResource Fetch(FetchContentOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Fetch a Content resource by its unique Content Sid </summary>
        /// <param name="options"> Fetch Content parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Content </returns>
        public static async System.Threading.Tasks.Task<ContentResource> FetchAsync(FetchContentOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Fetch a Content resource by its unique Content Sid </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Content resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Content </returns>
        public static ContentResource Fetch(
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchContentOptions(pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Fetch a Content resource by its unique Content Sid </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Content resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Content </returns>
        public static async System.Threading.Tasks.Task<ContentResource> FetchAsync(string pathSid, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchContentOptions(pathSid){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadContentOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Content";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Content,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> Retrieve a list of Contents belonging to the account used to make the request </summary>
        /// <param name="options"> Read Content parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Content </returns>
        public static ResourceSet<ContentResource> Read(ReadContentOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<ContentResource>.FromJson("contents", response.Content);
            return new ResourceSet<ContentResource>(page, options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of Contents belonging to the account used to make the request </summary>
        /// <param name="options"> Read Content parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Content </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ContentResource>> ReadAsync(ReadContentOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<ContentResource>.FromJson("contents", response.Content);
            return new ResourceSet<ContentResource>(page, options, client);
        }
        #endif
        /// <summary> Retrieve a list of Contents belonging to the account used to make the request </summary>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Content </returns>
        public static ResourceSet<ContentResource> Read(
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadContentOptions(){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of Contents belonging to the account used to make the request </summary>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Content </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ContentResource>> ReadAsync(
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadContentOptions(){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<ContentResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<ContentResource>.FromJson("contents", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<ContentResource> NextPage(Page<ContentResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ContentResource>.FromJson("contents", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<ContentResource> PreviousPage(Page<ContentResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ContentResource>.FromJson("contents", response.Content);
        }

    
        /// <summary>
        /// Converts a JSON string into a ContentResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ContentResource object represented by the provided JSON </returns>
        public static ContentResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ContentResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The unique string that that we created to identify the Content resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/usage/api/account) that created Content resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> A string name used to describe the Content resource. Not visible to the end recipient. </summary> 
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }

        ///<summary> Two-letter (ISO 639-1) language code (e.g., en) identifying the language the Content resource is in. </summary> 
        [JsonProperty("language")]
        public string Language { get; private set; }

        ///<summary> Defines the default placeholder values for variables included in the Content resource. e.g. {\"1\": \"Customer_Name\"}. </summary> 
        [JsonProperty("variables")]
        public object Variables { get; private set; }

        ///<summary> The [Content types](https://www.twilio.com/docs/content-api/content-types-overview) (e.g. twilio/text) for this Content resource. </summary> 
        [JsonProperty("types")]
        public object _Types { get; private set; }

        ///<summary> The URL of the resource, relative to `https://content.twilio.com`. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> A list of links related to the Content resource, such as approval_fetch and approval_create </summary> 
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }



        private ContentResource() {

        }
    }
}

