/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Content.V1.Content
{
    public class ApprovalCreateResource : Resource
    {
    
        public class ContentApprovalRequest
        {
            [JsonProperty("name")]
            private string Name {get; set;}
            [JsonProperty("category")]
            private string Category {get; set;}
            public ContentApprovalRequest() { }
            public class Builder
            {
                private ContentApprovalRequest _contentApprovalRequest = new ContentApprovalRequest();
                public Builder()
                {
                }
                public Builder WithName(string name)
                {
                    _contentApprovalRequest.Name= name;
                    return this;
                }
                public Builder WithCategory(string category)
                {
                    _contentApprovalRequest.Category= category;
                    return this;
                }
                public ContentApprovalRequest Build()
                {
                    return _contentApprovalRequest;
                }
            }
        }

    

        
        private static Request BuildCreateRequest(CreateApprovalCreateOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Content/{ContentSid}/ApprovalRequests/whatsapp";

            string PathContentSid = options.PathContentSid;
            path = path.Replace("{"+"ContentSid"+"}", PathContentSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Content,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> create </summary>
        /// <param name="options"> Create ApprovalCreate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ApprovalCreate </returns>
        public static ApprovalCreateResource Create(CreateApprovalCreateOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="options"> Create ApprovalCreate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ApprovalCreate </returns>
        public static async System.Threading.Tasks.Task<ApprovalCreateResource> CreateAsync(CreateApprovalCreateOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> create </summary>
        /// <param name="pathContentSid">  </param>
        /// <param name="contentApprovalRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ApprovalCreate </returns>
        public static ApprovalCreateResource Create(
                                          string pathContentSid,
                                          ApprovalCreateResource.ContentApprovalRequest contentApprovalRequest,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateApprovalCreateOptions(pathContentSid, contentApprovalRequest){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="pathContentSid">  </param>
        /// <param name="contentApprovalRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ApprovalCreate </returns>
        public static async System.Threading.Tasks.Task<ApprovalCreateResource> CreateAsync(
                                                                                  string pathContentSid,
                                                                                  ApprovalCreateResource.ContentApprovalRequest contentApprovalRequest,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateApprovalCreateOptions(pathContentSid, contentApprovalRequest){  };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ApprovalCreateResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ApprovalCreateResource object represented by the provided JSON </returns>
        public static ApprovalCreateResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ApprovalCreateResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The name </summary> 
        [JsonProperty("name")]
        public string Name { get; private set; }

        ///<summary> The category </summary> 
        [JsonProperty("category")]
        public string Category { get; private set; }

        ///<summary> The content_type </summary> 
        [JsonProperty("content_type")]
        public string ContentType { get; private set; }

        ///<summary> The status </summary> 
        [JsonProperty("status")]
        public string Status { get; private set; }

        ///<summary> The rejection_reason </summary> 
        [JsonProperty("rejection_reason")]
        public string RejectionReason { get; private set; }

        ///<summary> The allow_category_change </summary> 
        [JsonProperty("allow_category_change")]
        public bool? AllowCategoryChange { get; private set; }



        private ApprovalCreateResource() {

        }
    }
}

