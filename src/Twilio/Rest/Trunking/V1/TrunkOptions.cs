/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Trunking.V1
{

    /// <summary> create </summary>
    public class CreateTrunkOptions : IOptions<TrunkResource>
    {
        
        ///<summary> A descriptive string that you create to describe the resource. It can be up to 64 characters long. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and `-` and must end with `pstn.twilio.com`. See [Termination Settings](https://www.twilio.com/docs/sip-trunking#termination) for more information. </summary> 
        public string DomainName { get; set; }

        ///<summary> The URL we should call using the `disaster_recovery_method` if an error occurs while sending SIP traffic towards the configured Origination URL. We retrieve TwiML from the URL and execute the instructions like any other normal TwiML call. See [Disaster Recovery](https://www.twilio.com/docs/sip-trunking#disaster-recovery) for more information. </summary> 
        public Uri DisasterRecoveryUrl { get; set; }

        ///<summary> The HTTP method we should use to call the `disaster_recovery_url`. Can be: `GET` or `POST`. </summary> 
        public Twilio.Http.HttpMethod DisasterRecoveryMethod { get; set; }

        
        public TrunkResource.TransferSettingEnum TransferMode { get; set; }

        ///<summary> Whether Secure Trunking is enabled for the trunk. If enabled, all calls going through the trunk will be secure using SRTP for media and TLS for signaling. If disabled, then RTP will be used for media. See [Secure Trunking](https://www.twilio.com/docs/sip-trunking#securetrunking) for more information. </summary> 
        public bool? Secure { get; set; }

        ///<summary> Whether Caller ID Name (CNAM) lookup should be enabled for the trunk. If enabled, all inbound calls to the SIP Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. </summary> 
        public bool? CnamLookupEnabled { get; set; }

        
        public TrunkResource.TransferCallerIdEnum TransferCallerId { get; set; }



        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (DomainName != null)
            {
                p.Add(new KeyValuePair<string, string>("DomainName", DomainName));
            }
            if (DisasterRecoveryUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("DisasterRecoveryUrl", Serializers.Url(DisasterRecoveryUrl)));
            }
            if (DisasterRecoveryMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("DisasterRecoveryMethod", DisasterRecoveryMethod.ToString()));
            }
            if (TransferMode != null)
            {
                p.Add(new KeyValuePair<string, string>("TransferMode", TransferMode.ToString()));
            }
            if (Secure != null)
            {
                p.Add(new KeyValuePair<string, string>("Secure", Secure.Value.ToString().ToLower()));
            }
            if (CnamLookupEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("CnamLookupEnabled", CnamLookupEnabled.Value.ToString().ToLower()));
            }
            if (TransferCallerId != null)
            {
                p.Add(new KeyValuePair<string, string>("TransferCallerId", TransferCallerId.ToString()));
            }
            return p;
        }

        

    }
    /// <summary> delete </summary>
    public class DeleteTrunkOptions : IOptions<TrunkResource>
    {
        
        ///<summary> The unique string that we created to identify the Trunk resource to delete. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteTrunkOptions </summary>
        /// <param name="pathSid"> The unique string that we created to identify the Trunk resource to delete. </param>
        public DeleteTrunkOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> fetch </summary>
    public class FetchTrunkOptions : IOptions<TrunkResource>
    {
    
        ///<summary> The unique string that we created to identify the Trunk resource to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchTrunkOptions </summary>
        /// <param name="pathSid"> The unique string that we created to identify the Trunk resource to fetch. </param>
        public FetchTrunkOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> read </summary>
    public class ReadTrunkOptions : ReadOptions<TrunkResource>
    {
    



        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> update </summary>
    public class UpdateTrunkOptions : IOptions<TrunkResource>
    {
    
        ///<summary> The unique string that we created to identify the OriginationUrl resource to update. </summary> 
        public string PathSid { get; }

        ///<summary> A descriptive string that you create to describe the resource. It can be up to 64 characters long. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and `-` and must end with `pstn.twilio.com`. See [Termination Settings](https://www.twilio.com/docs/sip-trunking#termination) for more information. </summary> 
        public string DomainName { get; set; }

        ///<summary> The URL we should call using the `disaster_recovery_method` if an error occurs while sending SIP traffic towards the configured Origination URL. We retrieve TwiML from the URL and execute the instructions like any other normal TwiML call. See [Disaster Recovery](https://www.twilio.com/docs/sip-trunking#disaster-recovery) for more information. </summary> 
        public Uri DisasterRecoveryUrl { get; set; }

        ///<summary> The HTTP method we should use to call the `disaster_recovery_url`. Can be: `GET` or `POST`. </summary> 
        public Twilio.Http.HttpMethod DisasterRecoveryMethod { get; set; }

        
        public TrunkResource.TransferSettingEnum TransferMode { get; set; }

        ///<summary> Whether Secure Trunking is enabled for the trunk. If enabled, all calls going through the trunk will be secure using SRTP for media and TLS for signaling. If disabled, then RTP will be used for media. See [Secure Trunking](https://www.twilio.com/docs/sip-trunking#securetrunking) for more information. </summary> 
        public bool? Secure { get; set; }

        ///<summary> Whether Caller ID Name (CNAM) lookup should be enabled for the trunk. If enabled, all inbound calls to the SIP Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. </summary> 
        public bool? CnamLookupEnabled { get; set; }

        
        public TrunkResource.TransferCallerIdEnum TransferCallerId { get; set; }



        /// <summary> Construct a new UpdateTrunkOptions </summary>
        /// <param name="pathSid"> The unique string that we created to identify the OriginationUrl resource to update. </param>
        public UpdateTrunkOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (DomainName != null)
            {
                p.Add(new KeyValuePair<string, string>("DomainName", DomainName));
            }
            if (DisasterRecoveryUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("DisasterRecoveryUrl", Serializers.Url(DisasterRecoveryUrl)));
            }
            if (DisasterRecoveryMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("DisasterRecoveryMethod", DisasterRecoveryMethod.ToString()));
            }
            if (TransferMode != null)
            {
                p.Add(new KeyValuePair<string, string>("TransferMode", TransferMode.ToString()));
            }
            if (Secure != null)
            {
                p.Add(new KeyValuePair<string, string>("Secure", Secure.Value.ToString().ToLower()));
            }
            if (CnamLookupEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("CnamLookupEnabled", CnamLookupEnabled.Value.ToString().ToLower()));
            }
            if (TransferCallerId != null)
            {
                p.Add(new KeyValuePair<string, string>("TransferCallerId", TransferCallerId.ToString()));
            }
            return p;
        }

        

    }


}

