/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Intelligence.V2
{

    /// <summary> Create a new Custom Operator for the given Account </summary>
    public class CreateCustomOperatorOptions : IOptions<CustomOperatorResource>
    {
        
        ///<summary> A human readable description of the new Operator, up to 64 characters. </summary> 
        public string FriendlyName { get; }

        ///<summary> Operator Type for this Operator. References an existing Operator Type resource. </summary> 
        public string OperatorType { get; }

        ///<summary> Operator configuration, following the schema defined by the Operator Type. </summary> 
        public object Config { get; }


        /// <summary> Construct a new CreateCustomOperatorOptions </summary>
        /// <param name="friendlyName"> A human readable description of the new Operator, up to 64 characters. </param>
        /// <param name="operatorType"> Operator Type for this Operator. References an existing Operator Type resource. </param>
        /// <param name="config"> Operator configuration, following the schema defined by the Operator Type. </param>
        public CreateCustomOperatorOptions(string friendlyName, string operatorType, object config)
        {
            FriendlyName = friendlyName;
            OperatorType = operatorType;
            Config = config;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (OperatorType != null)
            {
                p.Add(new KeyValuePair<string, string>("OperatorType", OperatorType));
            }
            if (Config != null)
            {
                p.Add(new KeyValuePair<string, string>("Config", Serializers.JsonObject(Config)));
            }
            return p;
        }

        

    }
    /// <summary> Delete a specific Custom Operator. </summary>
    public class DeleteCustomOperatorOptions : IOptions<CustomOperatorResource>
    {
        
        ///<summary> A 34 character string that uniquely identifies this Custom Operator. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteCustomOperatorOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Custom Operator. </param>
        public DeleteCustomOperatorOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Fetch a specific Custom Operator. </summary>
    public class FetchCustomOperatorOptions : IOptions<CustomOperatorResource>
    {
    
        ///<summary> A 34 character string that uniquely identifies this Custom Operator. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchCustomOperatorOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Custom Operator. </param>
        public FetchCustomOperatorOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieves a list of all Custom Operators for an Account. </summary>
    public class ReadCustomOperatorOptions : ReadOptions<CustomOperatorResource>
    {
    
        ///<summary> Returns Custom Operators with the provided availability type. Possible values: internal, beta, public, retired. </summary> 
        public CustomOperatorResource.AvailabilityEnum Availability { get; set; }

        ///<summary> Returns Custom Operators that support the provided language code. </summary> 
        public string LanguageCode { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Availability != null)
            {
                p.Add(new KeyValuePair<string, string>("Availability", Availability.ToString()));
            }
            if (LanguageCode != null)
            {
                p.Add(new KeyValuePair<string, string>("LanguageCode", LanguageCode));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> Update a specific Custom Operator. </summary>
    public class UpdateCustomOperatorOptions : IOptions<CustomOperatorResource>
    {
    
        ///<summary> A 34 character string that uniquely identifies this Custom Operator. </summary> 
        public string PathSid { get; }

        ///<summary> A human-readable name of this resource, up to 64 characters. </summary> 
        public string FriendlyName { get; }

        ///<summary> Operator configuration, following the schema defined by the Operator Type. </summary> 
        public object Config { get; }

        ///<summary> The If-Match HTTP request header </summary> 
        public string IfMatch { get; set; }



        /// <summary> Construct a new UpdateCustomOperatorOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Custom Operator. </param>
        /// <param name="friendlyName"> A human-readable name of this resource, up to 64 characters. </param>
        /// <param name="config"> Operator configuration, following the schema defined by the Operator Type. </param>
        public UpdateCustomOperatorOptions(string pathSid, string friendlyName, object config)
        {
            PathSid = pathSid;
            FriendlyName = friendlyName;
            Config = config;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (Config != null)
            {
                p.Add(new KeyValuePair<string, string>("Config", Serializers.JsonObject(Config)));
            }
            return p;
        }

        
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (IfMatch != null)
        {
            p.Add(new KeyValuePair<string, string>("If-Match", IfMatch));
        }
        return p;
    }

    }


}

