/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Intelligence.V2
{
    /// <summary> Fetch a specific Operator. Works for both Custom and Pre-built Operators. </summary>
    public class FetchOperatorOptions : IOptions<OperatorResource>
    {
    
        ///<summary> A 34 character string that uniquely identifies this Operator. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchOperatorOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Operator. </param>
        public FetchOperatorOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

        

    }


    /// <summary> Retrieves a list of all Operators for an Account, both Custom and Pre-built. </summary>
    public class ReadOperatorOptions : ReadOptions<OperatorResource>
    {
    
        ///<summary> Returns Operators with the provided availability type. Possible values: internal, beta, public, retired. </summary> 
        public OperatorResource.AvailabilityEnum Availability { get; set; }

        ///<summary> Returns Operators that support the provided language code. </summary> 
        public string LanguageCode { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Availability != null)
            {
                p.Add(new KeyValuePair<string, string>("Availability", Availability.ToString()));
            }
            if (LanguageCode != null)
            {
                p.Add(new KeyValuePair<string, string>("LanguageCode", LanguageCode));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

        

    }

}

