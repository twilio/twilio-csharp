/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Intelligence.V2
{
    public class OperatorResource : Resource
    {
    

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class AvailabilityEnum : StringEnum
        {
            private AvailabilityEnum(string value) : base(value) {}
            public AvailabilityEnum() {}
            public static implicit operator AvailabilityEnum(string value)
            {
                return new AvailabilityEnum(value);
            }
            public static readonly AvailabilityEnum Internal = new AvailabilityEnum("internal");
            public static readonly AvailabilityEnum Beta = new AvailabilityEnum("beta");
            public static readonly AvailabilityEnum Public = new AvailabilityEnum("public");
            public static readonly AvailabilityEnum Retired = new AvailabilityEnum("retired");

        }

        
        private static Request BuildFetchRequest(FetchOperatorOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Operators/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Intelligence,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch a specific Operator. Works for both Custom and Pre-built Operators. </summary>
        /// <param name="options"> Fetch Operator parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Operator </returns>
        public static OperatorResource Fetch(FetchOperatorOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Fetch a specific Operator. Works for both Custom and Pre-built Operators. </summary>
        /// <param name="options"> Fetch Operator parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Operator </returns>
        public static async System.Threading.Tasks.Task<OperatorResource> FetchAsync(FetchOperatorOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Fetch a specific Operator. Works for both Custom and Pre-built Operators. </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Operator. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Operator </returns>
        public static OperatorResource Fetch(
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchOperatorOptions(pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Fetch a specific Operator. Works for both Custom and Pre-built Operators. </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Operator. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Operator </returns>
        public static async System.Threading.Tasks.Task<OperatorResource> FetchAsync(string pathSid, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchOperatorOptions(pathSid){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadOperatorOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Operators";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Intelligence,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> Retrieves a list of all Operators for an Account, both Custom and Pre-built. </summary>
        /// <param name="options"> Read Operator parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Operator </returns>
        public static ResourceSet<OperatorResource> Read(ReadOperatorOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<OperatorResource>.FromJson("operators", response.Content);
            return new ResourceSet<OperatorResource>(page, options, client);
        }

        #if !NET35
        /// <summary> Retrieves a list of all Operators for an Account, both Custom and Pre-built. </summary>
        /// <param name="options"> Read Operator parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Operator </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<OperatorResource>> ReadAsync(ReadOperatorOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<OperatorResource>.FromJson("operators", response.Content);
            return new ResourceSet<OperatorResource>(page, options, client);
        }
        #endif
        /// <summary> Retrieves a list of all Operators for an Account, both Custom and Pre-built. </summary>
        /// <param name="availability"> Returns Operators with the provided availability type. Possible values: internal, beta, public, retired. </param>
        /// <param name="languageCode"> Returns Operators that support the provided language code. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Operator </returns>
        public static ResourceSet<OperatorResource> Read(
                                                     OperatorResource.AvailabilityEnum availability = null,
                                                     string languageCode = null,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadOperatorOptions(){ Availability = availability, LanguageCode = languageCode, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> Retrieves a list of all Operators for an Account, both Custom and Pre-built. </summary>
        /// <param name="availability"> Returns Operators with the provided availability type. Possible values: internal, beta, public, retired. </param>
        /// <param name="languageCode"> Returns Operators that support the provided language code. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Operator </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<OperatorResource>> ReadAsync(
                                                                                             OperatorResource.AvailabilityEnum availability = null,
                                                                                             string languageCode = null,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadOperatorOptions(){ Availability = availability, LanguageCode = languageCode, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<OperatorResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<OperatorResource>.FromJson("operators", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<OperatorResource> NextPage(Page<OperatorResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<OperatorResource>.FromJson("operators", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<OperatorResource> PreviousPage(Page<OperatorResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<OperatorResource>.FromJson("operators", response.Content);
        }

    
        /// <summary>
        /// Converts a JSON string into a OperatorResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> OperatorResource object represented by the provided JSON </returns>
        public static OperatorResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<OperatorResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The unique SID identifier of the Account the Operator belongs to. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> A 34 character string that uniquely identifies this Operator. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> A human-readable name of this resource, up to 64 characters. </summary> 
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }

        ///<summary> A human-readable description of this resource, longer than the friendly name. </summary> 
        [JsonProperty("description")]
        public string Description { get; private set; }

        ///<summary> The creator of the Operator. Either Twilio or the creating Account. </summary> 
        [JsonProperty("author")]
        public string Author { get; private set; }

        ///<summary> Operator Type for this Operator. References an existing Operator Type resource. </summary> 
        [JsonProperty("operator_type")]
        public string OperatorType { get; private set; }

        ///<summary> Numeric Operator version. Incremented with each update on the resource, used to ensure integrity when updating the Operator. </summary> 
        [JsonProperty("version")]
        public int? Version { get; private set; }

        
        [JsonProperty("availability")]
        public OperatorResource.AvailabilityEnum Availability { get; private set; }

        ///<summary> Operator configuration, following the schema defined by the Operator Type. Only available on Custom Operators created by the Account. </summary> 
        [JsonProperty("config")]
        public object Config { get; private set; }

        ///<summary> The date that this Operator was created, given in ISO 8601 format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date that this Operator was updated, given in ISO 8601 format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The URL of this resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private OperatorResource() {

        }
    }
}

