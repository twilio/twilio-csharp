/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Verify.V2.Service
{
    public class NewChallengeResource : Resource
    {
    
        public class CreatePasskeysChallengeRequest
        {
            [JsonProperty("identity")]
            private string Identity {get; set;}
            [JsonProperty("factor_sid")]
            private string FactorSid {get; set;}
            public CreatePasskeysChallengeRequest() { }
            public class Builder
            {
                private CreatePasskeysChallengeRequest _createPasskeysChallengeRequest = new CreatePasskeysChallengeRequest();
                public Builder()
                {
                }
                public Builder WithIdentity(string identity)
                {
                    _createPasskeysChallengeRequest.Identity= identity;
                    return this;
                }
                public Builder WithFactorSid(string factorSid)
                {
                    _createPasskeysChallengeRequest.FactorSid= factorSid;
                    return this;
                }
                public CreatePasskeysChallengeRequest Build()
                {
                    return _createPasskeysChallengeRequest;
                }
            }
        }

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }
            public static readonly StatusEnum Pending = new StatusEnum("pending");
            public static readonly StatusEnum Expired = new StatusEnum("expired");
            public static readonly StatusEnum Approved = new StatusEnum("approved");
            public static readonly StatusEnum Denied = new StatusEnum("denied");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class RespondedReasonEnum : StringEnum
        {
            private RespondedReasonEnum(string value) : base(value) {}
            public RespondedReasonEnum() {}
            public static implicit operator RespondedReasonEnum(string value)
            {
                return new RespondedReasonEnum(value);
            }
            public static readonly RespondedReasonEnum None = new RespondedReasonEnum("none");
            public static readonly RespondedReasonEnum NotNeeded = new RespondedReasonEnum("not_needed");
            public static readonly RespondedReasonEnum NotRequested = new RespondedReasonEnum("not_requested");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class FactorTypeEnum : StringEnum
        {
            private FactorTypeEnum(string value) : base(value) {}
            public FactorTypeEnum() {}
            public static implicit operator FactorTypeEnum(string value)
            {
                return new FactorTypeEnum(value);
            }
            public static readonly FactorTypeEnum Push = new FactorTypeEnum("push");
            public static readonly FactorTypeEnum Totp = new FactorTypeEnum("totp");
            public static readonly FactorTypeEnum Passkeys = new FactorTypeEnum("passkeys");

        }

        
        private static Request BuildCreateRequest(CreateNewChallengeOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Services/{ServiceSid}/Passkeys/Challenges";

            string PathServiceSid = options.PathServiceSid;
            path = path.Replace("{"+"ServiceSid"+"}", PathServiceSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Verify,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Create a Passkeys Challenge </summary>
        /// <param name="options"> Create NewChallenge parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NewChallenge </returns>
        public static NewChallengeResource Create(CreateNewChallengeOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a Passkeys Challenge </summary>
        /// <param name="options"> Create NewChallenge parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NewChallenge </returns>
        public static async System.Threading.Tasks.Task<NewChallengeResource> CreateAsync(CreateNewChallengeOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a Passkeys Challenge </summary>
        /// <param name="pathServiceSid"> The unique SID identifier of the Service. </param>
        /// <param name="createPasskeysChallengeRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NewChallenge </returns>
        public static NewChallengeResource Create(
                                          string pathServiceSid,
                                          NewChallengeResource.CreatePasskeysChallengeRequest createPasskeysChallengeRequest,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateNewChallengeOptions(pathServiceSid, createPasskeysChallengeRequest){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a Passkeys Challenge </summary>
        /// <param name="pathServiceSid"> The unique SID identifier of the Service. </param>
        /// <param name="createPasskeysChallengeRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NewChallenge </returns>
        public static async System.Threading.Tasks.Task<NewChallengeResource> CreateAsync(
                                                                                  string pathServiceSid,
                                                                                  NewChallengeResource.CreatePasskeysChallengeRequest createPasskeysChallengeRequest,
                                                                                    ITwilioRestClient client = null)
        {
        var options = new CreateNewChallengeOptions(pathServiceSid, createPasskeysChallengeRequest){  };
            return await CreateAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a NewChallengeResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> NewChallengeResource object represented by the provided JSON </returns>
        public static NewChallengeResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<NewChallengeResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> An object that contains challenge options. Currently only used for `passkeys`. </summary> 
        [JsonProperty("options")]
        public object Options { get; private set; }

        ///<summary> A 34 character string that uniquely identifies this Challenge. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The unique SID identifier of the Account. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The unique SID identifier of the Service. </summary> 
        [JsonProperty("service_sid")]
        public string ServiceSid { get; private set; }

        ///<summary> The unique SID identifier of the Entity. </summary> 
        [JsonProperty("entity_sid")]
        public string EntitySid { get; private set; }

        ///<summary> Customer unique identity for the Entity owner of the Challenge. </summary> 
        [JsonProperty("identity")]
        public string Identity { get; private set; }

        ///<summary> The unique SID identifier of the Factor. </summary> 
        [JsonProperty("factor_sid")]
        public string FactorSid { get; private set; }

        ///<summary> The date that this Challenge was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date that this Challenge was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The date that this Challenge was responded, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_responded")]
        public DateTime? DateResponded { get; private set; }

        ///<summary> The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("expiration_date")]
        public DateTime? ExpirationDate { get; private set; }

        ///<summary> The Status of this Challenge. One of `pending`, `expired`, `approved` or `denied`. </summary> 
        [JsonProperty("status")]
        public NewChallengeResource.StatusEnum Status { get; private set; }

        ///<summary> Reason for the Challenge to be in certain `status`. One of `none`, `not_needed` or `not_requested`. </summary> 
        [JsonProperty("responded_reason")]
        public NewChallengeResource.RespondedReasonEnum RespondedReason { get; private set; }

        ///<summary> Details provided to give context about the Challenge. </summary> 
        [JsonProperty("details")]
        public object Details { get; private set; }

        ///<summary> Details provided to give context about the Challenge. </summary> 
        [JsonProperty("hidden_details")]
        public object HiddenDetails { get; private set; }

        ///<summary> Custom metadata associated with the challenge. </summary> 
        [JsonProperty("metadata")]
        public object Metadata { get; private set; }

        ///<summary> The Factor Type of this Challenge. Currently `push` and `totp` are supported. </summary> 
        [JsonProperty("factor_type")]
        public NewChallengeResource.FactorTypeEnum FactorType { get; private set; }

        ///<summary> The URL of this resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> Contains a dictionary of URL links to nested resources of this Challenge. </summary> 
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }



        private NewChallengeResource() {

        }
    }
}

