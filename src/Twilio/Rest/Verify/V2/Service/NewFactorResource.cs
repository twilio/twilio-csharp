/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Verify.V2.Service
{
    public class NewFactorResource : Resource
    {
    
        public class CreateNewPasskeysFactorRequestConfigRelyingParty
        {
            [JsonProperty("id")]
            private string Id {get; set;}
            [JsonProperty("name")]
            private string Name {get; set;}
            [JsonProperty("origins")]
            private List<string> Origins {get; set;}
            public CreateNewPasskeysFactorRequestConfigRelyingParty() { }
            public class Builder
            {
                private CreateNewPasskeysFactorRequestConfigRelyingParty _createNewPasskeysFactorRequestConfigRelyingParty = new CreateNewPasskeysFactorRequestConfigRelyingParty();
                public Builder()
                {
                }
                public Builder WithId(string id)
                {
                    _createNewPasskeysFactorRequestConfigRelyingParty.Id= id;
                    return this;
                }
                public Builder WithName(string name)
                {
                    _createNewPasskeysFactorRequestConfigRelyingParty.Name= name;
                    return this;
                }
                public Builder WithOrigins(List<string> origins)
                {
                    _createNewPasskeysFactorRequestConfigRelyingParty.Origins= origins;
                    return this;
                }
                public CreateNewPasskeysFactorRequestConfigRelyingParty Build()
                {
                    return _createNewPasskeysFactorRequestConfigRelyingParty;
                }
            }
        }
        public class CreateNewPasskeysFactorRequestConfig
        {
            [JsonProperty("relying_party")]
            private CreateNewPasskeysFactorRequestConfigRelyingParty RelyingParty {get; set;}
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("authenticator_attachment")]
            private NewFactorResource.AuthenticatorAttachmentEnum AuthenticatorAttachment {get; set;}
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("discoverable_credentials")]
            private NewFactorResource.DiscoverableCredentialsEnum DiscoverableCredentials {get; set;}
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("user_verification")]
            private NewFactorResource.UserVerificationEnum UserVerification {get; set;}
            public CreateNewPasskeysFactorRequestConfig() { }
            public class Builder
            {
                private CreateNewPasskeysFactorRequestConfig _createNewPasskeysFactorRequestConfig = new CreateNewPasskeysFactorRequestConfig();
                public Builder()
                {
                }
                public Builder WithRelyingParty(CreateNewPasskeysFactorRequestConfigRelyingParty relyingParty)
                {
                    _createNewPasskeysFactorRequestConfig.RelyingParty= relyingParty;
                    return this;
                }
                public Builder WithAuthenticatorAttachment(NewFactorResource.AuthenticatorAttachmentEnum authenticatorAttachment)
                {
                    _createNewPasskeysFactorRequestConfig.AuthenticatorAttachment= authenticatorAttachment;
                    return this;
                }
                public Builder WithDiscoverableCredentials(NewFactorResource.DiscoverableCredentialsEnum discoverableCredentials)
                {
                    _createNewPasskeysFactorRequestConfig.DiscoverableCredentials= discoverableCredentials;
                    return this;
                }
                public Builder WithUserVerification(NewFactorResource.UserVerificationEnum userVerification)
                {
                    _createNewPasskeysFactorRequestConfig.UserVerification= userVerification;
                    return this;
                }
                public CreateNewPasskeysFactorRequestConfig Build()
                {
                    return _createNewPasskeysFactorRequestConfig;
                }
            }
        }
        public class CreateNewPasskeysFactorRequest
        {
            [JsonProperty("friendly_name")]
            private string FriendlyName {get; set;}
            [JsonProperty("identity")]
            private string Identity {get; set;}
            [JsonProperty("config")]
            private CreateNewPasskeysFactorRequestConfig Config {get; set;}
            public CreateNewPasskeysFactorRequest() { }
            public class Builder
            {
                private CreateNewPasskeysFactorRequest _createNewPasskeysFactorRequest = new CreateNewPasskeysFactorRequest();
                public Builder()
                {
                }
                public Builder WithFriendlyName(string friendlyName)
                {
                    _createNewPasskeysFactorRequest.FriendlyName= friendlyName;
                    return this;
                }
                public Builder WithIdentity(string identity)
                {
                    _createNewPasskeysFactorRequest.Identity= identity;
                    return this;
                }
                public Builder WithConfig(CreateNewPasskeysFactorRequestConfig config)
                {
                    _createNewPasskeysFactorRequest.Config= config;
                    return this;
                }
                public CreateNewPasskeysFactorRequest Build()
                {
                    return _createNewPasskeysFactorRequest;
                }
            }
        }
        public class VerifyPasskeysFactorRequestResponse
        {
            [JsonProperty("attestationObject")]
            private string AttestationObject {get; set;}
            [JsonProperty("clientDataJSON")]
            private string ClientDataJSON {get; set;}
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("transports")]
            private List<NewFactorResource.TransportsEnum> Transports {get; set;}
            public VerifyPasskeysFactorRequestResponse() { }
            public class Builder
            {
                private VerifyPasskeysFactorRequestResponse _verifyPasskeysFactorRequestResponse = new VerifyPasskeysFactorRequestResponse();
                public Builder()
                {
                }
                public Builder WithAttestationObject(string attestationObject)
                {
                    _verifyPasskeysFactorRequestResponse.AttestationObject= attestationObject;
                    return this;
                }
                public Builder WithClientDataJSON(string clientDataJSON)
                {
                    _verifyPasskeysFactorRequestResponse.ClientDataJSON= clientDataJSON;
                    return this;
                }
                public Builder WithTransports(List<NewFactorResource.TransportsEnum> transports)
                {
                    _verifyPasskeysFactorRequestResponse.Transports= transports;
                    return this;
                }
                public VerifyPasskeysFactorRequestResponse Build()
                {
                    return _verifyPasskeysFactorRequestResponse;
                }
            }
        }
        public class VerifyPasskeysFactorRequest
        {
            [JsonProperty("id")]
            private string Id {get; set;}
            [JsonProperty("rawId")]
            private string RawId {get; set;}
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("authenticatorAttachment")]
            private NewFactorResource.AuthenticatorAttachmentEnum AuthenticatorAttachment {get; set;}
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("type")]
            private NewFactorResource.TypeEnum Type {get; set;}
            [JsonProperty("response")]
            private VerifyPasskeysFactorRequestResponse Response {get; set;}
            public VerifyPasskeysFactorRequest() { }
            public class Builder
            {
                private VerifyPasskeysFactorRequest _verifyPasskeysFactorRequest = new VerifyPasskeysFactorRequest();
                public Builder()
                {
                }
                public Builder WithId(string id)
                {
                    _verifyPasskeysFactorRequest.Id= id;
                    return this;
                }
                public Builder WithRawId(string rawId)
                {
                    _verifyPasskeysFactorRequest.RawId= rawId;
                    return this;
                }
                public Builder WithAuthenticatorAttachment(NewFactorResource.AuthenticatorAttachmentEnum authenticatorAttachment)
                {
                    _verifyPasskeysFactorRequest.AuthenticatorAttachment= authenticatorAttachment;
                    return this;
                }
                public Builder WithType(NewFactorResource.TypeEnum type)
                {
                    _verifyPasskeysFactorRequest.Type= type;
                    return this;
                }
                public Builder WithResponse(VerifyPasskeysFactorRequestResponse response)
                {
                    _verifyPasskeysFactorRequest.Response= response;
                    return this;
                }
                public VerifyPasskeysFactorRequest Build()
                {
                    return _verifyPasskeysFactorRequest;
                }
            }
        }

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }
            public static readonly StatusEnum Unverified = new StatusEnum("unverified");
            public static readonly StatusEnum Verified = new StatusEnum("verified");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class UserVerificationEnum : StringEnum
        {
            private UserVerificationEnum(string value) : base(value) {}
            public UserVerificationEnum() {}
            public static implicit operator UserVerificationEnum(string value)
            {
                return new UserVerificationEnum(value);
            }
            public static readonly UserVerificationEnum Required = new UserVerificationEnum("required");
            public static readonly UserVerificationEnum Preferred = new UserVerificationEnum("preferred");
            public static readonly UserVerificationEnum Discouraged = new UserVerificationEnum("discouraged");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class AuthenticatorAttachmentEnum : StringEnum
        {
            private AuthenticatorAttachmentEnum(string value) : base(value) {}
            public AuthenticatorAttachmentEnum() {}
            public static implicit operator AuthenticatorAttachmentEnum(string value)
            {
                return new AuthenticatorAttachmentEnum(value);
            }
            public static readonly AuthenticatorAttachmentEnum Platform = new AuthenticatorAttachmentEnum("platform");
            public static readonly AuthenticatorAttachmentEnum CrossPlatform = new AuthenticatorAttachmentEnum("cross-platform");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class TypeEnum : StringEnum
        {
            private TypeEnum(string value) : base(value) {}
            public TypeEnum() {}
            public static implicit operator TypeEnum(string value)
            {
                return new TypeEnum(value);
            }
            public static readonly TypeEnum PublicKey = new TypeEnum("public-key");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class TransportsEnum : StringEnum
        {
            private TransportsEnum(string value) : base(value) {}
            public TransportsEnum() {}
            public static implicit operator TransportsEnum(string value)
            {
                return new TransportsEnum(value);
            }

            public static readonly TransportsEnum Usb = new TransportsEnum("usb");
            public static readonly TransportsEnum Nfc = new TransportsEnum("nfc");
            public static readonly TransportsEnum Ble = new TransportsEnum("ble");
            public static readonly TransportsEnum SmartCard = new TransportsEnum("smart-card");
            public static readonly TransportsEnum Internal = new TransportsEnum("internal");
            public static readonly TransportsEnum Hybrid = new TransportsEnum("hybrid");
        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class FactorTypeEnum : StringEnum
        {
            private FactorTypeEnum(string value) : base(value) {}
            public FactorTypeEnum() {}
            public static implicit operator FactorTypeEnum(string value)
            {
                return new FactorTypeEnum(value);
            }
            public static readonly FactorTypeEnum Push = new FactorTypeEnum("push");
            public static readonly FactorTypeEnum Totp = new FactorTypeEnum("totp");
            public static readonly FactorTypeEnum Passkeys = new FactorTypeEnum("passkeys");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class DiscoverableCredentialsEnum : StringEnum
        {
            private DiscoverableCredentialsEnum(string value) : base(value) {}
            public DiscoverableCredentialsEnum() {}
            public static implicit operator DiscoverableCredentialsEnum(string value)
            {
                return new DiscoverableCredentialsEnum(value);
            }
            public static readonly DiscoverableCredentialsEnum Required = new DiscoverableCredentialsEnum("required");
            public static readonly DiscoverableCredentialsEnum Preferred = new DiscoverableCredentialsEnum("preferred");
            public static readonly DiscoverableCredentialsEnum Discouraged = new DiscoverableCredentialsEnum("discouraged");

        }

        
        private static Request BuildCreateRequest(CreateNewFactorOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Services/{ServiceSid}/Passkeys/Factors";

            string PathServiceSid = options.PathServiceSid;
            path = path.Replace("{"+"ServiceSid"+"}", PathServiceSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Verify,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Create a new Passkeys Factor for the Entity </summary>
        /// <param name="options"> Create NewFactor parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NewFactor </returns>
        public static NewFactorResource Create(CreateNewFactorOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a new Passkeys Factor for the Entity </summary>
        /// <param name="options"> Create NewFactor parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NewFactor </returns>
        public static async System.Threading.Tasks.Task<NewFactorResource> CreateAsync(CreateNewFactorOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a new Passkeys Factor for the Entity </summary>
        /// <param name="pathServiceSid"> The unique SID identifier of the Service. </param>
        /// <param name="createNewPasskeysFactorRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NewFactor </returns>
        public static NewFactorResource Create(
                                          string pathServiceSid,
                                          NewFactorResource.CreateNewPasskeysFactorRequest createNewPasskeysFactorRequest,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateNewFactorOptions(pathServiceSid, createNewPasskeysFactorRequest){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a new Passkeys Factor for the Entity </summary>
        /// <param name="pathServiceSid"> The unique SID identifier of the Service. </param>
        /// <param name="createNewPasskeysFactorRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NewFactor </returns>
        public static async System.Threading.Tasks.Task<NewFactorResource> CreateAsync(
                                                                                  string pathServiceSid,
                                                                                  NewFactorResource.CreateNewPasskeysFactorRequest createNewPasskeysFactorRequest,
                                                                                    ITwilioRestClient client = null)
        {
        var options = new CreateNewFactorOptions(pathServiceSid, createNewPasskeysFactorRequest){  };
            return await CreateAsync(options, client);
        }
        #endif
        
        private static Request BuildUpdateRequest(UpdateNewFactorOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Services/{ServiceSid}/Passkeys/VerifyFactor";

            string PathServiceSid = options.PathServiceSid;
            path = path.Replace("{"+"ServiceSid"+"}", PathServiceSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Verify,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Verify a Passkeys Factor </summary>
        /// <param name="options"> Update NewFactor parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NewFactor </returns>
        public static NewFactorResource Update(UpdateNewFactorOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Verify a Passkeys Factor </summary>
        /// <param name="options"> Update NewFactor parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NewFactor </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<NewFactorResource> UpdateAsync(UpdateNewFactorOptions options,
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Verify a Passkeys Factor </summary>
        /// <param name="pathServiceSid"> The unique SID identifier of the Service. </param>
        /// <param name="verifyPasskeysFactorRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NewFactor </returns>
        public static NewFactorResource Update(
                                          string pathServiceSid,
                                          NewFactorResource.VerifyPasskeysFactorRequest verifyPasskeysFactorRequest,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateNewFactorOptions(pathServiceSid, verifyPasskeysFactorRequest){  };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Verify a Passkeys Factor </summary>
        /// <param name="pathServiceSid"> The unique SID identifier of the Service. </param>
        /// <param name="verifyPasskeysFactorRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NewFactor </returns>
        public static async System.Threading.Tasks.Task<NewFactorResource> UpdateAsync(
                                                                              string pathServiceSid,
                                                                              NewFactorResource.VerifyPasskeysFactorRequest verifyPasskeysFactorRequest,
                                                                                ITwilioRestClient client = null)
        {
            var options = new UpdateNewFactorOptions(pathServiceSid, verifyPasskeysFactorRequest){  };
            return await UpdateAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a NewFactorResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> NewFactorResource object represented by the provided JSON </returns>
        public static NewFactorResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<NewFactorResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> A 34 character string that uniquely identifies this Factor. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The unique SID identifier of the Account. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The unique SID identifier of the Service. </summary> 
        [JsonProperty("service_sid")]
        public string ServiceSid { get; private set; }

        ///<summary> The unique SID identifier of the Entity. </summary> 
        [JsonProperty("entity_sid")]
        public string EntitySid { get; private set; }

        ///<summary> Customer unique identity for the Entity owner of the Factor. </summary> 
        [JsonProperty("identity")]
        public string Identity { get; private set; }

        ///<summary> Contains the `factor_type` specific secret and metadata. The Binding property is ONLY returned upon Factor creation. </summary> 
        [JsonProperty("binding")]
        public object Binding { get; private set; }

        ///<summary> The options </summary> 
        [JsonProperty("options")]
        public object Options { get; private set; }

        ///<summary> The date that this Factor was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date that this Factor was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors. </summary> 
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }

        ///<summary> The Status of this Factor. One of `unverified` or `verified`. </summary> 
        [JsonProperty("status")]
        public NewFactorResource.StatusEnum Status { get; private set; }

        ///<summary> The Type of this Factor. Currently `push` and `totp` are supported. </summary> 
        [JsonProperty("factor_type")]
        public NewFactorResource.FactorTypeEnum FactorType { get; private set; }

        ///<summary> An object that contains configurations specific to a `factor_type`. </summary> 
        [JsonProperty("config")]
        public object Config { get; private set; }

        ///<summary> Custom metadata associated with the factor. </summary> 
        [JsonProperty("metadata")]
        public object Metadata { get; private set; }

        ///<summary> The URL of this resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> A human readable description of this resource, up to 64 characters. </summary> 
        [JsonProperty("friendly_name")]
        public string _FriendlyName { get; private set; }

        ///<summary> The Type of this Factor. Currently `push` and `totp` are supported. </summary> 
        [JsonProperty("factor_type")]
        public NewFactorResource.FactorTypeEnum _FactorType { get; private set; }



        private NewFactorResource() {

        }
    }
}

