/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Verify.V2.Service
{

    /// <summary> Create a new enrollment Access Token for the Entity </summary>
    public class CreateAccessTokenOptions : IOptions<AccessTokenResource>
    {
        
        ///<summary> The unique SID identifier of the Service. </summary> 
        public string PathServiceSid { get; }

        ///<summary> The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID. </summary> 
        public string Identity { get; }

        
        public AccessTokenResource.FactorTypesEnum FactorType { get; }

        ///<summary> The friendly name of the factor that is going to be created with this access token </summary> 
        public string FactorFriendlyName { get; set; }

        ///<summary> How long, in seconds, the access token is valid. Can be an integer between 60 and 300. Default is 60. </summary> 
        public int? Ttl { get; set; }


        /// <summary> Construct a new CreateAccessTokenOptions </summary>
        /// <param name="pathServiceSid"> The unique SID identifier of the Service. </param>
        /// <param name="identity"> The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID. </param>
        /// <param name="factorType">  </param>
        public CreateAccessTokenOptions(string pathServiceSid, string identity, AccessTokenResource.FactorTypesEnum factorType)
        {
            PathServiceSid = pathServiceSid;
            Identity = identity;
            FactorType = factorType;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Identity != null)
            {
                p.Add(new KeyValuePair<string, string>("Identity", Identity));
            }
            if (FactorType != null)
            {
                p.Add(new KeyValuePair<string, string>("FactorType", FactorType.ToString()));
            }
            if (FactorFriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FactorFriendlyName", FactorFriendlyName));
            }
            if (Ttl != null)
            {
                p.Add(new KeyValuePair<string, string>("Ttl", Ttl.ToString()));
            }
            return p;
        }

        

    }
    /// <summary> Fetch an Access Token for the Entity </summary>
    public class FetchAccessTokenOptions : IOptions<AccessTokenResource>
    {
    
        ///<summary> The unique SID identifier of the Service. </summary> 
        public string PathServiceSid { get; }

        ///<summary> A 34 character string that uniquely identifies this Access Token. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchAccessTokenOptions </summary>
        /// <param name="pathServiceSid"> The unique SID identifier of the Service. </param>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Access Token. </param>
        public FetchAccessTokenOptions(string pathServiceSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


}

