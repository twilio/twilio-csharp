/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Verify.V2
{
    public class ServiceResource : Resource
    {
    

    

        
        private static Request BuildCreateRequest(CreateServiceOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Services";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Verify,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Create a new Verification Service. </summary>
        /// <param name="options"> Create Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Create(CreateServiceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a new Verification Service. </summary>
        /// <param name="options"> Create Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ServiceResource> CreateAsync(CreateServiceOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a new Verification Service. </summary>
        /// <param name="friendlyName"> A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** </param>
        /// <param name="codeLength"> The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. </param>
        /// <param name="lookupEnabled"> Whether to perform a lookup with each verification started and return info about the phone number. </param>
        /// <param name="skipSmsToLandlines"> Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`. </param>
        /// <param name="dtmfInputRequired"> Whether to ask the user to press a number before delivering the verify code in a phone call. </param>
        /// <param name="ttsName"> The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. </param>
        /// <param name="psd2Enabled"> Whether to pass PSD2 transaction parameters when starting a verification. </param>
        /// <param name="doNotShareWarningEnabled"> Whether to add a security warning at the end of an SMS verification body. Disabled by default and applies only to SMS. Example SMS body: `Your AppName verification code is: 1234. Don’t share this code with anyone; our employees will never ask for the code` </param>
        /// <param name="customCodeEnabled"> Whether to allow sending verifications with a custom code instead of a randomly generated one. </param>
        /// <param name="pushIncludeDate"> Optional configuration for the Push factors. If true, include the date in the Challenge's response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. This timestamp value is the same one as the one found in `date_created`, please use that one instead. </param>
        /// <param name="pushApnCredentialSid"> Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </param>
        /// <param name="pushFcmCredentialSid"> Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </param>
        /// <param name="totpIssuer"> Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. Defaults to the service friendly name if not provided. </param>
        /// <param name="totpTimeStep"> Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds </param>
        /// <param name="totpCodeLength"> Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 </param>
        /// <param name="totpSkew"> Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 </param>
        /// <param name="defaultTemplateSid"> The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. </param>
        /// <param name="whatsappMsgServiceSid"> The SID of the Messaging Service containing WhatsApp Sender(s) that Verify will use to send WhatsApp messages to your users. </param>
        /// <param name="whatsappFrom"> The number to use as the WhatsApp Sender that Verify will use to send WhatsApp messages to your users.This WhatsApp Sender must be associated with a Messaging Service SID. </param>
        /// <param name="verifyEventSubscriptionEnabled"> Whether to allow verifications from the service to reach the stream-events sinks if configured </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Create(
                                          string friendlyName,
                                          int? codeLength = null,
                                          bool? lookupEnabled = null,
                                          bool? skipSmsToLandlines = null,
                                          bool? dtmfInputRequired = null,
                                          string ttsName = null,
                                          bool? psd2Enabled = null,
                                          bool? doNotShareWarningEnabled = null,
                                          bool? customCodeEnabled = null,
                                          bool? pushIncludeDate = null,
                                          string pushApnCredentialSid = null,
                                          string pushFcmCredentialSid = null,
                                          string totpIssuer = null,
                                          int? totpTimeStep = null,
                                          int? totpCodeLength = null,
                                          int? totpSkew = null,
                                          string defaultTemplateSid = null,
                                          string whatsappMsgServiceSid = null,
                                          string whatsappFrom = null,
                                          bool? verifyEventSubscriptionEnabled = null,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateServiceOptions(friendlyName){  CodeLength = codeLength, LookupEnabled = lookupEnabled, SkipSmsToLandlines = skipSmsToLandlines, DtmfInputRequired = dtmfInputRequired, TtsName = ttsName, Psd2Enabled = psd2Enabled, DoNotShareWarningEnabled = doNotShareWarningEnabled, CustomCodeEnabled = customCodeEnabled, PushIncludeDate = pushIncludeDate, PushApnCredentialSid = pushApnCredentialSid, PushFcmCredentialSid = pushFcmCredentialSid, TotpIssuer = totpIssuer, TotpTimeStep = totpTimeStep, TotpCodeLength = totpCodeLength, TotpSkew = totpSkew, DefaultTemplateSid = defaultTemplateSid, WhatsappMsgServiceSid = whatsappMsgServiceSid, WhatsappFrom = whatsappFrom, VerifyEventSubscriptionEnabled = verifyEventSubscriptionEnabled };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a new Verification Service. </summary>
        /// <param name="friendlyName"> A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** </param>
        /// <param name="codeLength"> The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. </param>
        /// <param name="lookupEnabled"> Whether to perform a lookup with each verification started and return info about the phone number. </param>
        /// <param name="skipSmsToLandlines"> Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`. </param>
        /// <param name="dtmfInputRequired"> Whether to ask the user to press a number before delivering the verify code in a phone call. </param>
        /// <param name="ttsName"> The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. </param>
        /// <param name="psd2Enabled"> Whether to pass PSD2 transaction parameters when starting a verification. </param>
        /// <param name="doNotShareWarningEnabled"> Whether to add a security warning at the end of an SMS verification body. Disabled by default and applies only to SMS. Example SMS body: `Your AppName verification code is: 1234. Don’t share this code with anyone; our employees will never ask for the code` </param>
        /// <param name="customCodeEnabled"> Whether to allow sending verifications with a custom code instead of a randomly generated one. </param>
        /// <param name="pushIncludeDate"> Optional configuration for the Push factors. If true, include the date in the Challenge's response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. This timestamp value is the same one as the one found in `date_created`, please use that one instead. </param>
        /// <param name="pushApnCredentialSid"> Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </param>
        /// <param name="pushFcmCredentialSid"> Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </param>
        /// <param name="totpIssuer"> Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. Defaults to the service friendly name if not provided. </param>
        /// <param name="totpTimeStep"> Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds </param>
        /// <param name="totpCodeLength"> Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 </param>
        /// <param name="totpSkew"> Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 </param>
        /// <param name="defaultTemplateSid"> The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. </param>
        /// <param name="whatsappMsgServiceSid"> The SID of the Messaging Service containing WhatsApp Sender(s) that Verify will use to send WhatsApp messages to your users. </param>
        /// <param name="whatsappFrom"> The number to use as the WhatsApp Sender that Verify will use to send WhatsApp messages to your users.This WhatsApp Sender must be associated with a Messaging Service SID. </param>
        /// <param name="verifyEventSubscriptionEnabled"> Whether to allow verifications from the service to reach the stream-events sinks if configured </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ServiceResource> CreateAsync(
                                                                                  string friendlyName,
                                                                                  int? codeLength = null,
                                                                                  bool? lookupEnabled = null,
                                                                                  bool? skipSmsToLandlines = null,
                                                                                  bool? dtmfInputRequired = null,
                                                                                  string ttsName = null,
                                                                                  bool? psd2Enabled = null,
                                                                                  bool? doNotShareWarningEnabled = null,
                                                                                  bool? customCodeEnabled = null,
                                                                                  bool? pushIncludeDate = null,
                                                                                  string pushApnCredentialSid = null,
                                                                                  string pushFcmCredentialSid = null,
                                                                                  string totpIssuer = null,
                                                                                  int? totpTimeStep = null,
                                                                                  int? totpCodeLength = null,
                                                                                  int? totpSkew = null,
                                                                                  string defaultTemplateSid = null,
                                                                                  string whatsappMsgServiceSid = null,
                                                                                  string whatsappFrom = null,
                                                                                  bool? verifyEventSubscriptionEnabled = null,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateServiceOptions(friendlyName){  CodeLength = codeLength, LookupEnabled = lookupEnabled, SkipSmsToLandlines = skipSmsToLandlines, DtmfInputRequired = dtmfInputRequired, TtsName = ttsName, Psd2Enabled = psd2Enabled, DoNotShareWarningEnabled = doNotShareWarningEnabled, CustomCodeEnabled = customCodeEnabled, PushIncludeDate = pushIncludeDate, PushApnCredentialSid = pushApnCredentialSid, PushFcmCredentialSid = pushFcmCredentialSid, TotpIssuer = totpIssuer, TotpTimeStep = totpTimeStep, TotpCodeLength = totpCodeLength, TotpSkew = totpSkew, DefaultTemplateSid = defaultTemplateSid, WhatsappMsgServiceSid = whatsappMsgServiceSid, WhatsappFrom = whatsappFrom, VerifyEventSubscriptionEnabled = verifyEventSubscriptionEnabled };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        /// <summary> Delete a specific Verification Service Instance. </summary>
        /// <param name="options"> Delete Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        private static Request BuildDeleteRequest(DeleteServiceOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Services/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Verify,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Delete a specific Verification Service Instance. </summary>
        /// <param name="options"> Delete Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static bool Delete(DeleteServiceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> Delete a specific Verification Service Instance. </summary>
        /// <param name="options"> Delete Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteServiceOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> Delete a specific Verification Service Instance. </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Verification Service resource to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static bool Delete(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteServiceOptions(pathSid)     ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> Delete a specific Verification Service Instance. </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Verification Service resource to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteServiceOptions(pathSid) ;
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchServiceOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Services/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Verify,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch specific Verification Service Instance. </summary>
        /// <param name="options"> Fetch Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Fetch(FetchServiceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Fetch specific Verification Service Instance. </summary>
        /// <param name="options"> Fetch Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ServiceResource> FetchAsync(FetchServiceOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Fetch specific Verification Service Instance. </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Verification Service resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Fetch(
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchServiceOptions(pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Fetch specific Verification Service Instance. </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Verification Service resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ServiceResource> FetchAsync(string pathSid, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchServiceOptions(pathSid){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadServiceOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Services";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Verify,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> Retrieve a list of all Verification Services for an account. </summary>
        /// <param name="options"> Read Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ResourceSet<ServiceResource> Read(ReadServiceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<ServiceResource>.FromJson("services", response.Content);
            return new ResourceSet<ServiceResource>(page, options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of all Verification Services for an account. </summary>
        /// <param name="options"> Read Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ServiceResource>> ReadAsync(ReadServiceOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<ServiceResource>.FromJson("services", response.Content);
            return new ResourceSet<ServiceResource>(page, options, client);
        }
        #endif
        /// <summary> Retrieve a list of all Verification Services for an account. </summary>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ResourceSet<ServiceResource> Read(
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadServiceOptions(){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of all Verification Services for an account. </summary>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ServiceResource>> ReadAsync(
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadServiceOptions(){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<ServiceResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<ServiceResource>.FromJson("services", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<ServiceResource> NextPage(Page<ServiceResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ServiceResource>.FromJson("services", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<ServiceResource> PreviousPage(Page<ServiceResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ServiceResource>.FromJson("services", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateServiceOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Services/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Verify,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Update a specific Verification Service. </summary>
        /// <param name="options"> Update Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Update(UpdateServiceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update a specific Verification Service. </summary>
        /// <param name="options"> Update Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<ServiceResource> UpdateAsync(UpdateServiceOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Update a specific Verification Service. </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Service resource to update. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** </param>
        /// <param name="codeLength"> The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. </param>
        /// <param name="lookupEnabled"> Whether to perform a lookup with each verification started and return info about the phone number. </param>
        /// <param name="skipSmsToLandlines"> Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`. </param>
        /// <param name="dtmfInputRequired"> Whether to ask the user to press a number before delivering the verify code in a phone call. </param>
        /// <param name="ttsName"> The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. </param>
        /// <param name="psd2Enabled"> Whether to pass PSD2 transaction parameters when starting a verification. </param>
        /// <param name="doNotShareWarningEnabled"> Whether to add a privacy warning at the end of an SMS. **Disabled by default and applies only for SMS.** </param>
        /// <param name="customCodeEnabled"> Whether to allow sending verifications with a custom code instead of a randomly generated one. </param>
        /// <param name="pushIncludeDate"> Optional configuration for the Push factors. If true, include the date in the Challenge's response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. </param>
        /// <param name="pushApnCredentialSid"> Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </param>
        /// <param name="pushFcmCredentialSid"> Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </param>
        /// <param name="totpIssuer"> Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. </param>
        /// <param name="totpTimeStep"> Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds </param>
        /// <param name="totpCodeLength"> Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 </param>
        /// <param name="totpSkew"> Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 </param>
        /// <param name="defaultTemplateSid"> The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. </param>
        /// <param name="whatsappMsgServiceSid"> The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services) to associate with the Verification Service. </param>
        /// <param name="whatsappFrom"> The WhatsApp number to use as the sender of the verification messages. This number must be associated with the WhatsApp Message Service. </param>
        /// <param name="verifyEventSubscriptionEnabled"> Whether to allow verifications from the service to reach the stream-events sinks if configured </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Update(
                                          string pathSid,
                                          string friendlyName = null,
                                          int? codeLength = null,
                                          bool? lookupEnabled = null,
                                          bool? skipSmsToLandlines = null,
                                          bool? dtmfInputRequired = null,
                                          string ttsName = null,
                                          bool? psd2Enabled = null,
                                          bool? doNotShareWarningEnabled = null,
                                          bool? customCodeEnabled = null,
                                          bool? pushIncludeDate = null,
                                          string pushApnCredentialSid = null,
                                          string pushFcmCredentialSid = null,
                                          string totpIssuer = null,
                                          int? totpTimeStep = null,
                                          int? totpCodeLength = null,
                                          int? totpSkew = null,
                                          string defaultTemplateSid = null,
                                          string whatsappMsgServiceSid = null,
                                          string whatsappFrom = null,
                                          bool? verifyEventSubscriptionEnabled = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateServiceOptions(pathSid){ FriendlyName = friendlyName, CodeLength = codeLength, LookupEnabled = lookupEnabled, SkipSmsToLandlines = skipSmsToLandlines, DtmfInputRequired = dtmfInputRequired, TtsName = ttsName, Psd2Enabled = psd2Enabled, DoNotShareWarningEnabled = doNotShareWarningEnabled, CustomCodeEnabled = customCodeEnabled, PushIncludeDate = pushIncludeDate, PushApnCredentialSid = pushApnCredentialSid, PushFcmCredentialSid = pushFcmCredentialSid, TotpIssuer = totpIssuer, TotpTimeStep = totpTimeStep, TotpCodeLength = totpCodeLength, TotpSkew = totpSkew, DefaultTemplateSid = defaultTemplateSid, WhatsappMsgServiceSid = whatsappMsgServiceSid, WhatsappFrom = whatsappFrom, VerifyEventSubscriptionEnabled = verifyEventSubscriptionEnabled };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Update a specific Verification Service. </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Service resource to update. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** </param>
        /// <param name="codeLength"> The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. </param>
        /// <param name="lookupEnabled"> Whether to perform a lookup with each verification started and return info about the phone number. </param>
        /// <param name="skipSmsToLandlines"> Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`. </param>
        /// <param name="dtmfInputRequired"> Whether to ask the user to press a number before delivering the verify code in a phone call. </param>
        /// <param name="ttsName"> The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. </param>
        /// <param name="psd2Enabled"> Whether to pass PSD2 transaction parameters when starting a verification. </param>
        /// <param name="doNotShareWarningEnabled"> Whether to add a privacy warning at the end of an SMS. **Disabled by default and applies only for SMS.** </param>
        /// <param name="customCodeEnabled"> Whether to allow sending verifications with a custom code instead of a randomly generated one. </param>
        /// <param name="pushIncludeDate"> Optional configuration for the Push factors. If true, include the date in the Challenge's response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. </param>
        /// <param name="pushApnCredentialSid"> Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </param>
        /// <param name="pushFcmCredentialSid"> Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </param>
        /// <param name="totpIssuer"> Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. </param>
        /// <param name="totpTimeStep"> Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds </param>
        /// <param name="totpCodeLength"> Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 </param>
        /// <param name="totpSkew"> Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 </param>
        /// <param name="defaultTemplateSid"> The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. </param>
        /// <param name="whatsappMsgServiceSid"> The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services) to associate with the Verification Service. </param>
        /// <param name="whatsappFrom"> The WhatsApp number to use as the sender of the verification messages. This number must be associated with the WhatsApp Message Service. </param>
        /// <param name="verifyEventSubscriptionEnabled"> Whether to allow verifications from the service to reach the stream-events sinks if configured </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ServiceResource> UpdateAsync(
                                                                              string pathSid,
                                                                              string friendlyName = null,
                                                                              int? codeLength = null,
                                                                              bool? lookupEnabled = null,
                                                                              bool? skipSmsToLandlines = null,
                                                                              bool? dtmfInputRequired = null,
                                                                              string ttsName = null,
                                                                              bool? psd2Enabled = null,
                                                                              bool? doNotShareWarningEnabled = null,
                                                                              bool? customCodeEnabled = null,
                                                                              bool? pushIncludeDate = null,
                                                                              string pushApnCredentialSid = null,
                                                                              string pushFcmCredentialSid = null,
                                                                              string totpIssuer = null,
                                                                              int? totpTimeStep = null,
                                                                              int? totpCodeLength = null,
                                                                              int? totpSkew = null,
                                                                              string defaultTemplateSid = null,
                                                                              string whatsappMsgServiceSid = null,
                                                                              string whatsappFrom = null,
                                                                              bool? verifyEventSubscriptionEnabled = null,
                                                                                ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateServiceOptions(pathSid){ FriendlyName = friendlyName, CodeLength = codeLength, LookupEnabled = lookupEnabled, SkipSmsToLandlines = skipSmsToLandlines, DtmfInputRequired = dtmfInputRequired, TtsName = ttsName, Psd2Enabled = psd2Enabled, DoNotShareWarningEnabled = doNotShareWarningEnabled, CustomCodeEnabled = customCodeEnabled, PushIncludeDate = pushIncludeDate, PushApnCredentialSid = pushApnCredentialSid, PushFcmCredentialSid = pushFcmCredentialSid, TotpIssuer = totpIssuer, TotpTimeStep = totpTimeStep, TotpCodeLength = totpCodeLength, TotpSkew = totpSkew, DefaultTemplateSid = defaultTemplateSid, WhatsappMsgServiceSid = whatsappMsgServiceSid, WhatsappFrom = whatsappFrom, VerifyEventSubscriptionEnabled = verifyEventSubscriptionEnabled };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ServiceResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ServiceResource object represented by the provided JSON </returns>
        public static ServiceResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ServiceResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The unique string that we created to identify the Service resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Service resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The name that appears in the body of your verification messages. It can be up to 30 characters long and can include letters, numbers, spaces, dashes, underscores. Phone numbers, special characters or links are NOT allowed. **This value should not contain PII.** </summary> 
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }

        ///<summary> The length of the verification code to generate. </summary> 
        [JsonProperty("code_length")]
        public int? CodeLength { get; private set; }

        ///<summary> Whether to perform a lookup with each verification started and return info about the phone number. </summary> 
        [JsonProperty("lookup_enabled")]
        public bool? LookupEnabled { get; private set; }

        ///<summary> Whether to pass PSD2 transaction parameters when starting a verification. </summary> 
        [JsonProperty("psd2_enabled")]
        public bool? Psd2Enabled { get; private set; }

        ///<summary> Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`. </summary> 
        [JsonProperty("skip_sms_to_landlines")]
        public bool? SkipSmsToLandlines { get; private set; }

        ///<summary> Whether to ask the user to press a number before delivering the verify code in a phone call. </summary> 
        [JsonProperty("dtmf_input_required")]
        public bool? DtmfInputRequired { get; private set; }

        ///<summary> The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. </summary> 
        [JsonProperty("tts_name")]
        public string TtsName { get; private set; }

        ///<summary> Whether to add a security warning at the end of an SMS verification body. Disabled by default and applies only to SMS. Example SMS body: `Your AppName verification code is: 1234. Don’t share this code with anyone; our employees will never ask for the code` </summary> 
        [JsonProperty("do_not_share_warning_enabled")]
        public bool? DoNotShareWarningEnabled { get; private set; }

        ///<summary> Whether to allow sending verifications with a custom code instead of a randomly generated one. </summary> 
        [JsonProperty("custom_code_enabled")]
        public bool? CustomCodeEnabled { get; private set; }

        ///<summary> Configurations for the Push factors (channel) created under this Service. </summary> 
        [JsonProperty("push")]
        public object Push { get; private set; }

        ///<summary> Configurations for the TOTP factors (channel) created under this Service. </summary> 
        [JsonProperty("totp")]
        public object Totp { get; private set; }

        ///<summary> The default_template_sid </summary> 
        [JsonProperty("default_template_sid")]
        public string DefaultTemplateSid { get; private set; }

        ///<summary> The whatsapp </summary> 
        [JsonProperty("whatsapp")]
        public object Whatsapp { get; private set; }

        ///<summary> Whether to allow verifications from the service to reach the stream-events sinks if configured </summary> 
        [JsonProperty("verify_event_subscription_enabled")]
        public bool? VerifyEventSubscriptionEnabled { get; private set; }

        ///<summary> The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The absolute URL of the resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> The URLs of related resources. </summary> 
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }



        private ServiceResource() {

        }
    }
}

