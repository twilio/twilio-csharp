/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Verify.V2
{

    /// <summary> Create a new Verification Service. </summary>
    public class CreateServiceOptions : IOptions<ServiceResource>
    {
        
        ///<summary> A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** </summary> 
        public string FriendlyName { get; }

        ///<summary> The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. </summary> 
        public int? CodeLength { get; set; }

        ///<summary> Whether to perform a lookup with each verification started and return info about the phone number. </summary> 
        public bool? LookupEnabled { get; set; }

        ///<summary> Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`. </summary> 
        public bool? SkipSmsToLandlines { get; set; }

        ///<summary> Whether to ask the user to press a number before delivering the verify code in a phone call. </summary> 
        public bool? DtmfInputRequired { get; set; }

        ///<summary> The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. </summary> 
        public string TtsName { get; set; }

        ///<summary> Whether to pass PSD2 transaction parameters when starting a verification. </summary> 
        public bool? Psd2Enabled { get; set; }

        ///<summary> Whether to add a security warning at the end of an SMS verification body. Disabled by default and applies only to SMS. Example SMS body: `Your AppName verification code is: 1234. Don’t share this code with anyone; our employees will never ask for the code` </summary> 
        public bool? DoNotShareWarningEnabled { get; set; }

        ///<summary> Whether to allow sending verifications with a custom code instead of a randomly generated one. </summary> 
        public bool? CustomCodeEnabled { get; set; }

        ///<summary> Optional configuration for the Push factors. If true, include the date in the Challenge's response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. This timestamp value is the same one as the one found in `date_created`, please use that one instead. </summary> 
        public bool? PushIncludeDate { get; set; }

        ///<summary> Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </summary> 
        public string PushApnCredentialSid { get; set; }

        ///<summary> Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </summary> 
        public string PushFcmCredentialSid { get; set; }

        ///<summary> Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. Defaults to the service friendly name if not provided. </summary> 
        public string TotpIssuer { get; set; }

        ///<summary> Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds </summary> 
        public int? TotpTimeStep { get; set; }

        ///<summary> Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 </summary> 
        public int? TotpCodeLength { get; set; }

        ///<summary> Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 </summary> 
        public int? TotpSkew { get; set; }

        ///<summary> The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. </summary> 
        public string DefaultTemplateSid { get; set; }

        ///<summary> The SID of the Messaging Service containing WhatsApp Sender(s) that Verify will use to send WhatsApp messages to your users. </summary> 
        public string WhatsappMsgServiceSid { get; set; }

        ///<summary> The number to use as the WhatsApp Sender that Verify will use to send WhatsApp messages to your users.This WhatsApp Sender must be associated with a Messaging Service SID. </summary> 
        public string WhatsappFrom { get; set; }

        ///<summary> Whether to allow verifications from the service to reach the stream-events sinks if configured </summary> 
        public bool? VerifyEventSubscriptionEnabled { get; set; }


        /// <summary> Construct a new CreateServiceOptions </summary>
        /// <param name="friendlyName"> A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** </param>
        public CreateServiceOptions(string friendlyName)
        {
            FriendlyName = friendlyName;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (CodeLength != null)
            {
                p.Add(new KeyValuePair<string, string>("CodeLength", CodeLength.ToString()));
            }
            if (LookupEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("LookupEnabled", LookupEnabled.Value.ToString().ToLower()));
            }
            if (SkipSmsToLandlines != null)
            {
                p.Add(new KeyValuePair<string, string>("SkipSmsToLandlines", SkipSmsToLandlines.Value.ToString().ToLower()));
            }
            if (DtmfInputRequired != null)
            {
                p.Add(new KeyValuePair<string, string>("DtmfInputRequired", DtmfInputRequired.Value.ToString().ToLower()));
            }
            if (TtsName != null)
            {
                p.Add(new KeyValuePair<string, string>("TtsName", TtsName));
            }
            if (Psd2Enabled != null)
            {
                p.Add(new KeyValuePair<string, string>("Psd2Enabled", Psd2Enabled.Value.ToString().ToLower()));
            }
            if (DoNotShareWarningEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("DoNotShareWarningEnabled", DoNotShareWarningEnabled.Value.ToString().ToLower()));
            }
            if (CustomCodeEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("CustomCodeEnabled", CustomCodeEnabled.Value.ToString().ToLower()));
            }
            if (PushIncludeDate != null)
            {
                p.Add(new KeyValuePair<string, string>("Push.IncludeDate", PushIncludeDate.Value.ToString().ToLower()));
            }
            if (PushApnCredentialSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Push.ApnCredentialSid", PushApnCredentialSid));
            }
            if (PushFcmCredentialSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Push.FcmCredentialSid", PushFcmCredentialSid));
            }
            if (TotpIssuer != null)
            {
                p.Add(new KeyValuePair<string, string>("Totp.Issuer", TotpIssuer));
            }
            if (TotpTimeStep != null)
            {
                p.Add(new KeyValuePair<string, string>("Totp.TimeStep", TotpTimeStep.ToString()));
            }
            if (TotpCodeLength != null)
            {
                p.Add(new KeyValuePair<string, string>("Totp.CodeLength", TotpCodeLength.ToString()));
            }
            if (TotpSkew != null)
            {
                p.Add(new KeyValuePair<string, string>("Totp.Skew", TotpSkew.ToString()));
            }
            if (DefaultTemplateSid != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultTemplateSid", DefaultTemplateSid));
            }
            if (WhatsappMsgServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Whatsapp.MsgServiceSid", WhatsappMsgServiceSid));
            }
            if (WhatsappFrom != null)
            {
                p.Add(new KeyValuePair<string, string>("Whatsapp.From", WhatsappFrom));
            }
            if (VerifyEventSubscriptionEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("VerifyEventSubscriptionEnabled", VerifyEventSubscriptionEnabled.Value.ToString().ToLower()));
            }
            return p;
        }

        

    }
    /// <summary> Delete a specific Verification Service Instance. </summary>
    public class DeleteServiceOptions : IOptions<ServiceResource>
    {
        
        ///<summary> The Twilio-provided string that uniquely identifies the Verification Service resource to delete. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteServiceOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Verification Service resource to delete. </param>
        public DeleteServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Fetch specific Verification Service Instance. </summary>
    public class FetchServiceOptions : IOptions<ServiceResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the Verification Service resource to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchServiceOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Verification Service resource to fetch. </param>
        public FetchServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a list of all Verification Services for an account. </summary>
    public class ReadServiceOptions : ReadOptions<ServiceResource>
    {
    



        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> Update a specific Verification Service. </summary>
    public class UpdateServiceOptions : IOptions<ServiceResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the Service resource to update. </summary> 
        public string PathSid { get; }

        ///<summary> A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** </summary> 
        public string FriendlyName { get; set; }

        ///<summary> The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. </summary> 
        public int? CodeLength { get; set; }

        ///<summary> Whether to perform a lookup with each verification started and return info about the phone number. </summary> 
        public bool? LookupEnabled { get; set; }

        ///<summary> Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`. </summary> 
        public bool? SkipSmsToLandlines { get; set; }

        ///<summary> Whether to ask the user to press a number before delivering the verify code in a phone call. </summary> 
        public bool? DtmfInputRequired { get; set; }

        ///<summary> The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. </summary> 
        public string TtsName { get; set; }

        ///<summary> Whether to pass PSD2 transaction parameters when starting a verification. </summary> 
        public bool? Psd2Enabled { get; set; }

        ///<summary> Whether to add a privacy warning at the end of an SMS. **Disabled by default and applies only for SMS.** </summary> 
        public bool? DoNotShareWarningEnabled { get; set; }

        ///<summary> Whether to allow sending verifications with a custom code instead of a randomly generated one. </summary> 
        public bool? CustomCodeEnabled { get; set; }

        ///<summary> Optional configuration for the Push factors. If true, include the date in the Challenge's response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. </summary> 
        public bool? PushIncludeDate { get; set; }

        ///<summary> Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </summary> 
        public string PushApnCredentialSid { get; set; }

        ///<summary> Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) </summary> 
        public string PushFcmCredentialSid { get; set; }

        ///<summary> Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. </summary> 
        public string TotpIssuer { get; set; }

        ///<summary> Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds </summary> 
        public int? TotpTimeStep { get; set; }

        ///<summary> Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 </summary> 
        public int? TotpCodeLength { get; set; }

        ///<summary> Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 </summary> 
        public int? TotpSkew { get; set; }

        ///<summary> The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. </summary> 
        public string DefaultTemplateSid { get; set; }

        ///<summary> The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services) to associate with the Verification Service. </summary> 
        public string WhatsappMsgServiceSid { get; set; }

        ///<summary> The WhatsApp number to use as the sender of the verification messages. This number must be associated with the WhatsApp Message Service. </summary> 
        public string WhatsappFrom { get; set; }

        ///<summary> Whether to allow verifications from the service to reach the stream-events sinks if configured </summary> 
        public bool? VerifyEventSubscriptionEnabled { get; set; }



        /// <summary> Construct a new UpdateServiceOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Service resource to update. </param>
        public UpdateServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (CodeLength != null)
            {
                p.Add(new KeyValuePair<string, string>("CodeLength", CodeLength.ToString()));
            }
            if (LookupEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("LookupEnabled", LookupEnabled.Value.ToString().ToLower()));
            }
            if (SkipSmsToLandlines != null)
            {
                p.Add(new KeyValuePair<string, string>("SkipSmsToLandlines", SkipSmsToLandlines.Value.ToString().ToLower()));
            }
            if (DtmfInputRequired != null)
            {
                p.Add(new KeyValuePair<string, string>("DtmfInputRequired", DtmfInputRequired.Value.ToString().ToLower()));
            }
            if (TtsName != null)
            {
                p.Add(new KeyValuePair<string, string>("TtsName", TtsName));
            }
            if (Psd2Enabled != null)
            {
                p.Add(new KeyValuePair<string, string>("Psd2Enabled", Psd2Enabled.Value.ToString().ToLower()));
            }
            if (DoNotShareWarningEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("DoNotShareWarningEnabled", DoNotShareWarningEnabled.Value.ToString().ToLower()));
            }
            if (CustomCodeEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("CustomCodeEnabled", CustomCodeEnabled.Value.ToString().ToLower()));
            }
            if (PushIncludeDate != null)
            {
                p.Add(new KeyValuePair<string, string>("Push.IncludeDate", PushIncludeDate.Value.ToString().ToLower()));
            }
            if (PushApnCredentialSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Push.ApnCredentialSid", PushApnCredentialSid));
            }
            if (PushFcmCredentialSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Push.FcmCredentialSid", PushFcmCredentialSid));
            }
            if (TotpIssuer != null)
            {
                p.Add(new KeyValuePair<string, string>("Totp.Issuer", TotpIssuer));
            }
            if (TotpTimeStep != null)
            {
                p.Add(new KeyValuePair<string, string>("Totp.TimeStep", TotpTimeStep.ToString()));
            }
            if (TotpCodeLength != null)
            {
                p.Add(new KeyValuePair<string, string>("Totp.CodeLength", TotpCodeLength.ToString()));
            }
            if (TotpSkew != null)
            {
                p.Add(new KeyValuePair<string, string>("Totp.Skew", TotpSkew.ToString()));
            }
            if (DefaultTemplateSid != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultTemplateSid", DefaultTemplateSid));
            }
            if (WhatsappMsgServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Whatsapp.MsgServiceSid", WhatsappMsgServiceSid));
            }
            if (WhatsappFrom != null)
            {
                p.Add(new KeyValuePair<string, string>("Whatsapp.From", WhatsappFrom));
            }
            if (VerifyEventSubscriptionEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("VerifyEventSubscriptionEnabled", VerifyEventSubscriptionEnabled.Value.ToString().ToLower()));
            }
            return p;
        }

        

    }


}

