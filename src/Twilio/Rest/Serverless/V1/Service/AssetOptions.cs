/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Serverless.V1.Service
{

    /// <summary> Create a new Asset resource. </summary>
    public class CreateAssetOptions : IOptions<AssetResource>
    {
        
        ///<summary> The SID of the Service to create the Asset resource under. </summary> 
        public string PathServiceSid { get; }

        ///<summary> A descriptive string that you create to describe the Asset resource. It can be a maximum of 255 characters. </summary> 
        public string FriendlyName { get; }


        /// <summary> Construct a new CreateAssetOptions </summary>
        /// <param name="pathServiceSid"> The SID of the Service to create the Asset resource under. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the Asset resource. It can be a maximum of 255 characters. </param>
        public CreateAssetOptions(string pathServiceSid, string friendlyName)
        {
            PathServiceSid = pathServiceSid;
            FriendlyName = friendlyName;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            return p;
        }

        

    }
    /// <summary> Delete an Asset resource. </summary>
    public class DeleteAssetOptions : IOptions<AssetResource>
    {
        
        ///<summary> The SID of the Service to delete the Asset resource from. </summary> 
        public string PathServiceSid { get; }

        ///<summary> The SID that identifies the Asset resource to delete. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteAssetOptions </summary>
        /// <param name="pathServiceSid"> The SID of the Service to delete the Asset resource from. </param>
        /// <param name="pathSid"> The SID that identifies the Asset resource to delete. </param>
        public DeleteAssetOptions(string pathServiceSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a specific Asset resource. </summary>
    public class FetchAssetOptions : IOptions<AssetResource>
    {
    
        ///<summary> The SID of the Service to fetch the Asset resource from. </summary> 
        public string PathServiceSid { get; }

        ///<summary> The SID that identifies the Asset resource to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchAssetOptions </summary>
        /// <param name="pathServiceSid"> The SID of the Service to fetch the Asset resource from. </param>
        /// <param name="pathSid"> The SID that identifies the Asset resource to fetch. </param>
        public FetchAssetOptions(string pathServiceSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a list of all Assets. </summary>
    public class ReadAssetOptions : ReadOptions<AssetResource>
    {
    
        ///<summary> The SID of the Service to read the Asset resources from. </summary> 
        public string PathServiceSid { get; }



        /// <summary> Construct a new ListAssetOptions </summary>
        /// <param name="pathServiceSid"> The SID of the Service to read the Asset resources from. </param>
        public ReadAssetOptions(string pathServiceSid)
        {
            PathServiceSid = pathServiceSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> Update a specific Asset resource. </summary>
    public class UpdateAssetOptions : IOptions<AssetResource>
    {
    
        ///<summary> The SID of the Service to update the Asset resource from. </summary> 
        public string PathServiceSid { get; }

        ///<summary> The SID that identifies the Asset resource to update. </summary> 
        public string PathSid { get; }

        ///<summary> A descriptive string that you create to describe the Asset resource. It can be a maximum of 255 characters. </summary> 
        public string FriendlyName { get; }



        /// <summary> Construct a new UpdateAssetOptions </summary>
        /// <param name="pathServiceSid"> The SID of the Service to update the Asset resource from. </param>
        /// <param name="pathSid"> The SID that identifies the Asset resource to update. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the Asset resource. It can be a maximum of 255 characters. </param>
        public UpdateAssetOptions(string pathServiceSid, string pathSid, string friendlyName)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
            FriendlyName = friendlyName;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            return p;
        }

        

    }


}

