/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Serverless.V1.Service
{

    /// <summary> Create a new environment. </summary>
    public class CreateEnvironmentOptions : IOptions<EnvironmentResource>
    {
        
        ///<summary> The SID of the Service to create the Environment resource under. </summary> 
        public string PathServiceSid { get; }

        ///<summary> A user-defined string that uniquely identifies the Environment resource. It can be a maximum of 100 characters. </summary> 
        public string UniqueName { get; }

        ///<summary> A URL-friendly name that represents the environment and forms part of the domain name. It can be a maximum of 16 characters. </summary> 
        public string DomainSuffix { get; set; }


        /// <summary> Construct a new CreateEnvironmentOptions </summary>
        /// <param name="pathServiceSid"> The SID of the Service to create the Environment resource under. </param>
        /// <param name="uniqueName"> A user-defined string that uniquely identifies the Environment resource. It can be a maximum of 100 characters. </param>
        public CreateEnvironmentOptions(string pathServiceSid, string uniqueName)
        {
            PathServiceSid = pathServiceSid;
            UniqueName = uniqueName;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }
            if (DomainSuffix != null)
            {
                p.Add(new KeyValuePair<string, string>("DomainSuffix", DomainSuffix));
            }
            return p;
        }

        

    }
    /// <summary> Delete a specific environment. </summary>
    public class DeleteEnvironmentOptions : IOptions<EnvironmentResource>
    {
        
        ///<summary> The SID of the Service to delete the Environment resource from. </summary> 
        public string PathServiceSid { get; }

        ///<summary> The SID of the Environment resource to delete. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteEnvironmentOptions </summary>
        /// <param name="pathServiceSid"> The SID of the Service to delete the Environment resource from. </param>
        /// <param name="pathSid"> The SID of the Environment resource to delete. </param>
        public DeleteEnvironmentOptions(string pathServiceSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a specific environment. </summary>
    public class FetchEnvironmentOptions : IOptions<EnvironmentResource>
    {
    
        ///<summary> The SID of the Service to fetch the Environment resource from. </summary> 
        public string PathServiceSid { get; }

        ///<summary> The SID of the Environment resource to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchEnvironmentOptions </summary>
        /// <param name="pathServiceSid"> The SID of the Service to fetch the Environment resource from. </param>
        /// <param name="pathSid"> The SID of the Environment resource to fetch. </param>
        public FetchEnvironmentOptions(string pathServiceSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a list of all environments. </summary>
    public class ReadEnvironmentOptions : ReadOptions<EnvironmentResource>
    {
    
        ///<summary> The SID of the Service to read the Environment resources from. </summary> 
        public string PathServiceSid { get; }



        /// <summary> Construct a new ListEnvironmentOptions </summary>
        /// <param name="pathServiceSid"> The SID of the Service to read the Environment resources from. </param>
        public ReadEnvironmentOptions(string pathServiceSid)
        {
            PathServiceSid = pathServiceSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

}

