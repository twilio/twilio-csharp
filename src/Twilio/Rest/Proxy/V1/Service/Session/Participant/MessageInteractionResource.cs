/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Proxy.V1.Service.Session.Participant
{
    public class MessageInteractionResource : Resource
    {
    

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class TypeEnum : StringEnum
        {
            private TypeEnum(string value) : base(value) {}
            public TypeEnum() {}
            public static implicit operator TypeEnum(string value)
            {
                return new TypeEnum(value);
            }
            public static readonly TypeEnum Message = new TypeEnum("message");
            public static readonly TypeEnum Voice = new TypeEnum("voice");
            public static readonly TypeEnum Unknown = new TypeEnum("unknown");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class ResourceStatusEnum : StringEnum
        {
            private ResourceStatusEnum(string value) : base(value) {}
            public ResourceStatusEnum() {}
            public static implicit operator ResourceStatusEnum(string value)
            {
                return new ResourceStatusEnum(value);
            }
            public static readonly ResourceStatusEnum Accepted = new ResourceStatusEnum("accepted");
            public static readonly ResourceStatusEnum Answered = new ResourceStatusEnum("answered");
            public static readonly ResourceStatusEnum Busy = new ResourceStatusEnum("busy");
            public static readonly ResourceStatusEnum Canceled = new ResourceStatusEnum("canceled");
            public static readonly ResourceStatusEnum Completed = new ResourceStatusEnum("completed");
            public static readonly ResourceStatusEnum Deleted = new ResourceStatusEnum("deleted");
            public static readonly ResourceStatusEnum Delivered = new ResourceStatusEnum("delivered");
            public static readonly ResourceStatusEnum DeliveryUnknown = new ResourceStatusEnum("delivery-unknown");
            public static readonly ResourceStatusEnum Failed = new ResourceStatusEnum("failed");
            public static readonly ResourceStatusEnum InProgress = new ResourceStatusEnum("in-progress");
            public static readonly ResourceStatusEnum Initiated = new ResourceStatusEnum("initiated");
            public static readonly ResourceStatusEnum NoAnswer = new ResourceStatusEnum("no-answer");
            public static readonly ResourceStatusEnum Queued = new ResourceStatusEnum("queued");
            public static readonly ResourceStatusEnum Received = new ResourceStatusEnum("received");
            public static readonly ResourceStatusEnum Receiving = new ResourceStatusEnum("receiving");
            public static readonly ResourceStatusEnum Ringing = new ResourceStatusEnum("ringing");
            public static readonly ResourceStatusEnum Scheduled = new ResourceStatusEnum("scheduled");
            public static readonly ResourceStatusEnum Sending = new ResourceStatusEnum("sending");
            public static readonly ResourceStatusEnum Sent = new ResourceStatusEnum("sent");
            public static readonly ResourceStatusEnum Undelivered = new ResourceStatusEnum("undelivered");
            public static readonly ResourceStatusEnum Unknown = new ResourceStatusEnum("unknown");

        }

        
        private static Request BuildCreateRequest(CreateMessageInteractionOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions";

            string PathServiceSid = options.PathServiceSid;
            path = path.Replace("{"+"ServiceSid"+"}", PathServiceSid);
            string PathSessionSid = options.PathSessionSid;
            path = path.Replace("{"+"SessionSid"+"}", PathSessionSid);
            string PathParticipantSid = options.PathParticipantSid;
            path = path.Replace("{"+"ParticipantSid"+"}", PathParticipantSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Proxy,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Create a new message Interaction to send directly from your system to one [Participant](https://www.twilio.com/docs/proxy/api/participant).  The `inbound` properties for the Interaction will always be empty. </summary>
        /// <param name="options"> Create MessageInteraction parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of MessageInteraction </returns>
        public static MessageInteractionResource Create(CreateMessageInteractionOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a new message Interaction to send directly from your system to one [Participant](https://www.twilio.com/docs/proxy/api/participant).  The `inbound` properties for the Interaction will always be empty. </summary>
        /// <param name="options"> Create MessageInteraction parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of MessageInteraction </returns>
        public static async System.Threading.Tasks.Task<MessageInteractionResource> CreateAsync(CreateMessageInteractionOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a new message Interaction to send directly from your system to one [Participant](https://www.twilio.com/docs/proxy/api/participant).  The `inbound` properties for the Interaction will always be empty. </summary>
        /// <param name="pathServiceSid"> The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) resource. </param>
        /// <param name="pathSessionSid"> The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) resource. </param>
        /// <param name="pathParticipantSid"> The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) resource. </param>
        /// <param name="body"> The message to send to the participant </param>
        /// <param name="mediaUrl"> Reserved. Not currently supported. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of MessageInteraction </returns>
        public static MessageInteractionResource Create(
                                          string pathServiceSid,
                                          string pathSessionSid,
                                          string pathParticipantSid,
                                          string body = null,
                                          List<Uri> mediaUrl = null,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateMessageInteractionOptions(pathServiceSid, pathSessionSid, pathParticipantSid){  Body = body, MediaUrl = mediaUrl };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a new message Interaction to send directly from your system to one [Participant](https://www.twilio.com/docs/proxy/api/participant).  The `inbound` properties for the Interaction will always be empty. </summary>
        /// <param name="pathServiceSid"> The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) resource. </param>
        /// <param name="pathSessionSid"> The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) resource. </param>
        /// <param name="pathParticipantSid"> The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) resource. </param>
        /// <param name="body"> The message to send to the participant </param>
        /// <param name="mediaUrl"> Reserved. Not currently supported. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of MessageInteraction </returns>
        public static async System.Threading.Tasks.Task<MessageInteractionResource> CreateAsync(
                                                                                  string pathServiceSid,
                                                                                  string pathSessionSid,
                                                                                  string pathParticipantSid,
                                                                                  string body = null,
                                                                                  List<Uri> mediaUrl = null,
                                                                                    ITwilioRestClient client = null, System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateMessageInteractionOptions(pathServiceSid, pathSessionSid, pathParticipantSid){  Body = body, MediaUrl = mediaUrl };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchMessageInteractionOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions/{Sid}";

            string PathServiceSid = options.PathServiceSid;
            path = path.Replace("{"+"ServiceSid"+"}", PathServiceSid);
            string PathSessionSid = options.PathSessionSid;
            path = path.Replace("{"+"SessionSid"+"}", PathSessionSid);
            string PathParticipantSid = options.PathParticipantSid;
            path = path.Replace("{"+"ParticipantSid"+"}", PathParticipantSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Proxy,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> fetch </summary>
        /// <param name="options"> Fetch MessageInteraction parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of MessageInteraction </returns>
        public static MessageInteractionResource Fetch(FetchMessageInteractionOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="options"> Fetch MessageInteraction parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of MessageInteraction </returns>
        public static async System.Threading.Tasks.Task<MessageInteractionResource> FetchAsync(FetchMessageInteractionOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> fetch </summary>
        /// <param name="pathServiceSid"> The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to fetch. </param>
        /// <param name="pathSessionSid"> The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) of the resource to fetch. </param>
        /// <param name="pathParticipantSid"> The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) resource. </param>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the MessageInteraction resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of MessageInteraction </returns>
        public static MessageInteractionResource Fetch(
                                         string pathServiceSid, 
                                         string pathSessionSid, 
                                         string pathParticipantSid, 
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchMessageInteractionOptions(pathServiceSid, pathSessionSid, pathParticipantSid, pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="pathServiceSid"> The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to fetch. </param>
        /// <param name="pathSessionSid"> The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) of the resource to fetch. </param>
        /// <param name="pathParticipantSid"> The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) resource. </param>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the MessageInteraction resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of MessageInteraction </returns>
        public static async System.Threading.Tasks.Task<MessageInteractionResource> FetchAsync(string pathServiceSid, string pathSessionSid, string pathParticipantSid, string pathSid, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchMessageInteractionOptions(pathServiceSid, pathSessionSid, pathParticipantSid, pathSid){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadMessageInteractionOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions";

            string PathServiceSid = options.PathServiceSid;
            path = path.Replace("{"+"ServiceSid"+"}", PathServiceSid);
            string PathSessionSid = options.PathSessionSid;
            path = path.Replace("{"+"SessionSid"+"}", PathSessionSid);
            string PathParticipantSid = options.PathParticipantSid;
            path = path.Replace("{"+"ParticipantSid"+"}", PathParticipantSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Proxy,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> read </summary>
        /// <param name="options"> Read MessageInteraction parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of MessageInteraction </returns>
        public static ResourceSet<MessageInteractionResource> Read(ReadMessageInteractionOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<MessageInteractionResource>.FromJson("interactions", response.Content);
            return new ResourceSet<MessageInteractionResource>(page, options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="options"> Read MessageInteraction parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of MessageInteraction </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<MessageInteractionResource>> ReadAsync(ReadMessageInteractionOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<MessageInteractionResource>.FromJson("interactions", response.Content);
            return new ResourceSet<MessageInteractionResource>(page, options, client);
        }
        #endif
        /// <summary> read </summary>
        /// <param name="pathServiceSid"> The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) to read the resources from. </param>
        /// <param name="pathSessionSid"> The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) to read the resources from. </param>
        /// <param name="pathParticipantSid"> The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) to read the resources from. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of MessageInteraction </returns>
        public static ResourceSet<MessageInteractionResource> Read(
                                                     string pathServiceSid,
                                                     string pathSessionSid,
                                                     string pathParticipantSid,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadMessageInteractionOptions(pathServiceSid, pathSessionSid, pathParticipantSid){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="pathServiceSid"> The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) to read the resources from. </param>
        /// <param name="pathSessionSid"> The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) to read the resources from. </param>
        /// <param name="pathParticipantSid"> The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) to read the resources from. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of MessageInteraction </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<MessageInteractionResource>> ReadAsync(
                                                                                             string pathServiceSid,
                                                                                             string pathSessionSid,
                                                                                             string pathParticipantSid,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadMessageInteractionOptions(pathServiceSid, pathSessionSid, pathParticipantSid){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<MessageInteractionResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<MessageInteractionResource>.FromJson("interactions", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<MessageInteractionResource> NextPage(Page<MessageInteractionResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<MessageInteractionResource>.FromJson("interactions", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<MessageInteractionResource> PreviousPage(Page<MessageInteractionResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<MessageInteractionResource>.FromJson("interactions", response.Content);
        }

    
        /// <summary>
        /// Converts a JSON string into a MessageInteractionResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> MessageInteractionResource object represented by the provided JSON </returns>
        public static MessageInteractionResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<MessageInteractionResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The unique string that we created to identify the MessageInteraction resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) resource. </summary> 
        [JsonProperty("session_sid")]
        public string SessionSid { get; private set; }

        ///<summary> The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) resource. </summary> 
        [JsonProperty("service_sid")]
        public string ServiceSid { get; private set; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the MessageInteraction resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> A JSON string that includes the message body sent to the participant. (e.g. `{\"body\": \"hello\"}`) </summary> 
        [JsonProperty("data")]
        public string Data { get; private set; }

        
        [JsonProperty("type")]
        public MessageInteractionResource.TypeEnum Type { get; private set; }

        ///<summary> The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) resource. </summary> 
        [JsonProperty("participant_sid")]
        public string ParticipantSid { get; private set; }

        ///<summary> Always empty for created Message Interactions. </summary> 
        [JsonProperty("inbound_participant_sid")]
        public string InboundParticipantSid { get; private set; }

        ///<summary> Always empty for created Message Interactions. </summary> 
        [JsonProperty("inbound_resource_sid")]
        public string InboundResourceSid { get; private set; }

        
        [JsonProperty("inbound_resource_status")]
        public MessageInteractionResource.ResourceStatusEnum InboundResourceStatus { get; private set; }

        ///<summary> Always empty for created Message Interactions. </summary> 
        [JsonProperty("inbound_resource_type")]
        public string InboundResourceType { get; private set; }

        ///<summary> Always empty for created Message Interactions. </summary> 
        [JsonProperty("inbound_resource_url")]
        public Uri InboundResourceUrl { get; private set; }

        ///<summary> The SID of the outbound [Participant](https://www.twilio.com/docs/proxy/api/participant) resource. </summary> 
        [JsonProperty("outbound_participant_sid")]
        public string OutboundParticipantSid { get; private set; }

        ///<summary> The SID of the outbound [Message](https://www.twilio.com/docs/sms/api/message-resource) resource. </summary> 
        [JsonProperty("outbound_resource_sid")]
        public string OutboundResourceSid { get; private set; }

        
        [JsonProperty("outbound_resource_status")]
        public MessageInteractionResource.ResourceStatusEnum OutboundResourceStatus { get; private set; }

        ///<summary> The outbound resource type. This value is always `Message`. </summary> 
        [JsonProperty("outbound_resource_type")]
        public string OutboundResourceType { get; private set; }

        ///<summary> The URL of the Twilio message resource. </summary> 
        [JsonProperty("outbound_resource_url")]
        public Uri OutboundResourceUrl { get; private set; }

        ///<summary> The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time in GMT when the resource was created. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time in GMT when the resource was last updated. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The absolute URL of the MessageInteraction resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private MessageInteractionResource() {

        }
    }
}

