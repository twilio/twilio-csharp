/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Proxy.V1
{

    /// <summary> Create a new Service for Twilio Proxy </summary>
    public class CreateServiceOptions : IOptions<ServiceResource>
    {
        
        ///<summary> An application-defined string that uniquely identifies the resource. This value must be 191 characters or fewer in length and be unique. **This value should not have PII.** </summary> 
        public string UniqueName { get; }

        ///<summary> The default `ttl` value to set for Sessions created in the Service. The TTL (time to live) is measured in seconds after the Session's last create or last Interaction. The default value of `0` indicates an unlimited Session length. You can override a Session's default TTL value by setting its `ttl` value. </summary> 
        public int? DefaultTtl { get; set; }

        ///<summary> The URL we should call when the interaction status changes. </summary> 
        public Uri CallbackUrl { get; set; }

        
        public ServiceResource.GeoMatchLevelEnum GeoMatchLevel { get; set; }

        
        public ServiceResource.NumberSelectionBehaviorEnum NumberSelectionBehavior { get; set; }

        ///<summary> The URL we call on each interaction. If we receive a 403 status, we block the interaction; otherwise the interaction continues. </summary> 
        public Uri InterceptCallbackUrl { get; set; }

        ///<summary> The URL we should call when an inbound call or SMS action occurs on a closed or non-existent Session. If your server (or a Twilio [function](https://www.twilio.com/en-us/serverless/functions)) responds with valid [TwiML](https://www.twilio.com/docs/voice/twiml), we will process it. This means it is possible, for example, to play a message for a call, send an automated text message response, or redirect a call to another Phone Number. See [Out-of-Session Callback Response Guide](https://www.twilio.com/docs/proxy/out-session-callback-response-guide) for more information. </summary> 
        public Uri OutOfSessionCallbackUrl { get; set; }

        ///<summary> The SID of the Chat Service Instance managed by Proxy Service. The Chat Service enables Proxy to forward SMS and channel messages to this chat instance. This is a one-to-one relationship. </summary> 
        public string ChatInstanceSid { get; set; }


        /// <summary> Construct a new CreateServiceOptions </summary>
        /// <param name="uniqueName"> An application-defined string that uniquely identifies the resource. This value must be 191 characters or fewer in length and be unique. **This value should not have PII.** </param>
        public CreateServiceOptions(string uniqueName)
        {
            UniqueName = uniqueName;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }
            if (DefaultTtl != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultTtl", DefaultTtl.ToString()));
            }
            if (CallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackUrl", Serializers.Url(CallbackUrl)));
            }
            if (GeoMatchLevel != null)
            {
                p.Add(new KeyValuePair<string, string>("GeoMatchLevel", GeoMatchLevel.ToString()));
            }
            if (NumberSelectionBehavior != null)
            {
                p.Add(new KeyValuePair<string, string>("NumberSelectionBehavior", NumberSelectionBehavior.ToString()));
            }
            if (InterceptCallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("InterceptCallbackUrl", Serializers.Url(InterceptCallbackUrl)));
            }
            if (OutOfSessionCallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("OutOfSessionCallbackUrl", Serializers.Url(OutOfSessionCallbackUrl)));
            }
            if (ChatInstanceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ChatInstanceSid", ChatInstanceSid));
            }
            return p;
        }

        

    }
    /// <summary> Delete a specific Service. </summary>
    public class DeleteServiceOptions : IOptions<ServiceResource>
    {
        
        ///<summary> The Twilio-provided string that uniquely identifies the Service resource to delete. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteServiceOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Service resource to delete. </param>
        public DeleteServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Fetch a specific Service. </summary>
    public class FetchServiceOptions : IOptions<ServiceResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the Service resource to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchServiceOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Service resource to fetch. </param>
        public FetchServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a list of all Services for Twilio Proxy. A maximum of 100 records will be returned per page. </summary>
    public class ReadServiceOptions : ReadOptions<ServiceResource>
    {
    



        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> Update a specific Service. </summary>
    public class UpdateServiceOptions : IOptions<ServiceResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the Service resource to update. </summary> 
        public string PathSid { get; }

        ///<summary> An application-defined string that uniquely identifies the resource. This value must be 191 characters or fewer in length and be unique. **This value should not have PII.** </summary> 
        public string UniqueName { get; set; }

        ///<summary> The default `ttl` value to set for Sessions created in the Service. The TTL (time to live) is measured in seconds after the Session's last create or last Interaction. The default value of `0` indicates an unlimited Session length. You can override a Session's default TTL value by setting its `ttl` value. </summary> 
        public int? DefaultTtl { get; set; }

        ///<summary> The URL we should call when the interaction status changes. </summary> 
        public Uri CallbackUrl { get; set; }

        
        public ServiceResource.GeoMatchLevelEnum GeoMatchLevel { get; set; }

        
        public ServiceResource.NumberSelectionBehaviorEnum NumberSelectionBehavior { get; set; }

        ///<summary> The URL we call on each interaction. If we receive a 403 status, we block the interaction; otherwise the interaction continues. </summary> 
        public Uri InterceptCallbackUrl { get; set; }

        ///<summary> The URL we should call when an inbound call or SMS action occurs on a closed or non-existent Session. If your server (or a Twilio [function](https://www.twilio.com/en-us/serverless/functions)) responds with valid [TwiML](https://www.twilio.com/docs/voice/twiml), we will process it. This means it is possible, for example, to play a message for a call, send an automated text message response, or redirect a call to another Phone Number. See [Out-of-Session Callback Response Guide](https://www.twilio.com/docs/proxy/out-session-callback-response-guide) for more information. </summary> 
        public Uri OutOfSessionCallbackUrl { get; set; }

        ///<summary> The SID of the Chat Service Instance managed by Proxy Service. The Chat Service enables Proxy to forward SMS and channel messages to this chat instance. This is a one-to-one relationship. </summary> 
        public string ChatInstanceSid { get; set; }



        /// <summary> Construct a new UpdateServiceOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Service resource to update. </param>
        public UpdateServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }
            if (DefaultTtl != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultTtl", DefaultTtl.ToString()));
            }
            if (CallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackUrl", Serializers.Url(CallbackUrl)));
            }
            if (GeoMatchLevel != null)
            {
                p.Add(new KeyValuePair<string, string>("GeoMatchLevel", GeoMatchLevel.ToString()));
            }
            if (NumberSelectionBehavior != null)
            {
                p.Add(new KeyValuePair<string, string>("NumberSelectionBehavior", NumberSelectionBehavior.ToString()));
            }
            if (InterceptCallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("InterceptCallbackUrl", Serializers.Url(InterceptCallbackUrl)));
            }
            if (OutOfSessionCallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("OutOfSessionCallbackUrl", Serializers.Url(OutOfSessionCallbackUrl)));
            }
            if (ChatInstanceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ChatInstanceSid", ChatInstanceSid));
            }
            return p;
        }

        

    }


}

