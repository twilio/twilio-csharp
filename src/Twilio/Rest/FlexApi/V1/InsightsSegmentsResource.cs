/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.FlexApi.V1
{
    public class InsightsSegmentsResource : Resource
    {
    

    

        
        private static Request BuildReadRequest(ReadInsightsSegmentsOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Insights/Segments";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: options.GetHeaderParams()
            );
        }
        /// <summary> To get segments for given reservation Ids </summary>
        /// <param name="options"> Read InsightsSegments parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InsightsSegments </returns>
        public static ResourceSet<InsightsSegmentsResource> Read(ReadInsightsSegmentsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<InsightsSegmentsResource>.FromJson("segments", response.Content);
            return new ResourceSet<InsightsSegmentsResource>(page, options, client);
        }

        #if !NET35
        /// <summary> To get segments for given reservation Ids </summary>
        /// <param name="options"> Read InsightsSegments parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InsightsSegments </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<InsightsSegmentsResource>> ReadAsync(ReadInsightsSegmentsOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<InsightsSegmentsResource>.FromJson("segments", response.Content);
            return new ResourceSet<InsightsSegmentsResource>(page, options, client);
        }
        #endif
        /// <summary> To get segments for given reservation Ids </summary>
        /// <param name="authorization"> The Authorization HTTP request header </param>
        /// <param name="segmentId"> To unique id of the segment </param>
        /// <param name="reservationId"> The list of reservation Ids </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InsightsSegments </returns>
        public static ResourceSet<InsightsSegmentsResource> Read(
                                                     string authorization = null,
                                                     string segmentId = null,
                                                     List<string> reservationId = null,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadInsightsSegmentsOptions(){ Authorization = authorization, SegmentId = segmentId, ReservationId = reservationId, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> To get segments for given reservation Ids </summary>
        /// <param name="authorization"> The Authorization HTTP request header </param>
        /// <param name="segmentId"> To unique id of the segment </param>
        /// <param name="reservationId"> The list of reservation Ids </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InsightsSegments </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<InsightsSegmentsResource>> ReadAsync(
                                                                                             string authorization = null,
                                                                                             string segmentId = null,
                                                                                             List<string> reservationId = null,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null, System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadInsightsSegmentsOptions(){ Authorization = authorization, SegmentId = segmentId, ReservationId = reservationId, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<InsightsSegmentsResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<InsightsSegmentsResource>.FromJson("segments", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<InsightsSegmentsResource> NextPage(Page<InsightsSegmentsResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<InsightsSegmentsResource>.FromJson("segments", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<InsightsSegmentsResource> PreviousPage(Page<InsightsSegmentsResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<InsightsSegmentsResource>.FromJson("segments", response.Content);
        }

    
        /// <summary>
        /// Converts a JSON string into a InsightsSegmentsResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> InsightsSegmentsResource object represented by the provided JSON </returns>
        public static InsightsSegmentsResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<InsightsSegmentsResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> To unique id of the segment </summary> 
        [JsonProperty("segment_id")]
        public string SegmentId { get; private set; }

        ///<summary> The unique id for the conversation. </summary> 
        [JsonProperty("external_id")]
        public string ExternalId { get; private set; }

        ///<summary> The queue </summary> 
        [JsonProperty("queue")]
        public string Queue { get; private set; }

        ///<summary> The external_contact </summary> 
        [JsonProperty("external_contact")]
        public string ExternalContact { get; private set; }

        ///<summary> The uuid for the external_segment_link. </summary> 
        [JsonProperty("external_segment_link_id")]
        public string ExternalSegmentLinkId { get; private set; }

        ///<summary> The date of the conversation. </summary> 
        [JsonProperty("date")]
        public string Date { get; private set; }

        ///<summary> The unique id for the account. </summary> 
        [JsonProperty("account_id")]
        public string AccountId { get; private set; }

        ///<summary> The hyperlink to recording of the task event. </summary> 
        [JsonProperty("external_segment_link")]
        public string ExternalSegmentLink { get; private set; }

        ///<summary> The unique id for the agent. </summary> 
        [JsonProperty("agent_id")]
        public string AgentId { get; private set; }

        ///<summary> The phone number of the agent. </summary> 
        [JsonProperty("agent_phone")]
        public string AgentPhone { get; private set; }

        ///<summary> The name of the agent. </summary> 
        [JsonProperty("agent_name")]
        public string AgentName { get; private set; }

        ///<summary> The team name to which agent belongs. </summary> 
        [JsonProperty("agent_team_name")]
        public string AgentTeamName { get; private set; }

        ///<summary> he team name to which agent belongs. </summary> 
        [JsonProperty("agent_team_name_in_hierarchy")]
        public string AgentTeamNameInHierarchy { get; private set; }

        ///<summary> The link to the agent conversation. </summary> 
        [JsonProperty("agent_link")]
        public string AgentLink { get; private set; }

        ///<summary> The phone number of the customer. </summary> 
        [JsonProperty("customer_phone")]
        public string CustomerPhone { get; private set; }

        ///<summary> The name of the customer. </summary> 
        [JsonProperty("customer_name")]
        public string CustomerName { get; private set; }

        ///<summary> The link to the customer conversation. </summary> 
        [JsonProperty("customer_link")]
        public string CustomerLink { get; private set; }

        ///<summary> The offset value for the recording. </summary> 
        [JsonProperty("segment_recording_offset")]
        public string SegmentRecordingOffset { get; private set; }

        ///<summary> The media identifiers of the conversation. </summary> 
        [JsonProperty("media")]
        public object Media { get; private set; }

        ///<summary> The type of the assessment. </summary> 
        [JsonProperty("assessment_type")]
        public object AssessmentType { get; private set; }

        ///<summary> The percentage scored on the Assessments. </summary> 
        [JsonProperty("assessment_percentage")]
        public object AssessmentPercentage { get; private set; }

        ///<summary> The url </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private InsightsSegmentsResource() {

        }
    }
}

