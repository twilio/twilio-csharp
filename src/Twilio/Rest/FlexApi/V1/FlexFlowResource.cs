/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.FlexApi.V1
{
    public class FlexFlowResource : Resource
    {
    

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class IntegrationTypeEnum : StringEnum
        {
            private IntegrationTypeEnum(string value) : base(value) {}
            public IntegrationTypeEnum() {}
            public static implicit operator IntegrationTypeEnum(string value)
            {
                return new IntegrationTypeEnum(value);
            }
            public static readonly IntegrationTypeEnum Studio = new IntegrationTypeEnum("studio");
            public static readonly IntegrationTypeEnum External = new IntegrationTypeEnum("external");
            public static readonly IntegrationTypeEnum Task = new IntegrationTypeEnum("task");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class ChannelTypeEnum : StringEnum
        {
            private ChannelTypeEnum(string value) : base(value) {}
            public ChannelTypeEnum() {}
            public static implicit operator ChannelTypeEnum(string value)
            {
                return new ChannelTypeEnum(value);
            }
            public static readonly ChannelTypeEnum Web = new ChannelTypeEnum("web");
            public static readonly ChannelTypeEnum Sms = new ChannelTypeEnum("sms");
            public static readonly ChannelTypeEnum Facebook = new ChannelTypeEnum("facebook");
            public static readonly ChannelTypeEnum Whatsapp = new ChannelTypeEnum("whatsapp");
            public static readonly ChannelTypeEnum Line = new ChannelTypeEnum("line");
            public static readonly ChannelTypeEnum Custom = new ChannelTypeEnum("custom");

        }

        
        private static Request BuildCreateRequest(CreateFlexFlowOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/FlexFlows";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.FlexApi,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> create </summary>
        /// <param name="options"> Create FlexFlow parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexFlow </returns>
        public static FlexFlowResource Create(CreateFlexFlowOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="options"> Create FlexFlow parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexFlow </returns>
        public static async System.Threading.Tasks.Task<FlexFlowResource> CreateAsync(CreateFlexFlowOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> create </summary>
        /// <param name="friendlyName"> A descriptive string that you create to describe the Flex Flow resource. </param>
        /// <param name="chatServiceSid"> The SID of the chat service. </param>
        /// <param name="channelType">  </param>
        /// <param name="contactIdentity"> The channel contact's Identity. </param>
        /// <param name="enabled"> Whether the new Flex Flow is enabled. </param>
        /// <param name="integrationType">  </param>
        /// <param name="integrationFlowSid"> The SID of the Studio Flow. Required when `integrationType` is `studio`. </param>
        /// <param name="integrationUrl"> The URL of the external webhook. Required when `integrationType` is `external`. </param>
        /// <param name="integrationWorkspaceSid"> The Workspace SID for a new Task. Required when `integrationType` is `task`. </param>
        /// <param name="integrationWorkflowSid"> The Workflow SID for a new Task. Required when `integrationType` is `task`. </param>
        /// <param name="integrationChannel"> The Task Channel SID (TCXXXX) or unique name (e.g., `sms`) to use for the Task that will be created. Applicable and required when `integrationType` is `task`. The default value is `default`. </param>
        /// <param name="integrationTimeout"> The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when `integrationType` is `task`, not applicable otherwise. </param>
        /// <param name="integrationPriority"> The Task priority of a new Task. The default priority is 0. Optional when `integrationType` is `task`, not applicable otherwise. </param>
        /// <param name="integrationCreationOnMessage"> In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. </param>
        /// <param name="longLived"> When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to `false`. </param>
        /// <param name="janitorEnabled"> When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to `false`. </param>
        /// <param name="integrationRetryCount"> The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when `integrationType` is `studio` or `external`, not applicable otherwise. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexFlow </returns>
        public static FlexFlowResource Create(
                                          string friendlyName,
                                          string chatServiceSid,
                                          FlexFlowResource.ChannelTypeEnum channelType,
                                          string contactIdentity = null,
                                          bool? enabled = null,
                                          FlexFlowResource.IntegrationTypeEnum integrationType = null,
                                          string integrationFlowSid = null,
                                          Uri integrationUrl = null,
                                          string integrationWorkspaceSid = null,
                                          string integrationWorkflowSid = null,
                                          string integrationChannel = null,
                                          int? integrationTimeout = null,
                                          int? integrationPriority = null,
                                          bool? integrationCreationOnMessage = null,
                                          bool? longLived = null,
                                          bool? janitorEnabled = null,
                                          int? integrationRetryCount = null,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateFlexFlowOptions(friendlyName, chatServiceSid, channelType){  ContactIdentity = contactIdentity, Enabled = enabled, IntegrationType = integrationType, IntegrationFlowSid = integrationFlowSid, IntegrationUrl = integrationUrl, IntegrationWorkspaceSid = integrationWorkspaceSid, IntegrationWorkflowSid = integrationWorkflowSid, IntegrationChannel = integrationChannel, IntegrationTimeout = integrationTimeout, IntegrationPriority = integrationPriority, IntegrationCreationOnMessage = integrationCreationOnMessage, LongLived = longLived, JanitorEnabled = janitorEnabled, IntegrationRetryCount = integrationRetryCount };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="friendlyName"> A descriptive string that you create to describe the Flex Flow resource. </param>
        /// <param name="chatServiceSid"> The SID of the chat service. </param>
        /// <param name="channelType">  </param>
        /// <param name="contactIdentity"> The channel contact's Identity. </param>
        /// <param name="enabled"> Whether the new Flex Flow is enabled. </param>
        /// <param name="integrationType">  </param>
        /// <param name="integrationFlowSid"> The SID of the Studio Flow. Required when `integrationType` is `studio`. </param>
        /// <param name="integrationUrl"> The URL of the external webhook. Required when `integrationType` is `external`. </param>
        /// <param name="integrationWorkspaceSid"> The Workspace SID for a new Task. Required when `integrationType` is `task`. </param>
        /// <param name="integrationWorkflowSid"> The Workflow SID for a new Task. Required when `integrationType` is `task`. </param>
        /// <param name="integrationChannel"> The Task Channel SID (TCXXXX) or unique name (e.g., `sms`) to use for the Task that will be created. Applicable and required when `integrationType` is `task`. The default value is `default`. </param>
        /// <param name="integrationTimeout"> The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when `integrationType` is `task`, not applicable otherwise. </param>
        /// <param name="integrationPriority"> The Task priority of a new Task. The default priority is 0. Optional when `integrationType` is `task`, not applicable otherwise. </param>
        /// <param name="integrationCreationOnMessage"> In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. </param>
        /// <param name="longLived"> When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to `false`. </param>
        /// <param name="janitorEnabled"> When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to `false`. </param>
        /// <param name="integrationRetryCount"> The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when `integrationType` is `studio` or `external`, not applicable otherwise. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexFlow </returns>
        public static async System.Threading.Tasks.Task<FlexFlowResource> CreateAsync(
                                                                                  string friendlyName,
                                                                                  string chatServiceSid,
                                                                                  FlexFlowResource.ChannelTypeEnum channelType,
                                                                                  string contactIdentity = null,
                                                                                  bool? enabled = null,
                                                                                  FlexFlowResource.IntegrationTypeEnum integrationType = null,
                                                                                  string integrationFlowSid = null,
                                                                                  Uri integrationUrl = null,
                                                                                  string integrationWorkspaceSid = null,
                                                                                  string integrationWorkflowSid = null,
                                                                                  string integrationChannel = null,
                                                                                  int? integrationTimeout = null,
                                                                                  int? integrationPriority = null,
                                                                                  bool? integrationCreationOnMessage = null,
                                                                                  bool? longLived = null,
                                                                                  bool? janitorEnabled = null,
                                                                                  int? integrationRetryCount = null,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateFlexFlowOptions(friendlyName, chatServiceSid, channelType){  ContactIdentity = contactIdentity, Enabled = enabled, IntegrationType = integrationType, IntegrationFlowSid = integrationFlowSid, IntegrationUrl = integrationUrl, IntegrationWorkspaceSid = integrationWorkspaceSid, IntegrationWorkflowSid = integrationWorkflowSid, IntegrationChannel = integrationChannel, IntegrationTimeout = integrationTimeout, IntegrationPriority = integrationPriority, IntegrationCreationOnMessage = integrationCreationOnMessage, LongLived = longLived, JanitorEnabled = janitorEnabled, IntegrationRetryCount = integrationRetryCount };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        /// <summary> delete </summary>
        /// <param name="options"> Delete FlexFlow parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexFlow </returns>
        private static Request BuildDeleteRequest(DeleteFlexFlowOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/FlexFlows/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> delete </summary>
        /// <param name="options"> Delete FlexFlow parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexFlow </returns>
        public static bool Delete(DeleteFlexFlowOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> delete </summary>
        /// <param name="options"> Delete FlexFlow parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexFlow </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteFlexFlowOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> delete </summary>
        /// <param name="pathSid"> The SID of the Flex Flow resource to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexFlow </returns>
        public static bool Delete(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteFlexFlowOptions(pathSid)     ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> delete </summary>
        /// <param name="pathSid"> The SID of the Flex Flow resource to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexFlow </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteFlexFlowOptions(pathSid) ;
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchFlexFlowOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/FlexFlows/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> fetch </summary>
        /// <param name="options"> Fetch FlexFlow parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexFlow </returns>
        public static FlexFlowResource Fetch(FetchFlexFlowOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="options"> Fetch FlexFlow parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexFlow </returns>
        public static async System.Threading.Tasks.Task<FlexFlowResource> FetchAsync(FetchFlexFlowOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> fetch </summary>
        /// <param name="pathSid"> The SID of the Flex Flow resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexFlow </returns>
        public static FlexFlowResource Fetch(
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchFlexFlowOptions(pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="pathSid"> The SID of the Flex Flow resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexFlow </returns>
        public static async System.Threading.Tasks.Task<FlexFlowResource> FetchAsync(string pathSid, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchFlexFlowOptions(pathSid){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadFlexFlowOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/FlexFlows";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> read </summary>
        /// <param name="options"> Read FlexFlow parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexFlow </returns>
        public static ResourceSet<FlexFlowResource> Read(ReadFlexFlowOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<FlexFlowResource>.FromJson("flex_flows", response.Content);
            return new ResourceSet<FlexFlowResource>(page, options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="options"> Read FlexFlow parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexFlow </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<FlexFlowResource>> ReadAsync(ReadFlexFlowOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<FlexFlowResource>.FromJson("flex_flows", response.Content);
            return new ResourceSet<FlexFlowResource>(page, options, client);
        }
        #endif
        /// <summary> read </summary>
        /// <param name="friendlyName"> The `friendly_name` of the Flex Flow resources to read. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexFlow </returns>
        public static ResourceSet<FlexFlowResource> Read(
                                                     string friendlyName = null,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadFlexFlowOptions(){ FriendlyName = friendlyName, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="friendlyName"> The `friendly_name` of the Flex Flow resources to read. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexFlow </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<FlexFlowResource>> ReadAsync(
                                                                                             string friendlyName = null,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadFlexFlowOptions(){ FriendlyName = friendlyName, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<FlexFlowResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<FlexFlowResource>.FromJson("flex_flows", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<FlexFlowResource> NextPage(Page<FlexFlowResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<FlexFlowResource>.FromJson("flex_flows", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<FlexFlowResource> PreviousPage(Page<FlexFlowResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<FlexFlowResource>.FromJson("flex_flows", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateFlexFlowOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/FlexFlows/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.FlexApi,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> update </summary>
        /// <param name="options"> Update FlexFlow parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexFlow </returns>
        public static FlexFlowResource Update(UpdateFlexFlowOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> update </summary>
        /// <param name="options"> Update FlexFlow parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexFlow </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<FlexFlowResource> UpdateAsync(UpdateFlexFlowOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> update </summary>
        /// <param name="pathSid"> The SID of the Flex Flow resource to update. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the Flex Flow resource. </param>
        /// <param name="chatServiceSid"> The SID of the chat service. </param>
        /// <param name="channelType">  </param>
        /// <param name="contactIdentity"> The channel contact's Identity. </param>
        /// <param name="enabled"> Whether the new Flex Flow is enabled. </param>
        /// <param name="integrationType">  </param>
        /// <param name="integrationFlowSid"> The SID of the Studio Flow. Required when `integrationType` is `studio`. </param>
        /// <param name="integrationUrl"> The URL of the external webhook. Required when `integrationType` is `external`. </param>
        /// <param name="integrationWorkspaceSid"> The Workspace SID for a new Task. Required when `integrationType` is `task`. </param>
        /// <param name="integrationWorkflowSid"> The Workflow SID for a new Task. Required when `integrationType` is `task`. </param>
        /// <param name="integrationChannel"> The Task Channel SID (TCXXXX) or unique name (e.g., `sms`) to use for the Task that will be created. Applicable and required when `integrationType` is `task`. The default value is `default`. </param>
        /// <param name="integrationTimeout"> The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when `integrationType` is `task`, not applicable otherwise. </param>
        /// <param name="integrationPriority"> The Task priority of a new Task. The default priority is 0. Optional when `integrationType` is `task`, not applicable otherwise. </param>
        /// <param name="integrationCreationOnMessage"> In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. </param>
        /// <param name="longLived"> When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to `false`. </param>
        /// <param name="janitorEnabled"> When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to `false`. </param>
        /// <param name="integrationRetryCount"> The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when `integrationType` is `studio` or `external`, not applicable otherwise. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexFlow </returns>
        public static FlexFlowResource Update(
                                          string pathSid,
                                          string friendlyName = null,
                                          string chatServiceSid = null,
                                          FlexFlowResource.ChannelTypeEnum channelType = null,
                                          string contactIdentity = null,
                                          bool? enabled = null,
                                          FlexFlowResource.IntegrationTypeEnum integrationType = null,
                                          string integrationFlowSid = null,
                                          Uri integrationUrl = null,
                                          string integrationWorkspaceSid = null,
                                          string integrationWorkflowSid = null,
                                          string integrationChannel = null,
                                          int? integrationTimeout = null,
                                          int? integrationPriority = null,
                                          bool? integrationCreationOnMessage = null,
                                          bool? longLived = null,
                                          bool? janitorEnabled = null,
                                          int? integrationRetryCount = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateFlexFlowOptions(pathSid){ FriendlyName = friendlyName, ChatServiceSid = chatServiceSid, ChannelType = channelType, ContactIdentity = contactIdentity, Enabled = enabled, IntegrationType = integrationType, IntegrationFlowSid = integrationFlowSid, IntegrationUrl = integrationUrl, IntegrationWorkspaceSid = integrationWorkspaceSid, IntegrationWorkflowSid = integrationWorkflowSid, IntegrationChannel = integrationChannel, IntegrationTimeout = integrationTimeout, IntegrationPriority = integrationPriority, IntegrationCreationOnMessage = integrationCreationOnMessage, LongLived = longLived, JanitorEnabled = janitorEnabled, IntegrationRetryCount = integrationRetryCount };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> update </summary>
        /// <param name="pathSid"> The SID of the Flex Flow resource to update. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the Flex Flow resource. </param>
        /// <param name="chatServiceSid"> The SID of the chat service. </param>
        /// <param name="channelType">  </param>
        /// <param name="contactIdentity"> The channel contact's Identity. </param>
        /// <param name="enabled"> Whether the new Flex Flow is enabled. </param>
        /// <param name="integrationType">  </param>
        /// <param name="integrationFlowSid"> The SID of the Studio Flow. Required when `integrationType` is `studio`. </param>
        /// <param name="integrationUrl"> The URL of the external webhook. Required when `integrationType` is `external`. </param>
        /// <param name="integrationWorkspaceSid"> The Workspace SID for a new Task. Required when `integrationType` is `task`. </param>
        /// <param name="integrationWorkflowSid"> The Workflow SID for a new Task. Required when `integrationType` is `task`. </param>
        /// <param name="integrationChannel"> The Task Channel SID (TCXXXX) or unique name (e.g., `sms`) to use for the Task that will be created. Applicable and required when `integrationType` is `task`. The default value is `default`. </param>
        /// <param name="integrationTimeout"> The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when `integrationType` is `task`, not applicable otherwise. </param>
        /// <param name="integrationPriority"> The Task priority of a new Task. The default priority is 0. Optional when `integrationType` is `task`, not applicable otherwise. </param>
        /// <param name="integrationCreationOnMessage"> In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. </param>
        /// <param name="longLived"> When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to `false`. </param>
        /// <param name="janitorEnabled"> When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to `false`. </param>
        /// <param name="integrationRetryCount"> The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when `integrationType` is `studio` or `external`, not applicable otherwise. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexFlow </returns>
        public static async System.Threading.Tasks.Task<FlexFlowResource> UpdateAsync(
                                                                              string pathSid,
                                                                              string friendlyName = null,
                                                                              string chatServiceSid = null,
                                                                              FlexFlowResource.ChannelTypeEnum channelType = null,
                                                                              string contactIdentity = null,
                                                                              bool? enabled = null,
                                                                              FlexFlowResource.IntegrationTypeEnum integrationType = null,
                                                                              string integrationFlowSid = null,
                                                                              Uri integrationUrl = null,
                                                                              string integrationWorkspaceSid = null,
                                                                              string integrationWorkflowSid = null,
                                                                              string integrationChannel = null,
                                                                              int? integrationTimeout = null,
                                                                              int? integrationPriority = null,
                                                                              bool? integrationCreationOnMessage = null,
                                                                              bool? longLived = null,
                                                                              bool? janitorEnabled = null,
                                                                              int? integrationRetryCount = null,
                                                                                ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateFlexFlowOptions(pathSid){ FriendlyName = friendlyName, ChatServiceSid = chatServiceSid, ChannelType = channelType, ContactIdentity = contactIdentity, Enabled = enabled, IntegrationType = integrationType, IntegrationFlowSid = integrationFlowSid, IntegrationUrl = integrationUrl, IntegrationWorkspaceSid = integrationWorkspaceSid, IntegrationWorkflowSid = integrationWorkflowSid, IntegrationChannel = integrationChannel, IntegrationTimeout = integrationTimeout, IntegrationPriority = integrationPriority, IntegrationCreationOnMessage = integrationCreationOnMessage, LongLived = longLived, JanitorEnabled = janitorEnabled, IntegrationRetryCount = integrationRetryCount };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a FlexFlowResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> FlexFlowResource object represented by the provided JSON </returns>
        public static FlexFlowResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<FlexFlowResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Flow resource and owns this Workflow. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The unique string that we created to identify the Flex Flow resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The string that you assigned to describe the resource. </summary> 
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }

        ///<summary> The SID of the chat service. </summary> 
        [JsonProperty("chat_service_sid")]
        public string ChatServiceSid { get; private set; }

        
        [JsonProperty("channel_type")]
        public FlexFlowResource.ChannelTypeEnum ChannelType { get; private set; }

        ///<summary> The channel contact's Identity. </summary> 
        [JsonProperty("contact_identity")]
        public string ContactIdentity { get; private set; }

        ///<summary> Whether the Flex Flow is enabled. </summary> 
        [JsonProperty("enabled")]
        public bool? Enabled { get; private set; }

        
        [JsonProperty("integration_type")]
        public FlexFlowResource.IntegrationTypeEnum IntegrationType { get; private set; }

        ///<summary> An object that contains specific parameters for the integration. </summary> 
        [JsonProperty("integration")]
        public object Integration { get; private set; }

        ///<summary> When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to `false`. </summary> 
        [JsonProperty("long_lived")]
        public bool? LongLived { get; private set; }

        ///<summary> When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to `false`. </summary> 
        [JsonProperty("janitor_enabled")]
        public bool? JanitorEnabled { get; private set; }

        ///<summary> The absolute URL of the Flex Flow resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private FlexFlowResource() {

        }
    }
}

