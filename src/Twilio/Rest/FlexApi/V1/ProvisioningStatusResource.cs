/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.FlexApi.V1
{
    public class ProvisioningStatusResource : Resource
    {
    

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }
            public static readonly StatusEnum Active = new StatusEnum("active");
            public static readonly StatusEnum InProgress = new StatusEnum("in-progress");
            public static readonly StatusEnum NotConfigured = new StatusEnum("not-configured");
            public static readonly StatusEnum Failed = new StatusEnum("failed");

        }

        
        private static Request BuildFetchRequest(FetchProvisioningStatusOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/account/provision/status";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> fetch </summary>
        /// <param name="options"> Fetch ProvisioningStatus parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ProvisioningStatus </returns>
        public static ProvisioningStatusResource Fetch(FetchProvisioningStatusOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="options"> Fetch ProvisioningStatus parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ProvisioningStatus </returns>
        public static async System.Threading.Tasks.Task<ProvisioningStatusResource> FetchAsync(FetchProvisioningStatusOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> fetch </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ProvisioningStatus </returns>
        public static ProvisioningStatusResource Fetch(
                                        ITwilioRestClient client = null)
        {
            var options = new FetchProvisioningStatusOptions(){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ProvisioningStatus </returns>
        public static async System.Threading.Tasks.Task<ProvisioningStatusResource> FetchAsync(ITwilioRestClient client = null, System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchProvisioningStatusOptions(){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ProvisioningStatusResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ProvisioningStatusResource object represented by the provided JSON </returns>
        public static ProvisioningStatusResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ProvisioningStatusResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        
        [JsonProperty("status")]
        public ProvisioningStatusResource.StatusEnum Status { get; private set; }

        ///<summary> The absolute URL of the resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private ProvisioningStatusResource() {

        }
    }
}

