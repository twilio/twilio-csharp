/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.FlexApi.V1.Interaction
{
    public class InteractionChannelResource : Resource
    {
    

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class TypeEnum : StringEnum
        {
            private TypeEnum(string value) : base(value) {}
            public TypeEnum() {}
            public static implicit operator TypeEnum(string value)
            {
                return new TypeEnum(value);
            }
            public static readonly TypeEnum Voice = new TypeEnum("voice");
            public static readonly TypeEnum Sms = new TypeEnum("sms");
            public static readonly TypeEnum Email = new TypeEnum("email");
            public static readonly TypeEnum Web = new TypeEnum("web");
            public static readonly TypeEnum Whatsapp = new TypeEnum("whatsapp");
            public static readonly TypeEnum Chat = new TypeEnum("chat");
            public static readonly TypeEnum Messenger = new TypeEnum("messenger");
            public static readonly TypeEnum Gbm = new TypeEnum("gbm");

        }
        public sealed class UpdateChannelStatusEnum : StringEnum
        {
            private UpdateChannelStatusEnum(string value) : base(value) {}
            public UpdateChannelStatusEnum() {}
            public static implicit operator UpdateChannelStatusEnum(string value)
            {
                return new UpdateChannelStatusEnum(value);
            }
            public static readonly UpdateChannelStatusEnum Closed = new UpdateChannelStatusEnum("closed");
            public static readonly UpdateChannelStatusEnum Inactive = new UpdateChannelStatusEnum("inactive");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class ChannelStatusEnum : StringEnum
        {
            private ChannelStatusEnum(string value) : base(value) {}
            public ChannelStatusEnum() {}
            public static implicit operator ChannelStatusEnum(string value)
            {
                return new ChannelStatusEnum(value);
            }
            public static readonly ChannelStatusEnum Setup = new ChannelStatusEnum("setup");
            public static readonly ChannelStatusEnum Active = new ChannelStatusEnum("active");
            public static readonly ChannelStatusEnum Failed = new ChannelStatusEnum("failed");
            public static readonly ChannelStatusEnum Closed = new ChannelStatusEnum("closed");
            public static readonly ChannelStatusEnum Inactive = new ChannelStatusEnum("inactive");

        }

        
        private static Request BuildFetchRequest(FetchInteractionChannelOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Interactions/{InteractionSid}/Channels/{Sid}";

            string PathInteractionSid = options.PathInteractionSid;
            path = path.Replace("{"+"InteractionSid"+"}", PathInteractionSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch a Channel for an Interaction. </summary>
        /// <param name="options"> Fetch InteractionChannel parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannel </returns>
        public static InteractionChannelResource Fetch(FetchInteractionChannelOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Fetch a Channel for an Interaction. </summary>
        /// <param name="options"> Fetch InteractionChannel parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannel </returns>
        public static async System.Threading.Tasks.Task<InteractionChannelResource> FetchAsync(FetchInteractionChannelOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Fetch a Channel for an Interaction. </summary>
        /// <param name="pathInteractionSid"> The unique string created by Twilio to identify an Interaction resource, prefixed with KD. </param>
        /// <param name="pathSid"> The unique string created by Twilio to identify an Interaction Channel resource, prefixed with UO. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannel </returns>
        public static InteractionChannelResource Fetch(
                                         string pathInteractionSid, 
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchInteractionChannelOptions(pathInteractionSid, pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Fetch a Channel for an Interaction. </summary>
        /// <param name="pathInteractionSid"> The unique string created by Twilio to identify an Interaction resource, prefixed with KD. </param>
        /// <param name="pathSid"> The unique string created by Twilio to identify an Interaction Channel resource, prefixed with UO. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannel </returns>
        public static async System.Threading.Tasks.Task<InteractionChannelResource> FetchAsync(string pathInteractionSid, string pathSid, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchInteractionChannelOptions(pathInteractionSid, pathSid){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadInteractionChannelOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Interactions/{InteractionSid}/Channels";

            string PathInteractionSid = options.PathInteractionSid;
            path = path.Replace("{"+"InteractionSid"+"}", PathInteractionSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> List all Channels for an Interaction. </summary>
        /// <param name="options"> Read InteractionChannel parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannel </returns>
        public static ResourceSet<InteractionChannelResource> Read(ReadInteractionChannelOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<InteractionChannelResource>.FromJson("channels", response.Content);
            return new ResourceSet<InteractionChannelResource>(page, options, client);
        }

        #if !NET35
        /// <summary> List all Channels for an Interaction. </summary>
        /// <param name="options"> Read InteractionChannel parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannel </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<InteractionChannelResource>> ReadAsync(ReadInteractionChannelOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<InteractionChannelResource>.FromJson("channels", response.Content);
            return new ResourceSet<InteractionChannelResource>(page, options, client);
        }
        #endif
        /// <summary> List all Channels for an Interaction. </summary>
        /// <param name="pathInteractionSid"> The unique string created by Twilio to identify an Interaction resource, prefixed with KD. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannel </returns>
        public static ResourceSet<InteractionChannelResource> Read(
                                                     string pathInteractionSid,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadInteractionChannelOptions(pathInteractionSid){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> List all Channels for an Interaction. </summary>
        /// <param name="pathInteractionSid"> The unique string created by Twilio to identify an Interaction resource, prefixed with KD. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannel </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<InteractionChannelResource>> ReadAsync(
                                                                                             string pathInteractionSid,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadInteractionChannelOptions(pathInteractionSid){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<InteractionChannelResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<InteractionChannelResource>.FromJson("channels", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<InteractionChannelResource> NextPage(Page<InteractionChannelResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<InteractionChannelResource>.FromJson("channels", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<InteractionChannelResource> PreviousPage(Page<InteractionChannelResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<InteractionChannelResource>.FromJson("channels", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateInteractionChannelOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Interactions/{InteractionSid}/Channels/{Sid}";

            string PathInteractionSid = options.PathInteractionSid;
            path = path.Replace("{"+"InteractionSid"+"}", PathInteractionSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.FlexApi,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Update an existing Interaction Channel. </summary>
        /// <param name="options"> Update InteractionChannel parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannel </returns>
        public static InteractionChannelResource Update(UpdateInteractionChannelOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update an existing Interaction Channel. </summary>
        /// <param name="options"> Update InteractionChannel parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannel </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<InteractionChannelResource> UpdateAsync(UpdateInteractionChannelOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Update an existing Interaction Channel. </summary>
        /// <param name="pathInteractionSid"> The unique string created by Twilio to identify an Interaction resource, prefixed with KD. </param>
        /// <param name="pathSid"> The unique string created by Twilio to identify an Interaction Channel resource, prefixed with UO. </param>
        /// <param name="status">  </param>
        /// <param name="routing"> It changes the state of associated tasks. Routing status is required, When the channel status is set to `inactive`. Allowed Value for routing status is `closed`. Otherwise Optional, if not specified, all tasks will be set to `wrapping`. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannel </returns>
        public static InteractionChannelResource Update(
                                          string pathInteractionSid,
                                          string pathSid,
                                          InteractionChannelResource.UpdateChannelStatusEnum status,
                                          object routing = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateInteractionChannelOptions(pathInteractionSid, pathSid, status){ Routing = routing };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Update an existing Interaction Channel. </summary>
        /// <param name="pathInteractionSid"> The unique string created by Twilio to identify an Interaction resource, prefixed with KD. </param>
        /// <param name="pathSid"> The unique string created by Twilio to identify an Interaction Channel resource, prefixed with UO. </param>
        /// <param name="status">  </param>
        /// <param name="routing"> It changes the state of associated tasks. Routing status is required, When the channel status is set to `inactive`. Allowed Value for routing status is `closed`. Otherwise Optional, if not specified, all tasks will be set to `wrapping`. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannel </returns>
        public static async System.Threading.Tasks.Task<InteractionChannelResource> UpdateAsync(
                                                                              string pathInteractionSid,
                                                                              string pathSid,
                                                                              InteractionChannelResource.UpdateChannelStatusEnum status,
                                                                              object routing = null,
                                                                                ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateInteractionChannelOptions(pathInteractionSid, pathSid, status){ Routing = routing };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a InteractionChannelResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> InteractionChannelResource object represented by the provided JSON </returns>
        public static InteractionChannelResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<InteractionChannelResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The unique string created by Twilio to identify an Interaction Channel resource, prefixed with UO. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The unique string created by Twilio to identify an Interaction resource, prefixed with KD. </summary> 
        [JsonProperty("interaction_sid")]
        public string InteractionSid { get; private set; }

        
        [JsonProperty("type")]
        public InteractionChannelResource.TypeEnum Type { get; private set; }

        
        [JsonProperty("status")]
        public InteractionChannelResource.ChannelStatusEnum Status { get; private set; }

        ///<summary> The Twilio error code for a failed channel. </summary> 
        [JsonProperty("error_code")]
        public int? ErrorCode { get; private set; }

        ///<summary> The error message for a failed channel. </summary> 
        [JsonProperty("error_message")]
        public string ErrorMessage { get; private set; }

        ///<summary> The url </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> The links </summary> 
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }



        private InteractionChannelResource() {

        }
    }
}

