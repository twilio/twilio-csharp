/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.FlexApi.V1.Interaction.InteractionChannel
{
    public class InteractionTransferResource : Resource
    {
    

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class TransferStatusEnum : StringEnum
        {
            private TransferStatusEnum(string value) : base(value) {}
            public TransferStatusEnum() {}
            public static implicit operator TransferStatusEnum(string value)
            {
                return new TransferStatusEnum(value);
            }
            public static readonly TransferStatusEnum Active = new TransferStatusEnum("active");
            public static readonly TransferStatusEnum Failed = new TransferStatusEnum("failed");
            public static readonly TransferStatusEnum Completed = new TransferStatusEnum("completed");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class TransferTypeEnum : StringEnum
        {
            private TransferTypeEnum(string value) : base(value) {}
            public TransferTypeEnum() {}
            public static implicit operator TransferTypeEnum(string value)
            {
                return new TransferTypeEnum(value);
            }
            public static readonly TransferTypeEnum Warm = new TransferTypeEnum("warm");
            public static readonly TransferTypeEnum Cold = new TransferTypeEnum("cold");
            public static readonly TransferTypeEnum External = new TransferTypeEnum("external");

        }

        
        private static Request BuildCreateRequest(CreateInteractionTransferOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Transfers";

            string PathInteractionSid = options.PathInteractionSid;
            path = path.Replace("{"+"InteractionSid"+"}", PathInteractionSid);
            string PathChannelSid = options.PathChannelSid;
            path = path.Replace("{"+"ChannelSid"+"}", PathChannelSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.FlexApi,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Create a new Transfer. </summary>
        /// <param name="options"> Create InteractionTransfer parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionTransfer </returns>
        public static InteractionTransferResource Create(CreateInteractionTransferOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a new Transfer. </summary>
        /// <param name="options"> Create InteractionTransfer parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionTransfer </returns>
        public static async System.Threading.Tasks.Task<InteractionTransferResource> CreateAsync(CreateInteractionTransferOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a new Transfer. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for the Interaction </param>
        /// <param name="pathChannelSid"> The Channel Sid for the Channel. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionTransfer </returns>
        public static InteractionTransferResource Create(
                                          string pathInteractionSid,
                                          string pathChannelSid,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateInteractionTransferOptions(pathInteractionSid, pathChannelSid){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a new Transfer. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for the Interaction </param>
        /// <param name="pathChannelSid"> The Channel Sid for the Channel. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionTransfer </returns>
        public static async System.Threading.Tasks.Task<InteractionTransferResource> CreateAsync(
                                                                                  string pathInteractionSid,
                                                                                  string pathChannelSid,
                                                                                    ITwilioRestClient client = null)
        {
        var options = new CreateInteractionTransferOptions(pathInteractionSid, pathChannelSid){  };
            return await CreateAsync(options, client);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchInteractionTransferOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Transfers/{Sid}";

            string PathInteractionSid = options.PathInteractionSid;
            path = path.Replace("{"+"InteractionSid"+"}", PathInteractionSid);
            string PathChannelSid = options.PathChannelSid;
            path = path.Replace("{"+"ChannelSid"+"}", PathChannelSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch a specific Transfer by SID. </summary>
        /// <param name="options"> Fetch InteractionTransfer parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionTransfer </returns>
        public static InteractionTransferResource Fetch(FetchInteractionTransferOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Fetch a specific Transfer by SID. </summary>
        /// <param name="options"> Fetch InteractionTransfer parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionTransfer </returns>
        public static async System.Threading.Tasks.Task<InteractionTransferResource> FetchAsync(FetchInteractionTransferOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Fetch a specific Transfer by SID. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for this channel. </param>
        /// <param name="pathChannelSid"> The Channel Sid for this Transfer. </param>
        /// <param name="pathSid"> The unique string created by Twilio to identify a Transfer resource. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionTransfer </returns>
        public static InteractionTransferResource Fetch(
                                         string pathInteractionSid, 
                                         string pathChannelSid, 
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchInteractionTransferOptions(pathInteractionSid, pathChannelSid, pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Fetch a specific Transfer by SID. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for this channel. </param>
        /// <param name="pathChannelSid"> The Channel Sid for this Transfer. </param>
        /// <param name="pathSid"> The unique string created by Twilio to identify a Transfer resource. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionTransfer </returns>
        public static async System.Threading.Tasks.Task<InteractionTransferResource> FetchAsync(string pathInteractionSid, string pathChannelSid, string pathSid, ITwilioRestClient client = null)
        {
            var options = new FetchInteractionTransferOptions(pathInteractionSid, pathChannelSid, pathSid){  };
            return await FetchAsync(options, client);
        }
        #endif
        
        private static Request BuildUpdateRequest(UpdateInteractionTransferOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Transfers/{Sid}";

            string PathInteractionSid = options.PathInteractionSid;
            path = path.Replace("{"+"InteractionSid"+"}", PathInteractionSid);
            string PathChannelSid = options.PathChannelSid;
            path = path.Replace("{"+"ChannelSid"+"}", PathChannelSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.FlexApi,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Update an existing Transfer. </summary>
        /// <param name="options"> Update InteractionTransfer parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionTransfer </returns>
        public static InteractionTransferResource Update(UpdateInteractionTransferOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update an existing Transfer. </summary>
        /// <param name="options"> Update InteractionTransfer parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionTransfer </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<InteractionTransferResource> UpdateAsync(UpdateInteractionTransferOptions options,
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Update an existing Transfer. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for this channel. </param>
        /// <param name="pathChannelSid"> The Channel Sid for this Transfer. </param>
        /// <param name="pathSid"> The unique string created by Twilio to identify a Transfer resource. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionTransfer </returns>
        public static InteractionTransferResource Update(
                                          string pathInteractionSid,
                                          string pathChannelSid,
                                          string pathSid,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateInteractionTransferOptions(pathInteractionSid, pathChannelSid, pathSid){  };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Update an existing Transfer. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for this channel. </param>
        /// <param name="pathChannelSid"> The Channel Sid for this Transfer. </param>
        /// <param name="pathSid"> The unique string created by Twilio to identify a Transfer resource. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionTransfer </returns>
        public static async System.Threading.Tasks.Task<InteractionTransferResource> UpdateAsync(
                                                                              string pathInteractionSid,
                                                                              string pathChannelSid,
                                                                              string pathSid,
                                                                                ITwilioRestClient client = null)
        {
            var options = new UpdateInteractionTransferOptions(pathInteractionSid, pathChannelSid, pathSid){  };
            return await UpdateAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a InteractionTransferResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> InteractionTransferResource object represented by the provided JSON </returns>
        public static InteractionTransferResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<InteractionTransferResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The unique string created by Twilio to identify an Interaction Transfer resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The SID of the Instance associated with the Transfer. </summary> 
        [JsonProperty("instance_sid")]
        public string InstanceSid { get; private set; }

        ///<summary> The SID of the Account that created the Transfer. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The Interaction Sid for this channel. </summary> 
        [JsonProperty("interaction_sid")]
        public string InteractionSid { get; private set; }

        ///<summary> The Channel Sid for this Transfer. </summary> 
        [JsonProperty("channel_sid")]
        public string ChannelSid { get; private set; }

        ///<summary> The Execution SID associated with the Transfer. </summary> 
        [JsonProperty("execution_sid")]
        public string ExecutionSid { get; private set; }

        
        [JsonProperty("type")]
        public InteractionTransferResource.TransferTypeEnum Type { get; private set; }

        
        [JsonProperty("status")]
        public InteractionTransferResource.TransferStatusEnum Status { get; private set; }

        ///<summary> The SID of the Participant initiating the Transfer. </summary> 
        [JsonProperty("from")]
        public string From { get; private set; }

        ///<summary> The SID of the Participant receiving the Transfer. </summary> 
        [JsonProperty("to")]
        public string To { get; private set; }

        ///<summary> The SID of the Note associated with the Transfer. </summary> 
        [JsonProperty("note_sid")]
        public string NoteSid { get; private set; }

        ///<summary> The SID of the Summary associated with the Transfer. </summary> 
        [JsonProperty("summary_sid")]
        public string SummarySid { get; private set; }

        ///<summary> The date and time when the Transfer was created. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time when the Transfer was last updated. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The url </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private InteractionTransferResource() {

        }
    }
}

