/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.FlexApi.V1.Interaction.InteractionChannel
{
    public class InteractionChannelParticipantResource : Resource
    {
    

    
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }
            public static readonly StatusEnum Closed = new StatusEnum("closed");
            public static readonly StatusEnum Wrapup = new StatusEnum("wrapup");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class TypeEnum : StringEnum
        {
            private TypeEnum(string value) : base(value) {}
            public TypeEnum() {}
            public static implicit operator TypeEnum(string value)
            {
                return new TypeEnum(value);
            }
            public static readonly TypeEnum Supervisor = new TypeEnum("supervisor");
            public static readonly TypeEnum Customer = new TypeEnum("customer");
            public static readonly TypeEnum External = new TypeEnum("external");
            public static readonly TypeEnum Agent = new TypeEnum("agent");
            public static readonly TypeEnum Unknown = new TypeEnum("unknown");

        }

        
        private static Request BuildCreateRequest(CreateInteractionChannelParticipantOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Participants";

            string PathInteractionSid = options.PathInteractionSid;
            path = path.Replace("{"+"InteractionSid"+"}", PathInteractionSid);
            string PathChannelSid = options.PathChannelSid;
            path = path.Replace("{"+"ChannelSid"+"}", PathChannelSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.FlexApi,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Add a Participant to a Channel. </summary>
        /// <param name="options"> Create InteractionChannelParticipant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannelParticipant </returns>
        public static InteractionChannelParticipantResource Create(CreateInteractionChannelParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Add a Participant to a Channel. </summary>
        /// <param name="options"> Create InteractionChannelParticipant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannelParticipant </returns>
        public static async System.Threading.Tasks.Task<InteractionChannelParticipantResource> CreateAsync(CreateInteractionChannelParticipantOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Add a Participant to a Channel. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for the new Channel Participant. </param>
        /// <param name="pathChannelSid"> The Channel Sid for the new Channel Participant. </param>
        /// <param name="type">  </param>
        /// <param name="mediaProperties"> JSON representing the Media Properties for the new Participant. </param>
        /// <param name="routingProperties"> Object representing the Routing Properties for the new Participant. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannelParticipant </returns>
        public static InteractionChannelParticipantResource Create(
                                          string pathInteractionSid,
                                          string pathChannelSid,
                                          InteractionChannelParticipantResource.TypeEnum type,
                                          object mediaProperties,
                                          object routingProperties = null,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateInteractionChannelParticipantOptions(pathInteractionSid, pathChannelSid, type, mediaProperties){  RoutingProperties = routingProperties };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Add a Participant to a Channel. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for the new Channel Participant. </param>
        /// <param name="pathChannelSid"> The Channel Sid for the new Channel Participant. </param>
        /// <param name="type">  </param>
        /// <param name="mediaProperties"> JSON representing the Media Properties for the new Participant. </param>
        /// <param name="routingProperties"> Object representing the Routing Properties for the new Participant. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannelParticipant </returns>
        public static async System.Threading.Tasks.Task<InteractionChannelParticipantResource> CreateAsync(
                                                                                  string pathInteractionSid,
                                                                                  string pathChannelSid,
                                                                                  InteractionChannelParticipantResource.TypeEnum type,
                                                                                  object mediaProperties,
                                                                                  object routingProperties = null,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateInteractionChannelParticipantOptions(pathInteractionSid, pathChannelSid, type, mediaProperties){  RoutingProperties = routingProperties };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadInteractionChannelParticipantOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Participants";

            string PathInteractionSid = options.PathInteractionSid;
            path = path.Replace("{"+"InteractionSid"+"}", PathInteractionSid);
            string PathChannelSid = options.PathChannelSid;
            path = path.Replace("{"+"ChannelSid"+"}", PathChannelSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> List all Participants for a Channel. </summary>
        /// <param name="options"> Read InteractionChannelParticipant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannelParticipant </returns>
        public static ResourceSet<InteractionChannelParticipantResource> Read(ReadInteractionChannelParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<InteractionChannelParticipantResource>.FromJson("participants", response.Content);
            return new ResourceSet<InteractionChannelParticipantResource>(page, options, client);
        }

        #if !NET35
        /// <summary> List all Participants for a Channel. </summary>
        /// <param name="options"> Read InteractionChannelParticipant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannelParticipant </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<InteractionChannelParticipantResource>> ReadAsync(ReadInteractionChannelParticipantOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<InteractionChannelParticipantResource>.FromJson("participants", response.Content);
            return new ResourceSet<InteractionChannelParticipantResource>(page, options, client);
        }
        #endif
        /// <summary> List all Participants for a Channel. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for this channel. </param>
        /// <param name="pathChannelSid"> The Channel Sid for this Participant. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannelParticipant </returns>
        public static ResourceSet<InteractionChannelParticipantResource> Read(
                                                     string pathInteractionSid,
                                                     string pathChannelSid,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadInteractionChannelParticipantOptions(pathInteractionSid, pathChannelSid){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> List all Participants for a Channel. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for this channel. </param>
        /// <param name="pathChannelSid"> The Channel Sid for this Participant. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannelParticipant </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<InteractionChannelParticipantResource>> ReadAsync(
                                                                                             string pathInteractionSid,
                                                                                             string pathChannelSid,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadInteractionChannelParticipantOptions(pathInteractionSid, pathChannelSid){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<InteractionChannelParticipantResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<InteractionChannelParticipantResource>.FromJson("participants", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<InteractionChannelParticipantResource> NextPage(Page<InteractionChannelParticipantResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<InteractionChannelParticipantResource>.FromJson("participants", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<InteractionChannelParticipantResource> PreviousPage(Page<InteractionChannelParticipantResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<InteractionChannelParticipantResource>.FromJson("participants", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateInteractionChannelParticipantOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Participants/{Sid}";

            string PathInteractionSid = options.PathInteractionSid;
            path = path.Replace("{"+"InteractionSid"+"}", PathInteractionSid);
            string PathChannelSid = options.PathChannelSid;
            path = path.Replace("{"+"ChannelSid"+"}", PathChannelSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.FlexApi,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Update an existing Channel Participant. </summary>
        /// <param name="options"> Update InteractionChannelParticipant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannelParticipant </returns>
        public static InteractionChannelParticipantResource Update(UpdateInteractionChannelParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update an existing Channel Participant. </summary>
        /// <param name="options"> Update InteractionChannelParticipant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannelParticipant </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<InteractionChannelParticipantResource> UpdateAsync(UpdateInteractionChannelParticipantOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Update an existing Channel Participant. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for this channel. </param>
        /// <param name="pathChannelSid"> The Channel Sid for this Participant. </param>
        /// <param name="pathSid"> The unique string created by Twilio to identify an Interaction Channel resource. </param>
        /// <param name="status">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannelParticipant </returns>
        public static InteractionChannelParticipantResource Update(
                                          string pathInteractionSid,
                                          string pathChannelSid,
                                          string pathSid,
                                          InteractionChannelParticipantResource.StatusEnum status,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateInteractionChannelParticipantOptions(pathInteractionSid, pathChannelSid, pathSid, status){  };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Update an existing Channel Participant. </summary>
        /// <param name="pathInteractionSid"> The Interaction Sid for this channel. </param>
        /// <param name="pathChannelSid"> The Channel Sid for this Participant. </param>
        /// <param name="pathSid"> The unique string created by Twilio to identify an Interaction Channel resource. </param>
        /// <param name="status">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannelParticipant </returns>
        public static async System.Threading.Tasks.Task<InteractionChannelParticipantResource> UpdateAsync(
                                                                              string pathInteractionSid,
                                                                              string pathChannelSid,
                                                                              string pathSid,
                                                                              InteractionChannelParticipantResource.StatusEnum status,
                                                                                ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateInteractionChannelParticipantOptions(pathInteractionSid, pathChannelSid, pathSid, status){  };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a InteractionChannelParticipantResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> InteractionChannelParticipantResource object represented by the provided JSON </returns>
        public static InteractionChannelParticipantResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<InteractionChannelParticipantResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The unique string created by Twilio to identify an Interaction Channel Participant resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        
        [JsonProperty("type")]
        public InteractionChannelParticipantResource.TypeEnum Type { get; private set; }

        ///<summary> The Interaction Sid for this channel. </summary> 
        [JsonProperty("interaction_sid")]
        public string InteractionSid { get; private set; }

        ///<summary> The Channel Sid for this Participant. </summary> 
        [JsonProperty("channel_sid")]
        public string ChannelSid { get; private set; }

        ///<summary> The url </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> The Participant's routing properties. </summary> 
        [JsonProperty("routing_properties")]
        public object RoutingProperties { get; private set; }



        private InteractionChannelParticipantResource() {

        }
    }
}

