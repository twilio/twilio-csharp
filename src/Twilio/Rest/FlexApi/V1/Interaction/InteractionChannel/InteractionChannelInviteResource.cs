/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.FlexApi.V1.Interaction.InteractionChannel
{
    public class InteractionChannelInviteResource : Resource
    {
    

    

        
        private static Request BuildCreateRequest(CreateInteractionChannelInviteOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Invites";

            string PathInteractionSid = options.PathInteractionSid;
            path = path.Replace("{"+"InteractionSid"+"}", PathInteractionSid);
            string PathChannelSid = options.PathChannelSid;
            path = path.Replace("{"+"ChannelSid"+"}", PathChannelSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.FlexApi,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Invite an Agent or a TaskQueue to a Channel. </summary>
        /// <param name="options"> Create InteractionChannelInvite parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannelInvite </returns>
        public static InteractionChannelInviteResource Create(CreateInteractionChannelInviteOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Invite an Agent or a TaskQueue to a Channel. </summary>
        /// <param name="options"> Create InteractionChannelInvite parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannelInvite </returns>
        public static async System.Threading.Tasks.Task<InteractionChannelInviteResource> CreateAsync(CreateInteractionChannelInviteOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Invite an Agent or a TaskQueue to a Channel. </summary>
        /// <param name="pathInteractionSid"> The Interaction SID for this Channel. </param>
        /// <param name="pathChannelSid"> The Channel SID for this Invite. </param>
        /// <param name="routing"> The Interaction's routing logic. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannelInvite </returns>
        public static InteractionChannelInviteResource Create(
                                          string pathInteractionSid,
                                          string pathChannelSid,
                                          object routing,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateInteractionChannelInviteOptions(pathInteractionSid, pathChannelSid, routing){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Invite an Agent or a TaskQueue to a Channel. </summary>
        /// <param name="pathInteractionSid"> The Interaction SID for this Channel. </param>
        /// <param name="pathChannelSid"> The Channel SID for this Invite. </param>
        /// <param name="routing"> The Interaction's routing logic. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannelInvite </returns>
        public static async System.Threading.Tasks.Task<InteractionChannelInviteResource> CreateAsync(
                                                                                  string pathInteractionSid,
                                                                                  string pathChannelSid,
                                                                                  object routing,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateInteractionChannelInviteOptions(pathInteractionSid, pathChannelSid, routing){  };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadInteractionChannelInviteOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Invites";

            string PathInteractionSid = options.PathInteractionSid;
            path = path.Replace("{"+"InteractionSid"+"}", PathInteractionSid);
            string PathChannelSid = options.PathChannelSid;
            path = path.Replace("{"+"ChannelSid"+"}", PathChannelSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> List all Invites for a Channel. </summary>
        /// <param name="options"> Read InteractionChannelInvite parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannelInvite </returns>
        public static ResourceSet<InteractionChannelInviteResource> Read(ReadInteractionChannelInviteOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<InteractionChannelInviteResource>.FromJson("invites", response.Content);
            return new ResourceSet<InteractionChannelInviteResource>(page, options, client);
        }

        #if !NET35
        /// <summary> List all Invites for a Channel. </summary>
        /// <param name="options"> Read InteractionChannelInvite parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannelInvite </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<InteractionChannelInviteResource>> ReadAsync(ReadInteractionChannelInviteOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<InteractionChannelInviteResource>.FromJson("invites", response.Content);
            return new ResourceSet<InteractionChannelInviteResource>(page, options, client);
        }
        #endif
        /// <summary> List all Invites for a Channel. </summary>
        /// <param name="pathInteractionSid"> The Interaction SID for this Channel. </param>
        /// <param name="pathChannelSid"> The Channel SID for this Participant. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InteractionChannelInvite </returns>
        public static ResourceSet<InteractionChannelInviteResource> Read(
                                                     string pathInteractionSid,
                                                     string pathChannelSid,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadInteractionChannelInviteOptions(pathInteractionSid, pathChannelSid){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> List all Invites for a Channel. </summary>
        /// <param name="pathInteractionSid"> The Interaction SID for this Channel. </param>
        /// <param name="pathChannelSid"> The Channel SID for this Participant. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InteractionChannelInvite </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<InteractionChannelInviteResource>> ReadAsync(
                                                                                             string pathInteractionSid,
                                                                                             string pathChannelSid,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadInteractionChannelInviteOptions(pathInteractionSid, pathChannelSid){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<InteractionChannelInviteResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<InteractionChannelInviteResource>.FromJson("invites", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<InteractionChannelInviteResource> NextPage(Page<InteractionChannelInviteResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<InteractionChannelInviteResource>.FromJson("invites", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<InteractionChannelInviteResource> PreviousPage(Page<InteractionChannelInviteResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<InteractionChannelInviteResource>.FromJson("invites", response.Content);
        }

    
        /// <summary>
        /// Converts a JSON string into a InteractionChannelInviteResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> InteractionChannelInviteResource object represented by the provided JSON </returns>
        public static InteractionChannelInviteResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<InteractionChannelInviteResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The unique string created by Twilio to identify an Interaction Channel Invite resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The Interaction SID for this Channel. </summary> 
        [JsonProperty("interaction_sid")]
        public string InteractionSid { get; private set; }

        ///<summary> The Channel SID for this Invite. </summary> 
        [JsonProperty("channel_sid")]
        public string ChannelSid { get; private set; }

        ///<summary> A JSON object representing the routing rules for the Interaction Channel. See [Outbound SMS Example](https://www.twilio.com/docs/flex/developer/conversations/interactions-api/interactions#agent-initiated-outbound-interactions) for an example Routing object. The Interactions resource uses TaskRouter for all routing functionality.   All attributes in the Routing object on your Interaction request body are added “as is” to the task. For a list of known attributes consumed by the Flex UI and/or Flex Insights, see [Known Task Attributes](https://www.twilio.com/docs/flex/developer/conversations/interactions-api#task-attributes). </summary> 
        [JsonProperty("routing")]
        public object Routing { get; private set; }

        ///<summary> The url </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private InteractionChannelInviteResource() {

        }
    }
}

