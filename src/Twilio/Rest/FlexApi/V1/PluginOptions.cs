/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.FlexApi.V1
{

    /// <summary> create </summary>
    public class CreatePluginOptions : IOptions<PluginResource>
    {
        
        ///<summary> The Flex Plugin's unique name. </summary> 
        public string UniqueName { get; }

        ///<summary> The Flex-Metadata HTTP request header </summary> 
        public string FlexMetadata { get; set; }

        ///<summary> The Flex Plugin's friendly name. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> A descriptive string that you create to describe the plugin resource. It can be up to 500 characters long </summary> 
        public string Description { get; set; }


        /// <summary> Construct a new CreatePluginOptions </summary>
        /// <param name="uniqueName"> The Flex Plugin's unique name. </param>
        public CreatePluginOptions(string uniqueName)
        {
            UniqueName = uniqueName;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (Description != null)
            {
                p.Add(new KeyValuePair<string, string>("Description", Description));
            }
            return p;
        }

        
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (FlexMetadata != null)
        {
            p.Add(new KeyValuePair<string, string>("Flex-Metadata", FlexMetadata));
        }
        return p;
    }

    }
    /// <summary> fetch </summary>
    public class FetchPluginOptions : IOptions<PluginResource>
    {
    
        ///<summary> The SID of the Flex Plugin resource to fetch. </summary> 
        public string PathSid { get; }

        ///<summary> The Flex-Metadata HTTP request header </summary> 
        public string FlexMetadata { get; set; }



        /// <summary> Construct a new FetchPluginOptions </summary>
        /// <param name="pathSid"> The SID of the Flex Plugin resource to fetch. </param>
        public FetchPluginOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (FlexMetadata != null)
        {
            p.Add(new KeyValuePair<string, string>("Flex-Metadata", FlexMetadata));
        }
        return p;
    }

    }


    /// <summary> read </summary>
    public class ReadPluginOptions : ReadOptions<PluginResource>
    {
    
        ///<summary> The Flex-Metadata HTTP request header </summary> 
        public string FlexMetadata { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (FlexMetadata != null)
        {
            p.Add(new KeyValuePair<string, string>("Flex-Metadata", FlexMetadata));
        }
        return p;
    }

    }

    /// <summary> update </summary>
    public class UpdatePluginOptions : IOptions<PluginResource>
    {
    
        ///<summary> The SID of the Flex Plugin resource to update. </summary> 
        public string PathSid { get; }

        ///<summary> The Flex-Metadata HTTP request header </summary> 
        public string FlexMetadata { get; set; }

        ///<summary> The Flex Plugin's friendly name. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> A descriptive string that you update to describe the plugin resource. It can be up to 500 characters long </summary> 
        public string Description { get; set; }



        /// <summary> Construct a new UpdatePluginOptions </summary>
        /// <param name="pathSid"> The SID of the Flex Plugin resource to update. </param>
        public UpdatePluginOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (Description != null)
            {
                p.Add(new KeyValuePair<string, string>("Description", Description));
            }
            return p;
        }

        
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (FlexMetadata != null)
        {
            p.Add(new KeyValuePair<string, string>("Flex-Metadata", FlexMetadata));
        }
        return p;
    }

    }


}

