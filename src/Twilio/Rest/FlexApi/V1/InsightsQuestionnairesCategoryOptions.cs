/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.FlexApi.V1
{

    /// <summary> To create a category for Questions </summary>
    public class CreateInsightsQuestionnairesCategoryOptions : IOptions<InsightsQuestionnairesCategoryResource>
    {
        
        ///<summary> The name of this category. </summary> 
        public string Name { get; }

        ///<summary> The Authorization HTTP request header </summary> 
        public string Authorization { get; set; }


        /// <summary> Construct a new CreateInsightsQuestionnairesCategoryOptions </summary>
        /// <param name="name"> The name of this category. </param>
        public CreateInsightsQuestionnairesCategoryOptions(string name)
        {
            Name = name;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Name != null)
            {
                p.Add(new KeyValuePair<string, string>("Name", Name));
            }
            return p;
        }

        
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (Authorization != null)
        {
            p.Add(new KeyValuePair<string, string>("Authorization", Authorization));
        }
        return p;
    }

    }
    /// <summary> delete </summary>
    public class DeleteInsightsQuestionnairesCategoryOptions : IOptions<InsightsQuestionnairesCategoryResource>
    {
        
        ///<summary> The SID of the category to be deleted </summary> 
        public string PathCategorySid { get; }

        ///<summary> The Authorization HTTP request header </summary> 
        public string Authorization { get; set; }



        /// <summary> Construct a new DeleteInsightsQuestionnairesCategoryOptions </summary>
        /// <param name="pathCategorySid"> The SID of the category to be deleted </param>
        public DeleteInsightsQuestionnairesCategoryOptions(string pathCategorySid)
        {
            PathCategorySid = pathCategorySid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (Authorization != null)
        {
            p.Add(new KeyValuePair<string, string>("Authorization", Authorization));
        }
        return p;
    }

    }


    /// <summary> To get all the categories </summary>
    public class ReadInsightsQuestionnairesCategoryOptions : ReadOptions<InsightsQuestionnairesCategoryResource>
    {
    
        ///<summary> The Authorization HTTP request header </summary> 
        public string Authorization { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (Authorization != null)
        {
            p.Add(new KeyValuePair<string, string>("Authorization", Authorization));
        }
        return p;
    }

    }

    /// <summary> To update the category for Questions </summary>
    public class UpdateInsightsQuestionnairesCategoryOptions : IOptions<InsightsQuestionnairesCategoryResource>
    {
    
        ///<summary> The SID of the category to be updated </summary> 
        public string PathCategorySid { get; }

        ///<summary> The name of this category. </summary> 
        public string Name { get; }

        ///<summary> The Authorization HTTP request header </summary> 
        public string Authorization { get; set; }



        /// <summary> Construct a new UpdateInsightsQuestionnairesCategoryOptions </summary>
        /// <param name="pathCategorySid"> The SID of the category to be updated </param>
        /// <param name="name"> The name of this category. </param>
        public UpdateInsightsQuestionnairesCategoryOptions(string pathCategorySid, string name)
        {
            PathCategorySid = pathCategorySid;
            Name = name;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Name != null)
            {
                p.Add(new KeyValuePair<string, string>("Name", Name));
            }
            return p;
        }

        
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (Authorization != null)
        {
            p.Add(new KeyValuePair<string, string>("Authorization", Authorization));
        }
        return p;
    }

    }


}

