/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.FlexApi.V1.Plugin
{

    /// <summary> create </summary>
    public class CreatePluginVersionsOptions : IOptions<PluginVersionsResource>
    {
        
        ///<summary> The SID of the Flex Plugin the resource to belongs to. </summary> 
        public string PathPluginSid { get; }

        ///<summary> The Flex Plugin Version's version. </summary> 
        public string Version { get; }

        ///<summary> The URL of the Flex Plugin Version bundle </summary> 
        public Uri PluginUrl { get; }

        ///<summary> The Flex-Metadata HTTP request header </summary> 
        public string FlexMetadata { get; set; }

        ///<summary> The changelog of the Flex Plugin Version. </summary> 
        public string Changelog { get; set; }

        ///<summary> Whether this Flex Plugin Version requires authorization. </summary> 
        public bool? Private { get; set; }

        ///<summary> The version of Flex Plugins CLI used to create this plugin </summary> 
        public string CliVersion { get; set; }

        ///<summary> The validation status of the plugin, indicating whether it has been validated </summary> 
        public string ValidateStatus { get; set; }


        /// <summary> Construct a new CreatePluginVersionOptions </summary>
        /// <param name="pathPluginSid"> The SID of the Flex Plugin the resource to belongs to. </param>
        /// <param name="version"> The Flex Plugin Version's version. </param>
        /// <param name="pluginUrl"> The URL of the Flex Plugin Version bundle </param>
        public CreatePluginVersionsOptions(string pathPluginSid, string version, Uri pluginUrl)
        {
            PathPluginSid = pathPluginSid;
            Version = version;
            PluginUrl = pluginUrl;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Version != null)
            {
                p.Add(new KeyValuePair<string, string>("Version", Version));
            }
            if (PluginUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("PluginUrl", Serializers.Url(PluginUrl)));
            }
            if (Changelog != null)
            {
                p.Add(new KeyValuePair<string, string>("Changelog", Changelog));
            }
            if (Private != null)
            {
                p.Add(new KeyValuePair<string, string>("Private", Private.Value.ToString().ToLower()));
            }
            if (CliVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("CliVersion", CliVersion));
            }
            if (ValidateStatus != null)
            {
                p.Add(new KeyValuePair<string, string>("ValidateStatus", ValidateStatus));
            }
            return p;
        }

        
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (FlexMetadata != null)
        {
            p.Add(new KeyValuePair<string, string>("Flex-Metadata", FlexMetadata));
        }
        return p;
    }

    }
    /// <summary> fetch </summary>
    public class FetchPluginVersionsOptions : IOptions<PluginVersionsResource>
    {
    
        ///<summary> The SID of the Flex Plugin the resource to belongs to. </summary> 
        public string PathPluginSid { get; }

        ///<summary> The SID of the Flex Plugin Version resource to fetch. </summary> 
        public string PathSid { get; }

        ///<summary> The Flex-Metadata HTTP request header </summary> 
        public string FlexMetadata { get; set; }



        /// <summary> Construct a new FetchPluginVersionOptions </summary>
        /// <param name="pathPluginSid"> The SID of the Flex Plugin the resource to belongs to. </param>
        /// <param name="pathSid"> The SID of the Flex Plugin Version resource to fetch. </param>
        public FetchPluginVersionsOptions(string pathPluginSid, string pathSid)
        {
            PathPluginSid = pathPluginSid;
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (FlexMetadata != null)
        {
            p.Add(new KeyValuePair<string, string>("Flex-Metadata", FlexMetadata));
        }
        return p;
    }

    }


    /// <summary> read </summary>
    public class ReadPluginVersionsOptions : ReadOptions<PluginVersionsResource>
    {
    
        ///<summary> The SID of the Flex Plugin the resource to belongs to. </summary> 
        public string PathPluginSid { get; }

        ///<summary> The Flex-Metadata HTTP request header </summary> 
        public string FlexMetadata { get; set; }



        /// <summary> Construct a new ListPluginVersionOptions </summary>
        /// <param name="pathPluginSid"> The SID of the Flex Plugin the resource to belongs to. </param>
        public ReadPluginVersionsOptions(string pathPluginSid)
        {
            PathPluginSid = pathPluginSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (FlexMetadata != null)
        {
            p.Add(new KeyValuePair<string, string>("Flex-Metadata", FlexMetadata));
        }
        return p;
    }

    }

}

