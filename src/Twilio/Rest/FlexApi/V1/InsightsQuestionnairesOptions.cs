/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;
using System.Linq;



namespace Twilio.Rest.FlexApi.V1
{

    /// <summary> To create a Questionnaire </summary>
    public class CreateInsightsQuestionnairesOptions : IOptions<InsightsQuestionnairesResource>
    {
        
        ///<summary> The name of this questionnaire </summary> 
        public string Name { get; }

        ///<summary> The Authorization HTTP request header </summary> 
        public string Authorization { get; set; }

        ///<summary> The description of this questionnaire </summary> 
        public string Description { get; set; }

        ///<summary> The flag to enable or disable questionnaire </summary> 
        public bool? Active { get; set; }

        ///<summary> The list of questions sids under a questionnaire </summary> 
        public List<string> QuestionSids { get; set; }


        /// <summary> Construct a new CreateInsightsQuestionnairesOptions </summary>
        /// <param name="name"> The name of this questionnaire </param>
        public CreateInsightsQuestionnairesOptions(string name)
        {
            Name = name;
            QuestionSids = new List<string>();
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Name != null)
            {
                p.Add(new KeyValuePair<string, string>("Name", Name));
            }
            if (Description != null)
            {
                p.Add(new KeyValuePair<string, string>("Description", Description));
            }
            if (Active != null)
            {
                p.Add(new KeyValuePair<string, string>("Active", Active.Value.ToString().ToLower()));
            }
            if (QuestionSids != null)
            {
                p.AddRange(QuestionSids.Select(QuestionSids => new KeyValuePair<string, string>("QuestionSids", QuestionSids)));
            }
            return p;
        }

        
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (Authorization != null)
        {
            p.Add(new KeyValuePair<string, string>("Authorization", Authorization));
        }
        return p;
    }

    }
    /// <summary> To delete the questionnaire </summary>
    public class DeleteInsightsQuestionnairesOptions : IOptions<InsightsQuestionnairesResource>
    {
        
        ///<summary> The SID of the questionnaire </summary> 
        public string PathQuestionnaireSid { get; }

        ///<summary> The Authorization HTTP request header </summary> 
        public string Authorization { get; set; }



        /// <summary> Construct a new DeleteInsightsQuestionnairesOptions </summary>
        /// <param name="pathQuestionnaireSid"> The SID of the questionnaire </param>
        public DeleteInsightsQuestionnairesOptions(string pathQuestionnaireSid)
        {
            PathQuestionnaireSid = pathQuestionnaireSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (Authorization != null)
        {
            p.Add(new KeyValuePair<string, string>("Authorization", Authorization));
        }
        return p;
    }

    }


    /// <summary> To get the Questionnaire Detail </summary>
    public class FetchInsightsQuestionnairesOptions : IOptions<InsightsQuestionnairesResource>
    {
    
        ///<summary> The SID of the questionnaire </summary> 
        public string PathQuestionnaireSid { get; }

        ///<summary> The Authorization HTTP request header </summary> 
        public string Authorization { get; set; }



        /// <summary> Construct a new FetchInsightsQuestionnairesOptions </summary>
        /// <param name="pathQuestionnaireSid"> The SID of the questionnaire </param>
        public FetchInsightsQuestionnairesOptions(string pathQuestionnaireSid)
        {
            PathQuestionnaireSid = pathQuestionnaireSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (Authorization != null)
        {
            p.Add(new KeyValuePair<string, string>("Authorization", Authorization));
        }
        return p;
    }

    }


    /// <summary> To get all questionnaires with questions </summary>
    public class ReadInsightsQuestionnairesOptions : ReadOptions<InsightsQuestionnairesResource>
    {
    
        ///<summary> The Authorization HTTP request header </summary> 
        public string Authorization { get; set; }

        ///<summary> Flag indicating whether to include inactive questionnaires or not </summary> 
        public bool? IncludeInactive { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (IncludeInactive != null)
            {
                p.Add(new KeyValuePair<string, string>("IncludeInactive", IncludeInactive.Value.ToString().ToLower()));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (Authorization != null)
        {
            p.Add(new KeyValuePair<string, string>("Authorization", Authorization));
        }
        return p;
    }

    }

    /// <summary> To update the questionnaire </summary>
    public class UpdateInsightsQuestionnairesOptions : IOptions<InsightsQuestionnairesResource>
    {
    
        ///<summary> The SID of the questionnaire </summary> 
        public string PathQuestionnaireSid { get; }

        ///<summary> The flag to enable or disable questionnaire </summary> 
        public bool? Active { get; }

        ///<summary> The Authorization HTTP request header </summary> 
        public string Authorization { get; set; }

        ///<summary> The name of this questionnaire </summary> 
        public string Name { get; set; }

        ///<summary> The description of this questionnaire </summary> 
        public string Description { get; set; }

        ///<summary> The list of questions sids under a questionnaire </summary> 
        public List<string> QuestionSids { get; set; }



        /// <summary> Construct a new UpdateInsightsQuestionnairesOptions </summary>
        /// <param name="pathQuestionnaireSid"> The SID of the questionnaire </param>
        /// <param name="active"> The flag to enable or disable questionnaire </param>
        public UpdateInsightsQuestionnairesOptions(string pathQuestionnaireSid, bool? active)
        {
            PathQuestionnaireSid = pathQuestionnaireSid;
            Active = active;
            QuestionSids = new List<string>();
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Active != null)
            {
                p.Add(new KeyValuePair<string, string>("Active", Active.Value.ToString().ToLower()));
            }
            if (Name != null)
            {
                p.Add(new KeyValuePair<string, string>("Name", Name));
            }
            if (Description != null)
            {
                p.Add(new KeyValuePair<string, string>("Description", Description));
            }
            if (QuestionSids != null)
            {
                p.AddRange(QuestionSids.Select(QuestionSids => new KeyValuePair<string, string>("QuestionSids", QuestionSids)));
            }
            return p;
        }

        
    /// <summary> Generate the necessary header parameters </summary>
    public List<KeyValuePair<string, string>> GetHeaderParams()
    {
        var p = new List<KeyValuePair<string, string>>();
        if (Authorization != null)
        {
            p.Add(new KeyValuePair<string, string>("Authorization", Authorization));
        }
        return p;
    }

    }


}

