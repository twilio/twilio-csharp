/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.FlexApi.V2
{
    public class FlexUserResource : Resource
    {
    

    

        
        private static Request BuildFetchRequest(FetchFlexUserOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Instances/{InstanceSid}/Users/{FlexUserSid}";

            string PathInstanceSid = options.PathInstanceSid;
            path = path.Replace("{"+"InstanceSid"+"}", PathInstanceSid);
            string PathFlexUserSid = options.PathFlexUserSid;
            path = path.Replace("{"+"FlexUserSid"+"}", PathFlexUserSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch flex user for the given flex user sid </summary>
        /// <param name="options"> Fetch FlexUser parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexUser </returns>
        public static FlexUserResource Fetch(FetchFlexUserOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Fetch flex user for the given flex user sid </summary>
        /// <param name="options"> Fetch FlexUser parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexUser </returns>
        public static async System.Threading.Tasks.Task<FlexUserResource> FetchAsync(FetchFlexUserOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Fetch flex user for the given flex user sid </summary>
        /// <param name="pathInstanceSid"> The unique ID created by Twilio to identify a Flex instance. </param>
        /// <param name="pathFlexUserSid"> The unique id for the flex user to be retrieved. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexUser </returns>
        public static FlexUserResource Fetch(
                                         string pathInstanceSid, 
                                         string pathFlexUserSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchFlexUserOptions(pathInstanceSid, pathFlexUserSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Fetch flex user for the given flex user sid </summary>
        /// <param name="pathInstanceSid"> The unique ID created by Twilio to identify a Flex instance. </param>
        /// <param name="pathFlexUserSid"> The unique id for the flex user to be retrieved. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexUser </returns>
        public static async System.Threading.Tasks.Task<FlexUserResource> FetchAsync(string pathInstanceSid, string pathFlexUserSid, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchFlexUserOptions(pathInstanceSid, pathFlexUserSid){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildUpdateRequest(UpdateFlexUserOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Instances/{InstanceSid}/Users/{FlexUserSid}";

            string PathInstanceSid = options.PathInstanceSid;
            path = path.Replace("{"+"InstanceSid"+"}", PathInstanceSid);
            string PathFlexUserSid = options.PathFlexUserSid;
            path = path.Replace("{"+"FlexUserSid"+"}", PathFlexUserSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.FlexApi,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Update flex user for the given flex user sid </summary>
        /// <param name="options"> Update FlexUser parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexUser </returns>
        public static FlexUserResource Update(UpdateFlexUserOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update flex user for the given flex user sid </summary>
        /// <param name="options"> Update FlexUser parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexUser </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<FlexUserResource> UpdateAsync(UpdateFlexUserOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Update flex user for the given flex user sid </summary>
        /// <param name="pathInstanceSid"> The unique ID created by Twilio to identify a Flex instance. </param>
        /// <param name="pathFlexUserSid"> The unique id for the flex user. </param>
        /// <param name="firstName"> First name of the User. </param>
        /// <param name="lastName"> Last name of the User. </param>
        /// <param name="email"> Email of the User. </param>
        /// <param name="friendlyName"> Friendly name of the User. </param>
        /// <param name="userSid"> The unique SID identifier of the Twilio Unified User. </param>
        /// <param name="locale"> The locale preference of the user. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlexUser </returns>
        public static FlexUserResource Update(
                                          string pathInstanceSid,
                                          string pathFlexUserSid,
                                          string firstName = null,
                                          string lastName = null,
                                          string email = null,
                                          string friendlyName = null,
                                          string userSid = null,
                                          string locale = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateFlexUserOptions(pathInstanceSid, pathFlexUserSid){ FirstName = firstName, LastName = lastName, Email = email, FriendlyName = friendlyName, UserSid = userSid, Locale = locale };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Update flex user for the given flex user sid </summary>
        /// <param name="pathInstanceSid"> The unique ID created by Twilio to identify a Flex instance. </param>
        /// <param name="pathFlexUserSid"> The unique id for the flex user. </param>
        /// <param name="firstName"> First name of the User. </param>
        /// <param name="lastName"> Last name of the User. </param>
        /// <param name="email"> Email of the User. </param>
        /// <param name="friendlyName"> Friendly name of the User. </param>
        /// <param name="userSid"> The unique SID identifier of the Twilio Unified User. </param>
        /// <param name="locale"> The locale preference of the user. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlexUser </returns>
        public static async System.Threading.Tasks.Task<FlexUserResource> UpdateAsync(
                                                                              string pathInstanceSid,
                                                                              string pathFlexUserSid,
                                                                              string firstName = null,
                                                                              string lastName = null,
                                                                              string email = null,
                                                                              string friendlyName = null,
                                                                              string userSid = null,
                                                                              string locale = null,
                                                                                ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateFlexUserOptions(pathInstanceSid, pathFlexUserSid){ FirstName = firstName, LastName = lastName, Email = email, FriendlyName = friendlyName, UserSid = userSid, Locale = locale };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a FlexUserResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> FlexUserResource object represented by the provided JSON </returns>
        public static FlexUserResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<FlexUserResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The unique SID of the account that created the resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The unique ID created by Twilio to identify a Flex instance. </summary> 
        [JsonProperty("instance_sid")]
        public string InstanceSid { get; private set; }

        ///<summary> The unique SID identifier of the Twilio Unified User. </summary> 
        [JsonProperty("user_sid")]
        public string UserSid { get; private set; }

        ///<summary> The unique SID identifier of the Flex User. </summary> 
        [JsonProperty("flex_user_sid")]
        public string FlexUserSid { get; private set; }

        ///<summary> The unique SID identifier of the worker. </summary> 
        [JsonProperty("worker_sid")]
        public string WorkerSid { get; private set; }

        ///<summary> The unique SID identifier of the workspace. </summary> 
        [JsonProperty("workspace_sid")]
        public string WorkspaceSid { get; private set; }

        ///<summary> The unique SID identifier of the Flex Team. </summary> 
        [JsonProperty("flex_team_sid")]
        public string FlexTeamSid { get; private set; }

        ///<summary> First name of the User. </summary> 
        [JsonProperty("first_name")]
        public string FirstName { get; private set; }

        ///<summary> Last name of the User. </summary> 
        [JsonProperty("last_name")]
        public string LastName { get; private set; }

        ///<summary> Username of the User. </summary> 
        [JsonProperty("username")]
        public string Username { get; private set; }

        ///<summary> Email of the User. </summary> 
        [JsonProperty("email")]
        public string Email { get; private set; }

        ///<summary> Friendly name of the User. </summary> 
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }

        ///<summary> The locale preference of the user. </summary> 
        [JsonProperty("locale")]
        public string Locale { get; private set; }

        ///<summary> The roles of the user. </summary> 
        [JsonProperty("roles")]
        public List<string> Roles { get; private set; }

        ///<summary> The date that this user was created, given in ISO 8601 format. </summary> 
        [JsonProperty("created_date")]
        public DateTime? CreatedDate { get; private set; }

        ///<summary> The date that this user was updated, given in ISO 8601 format. </summary> 
        [JsonProperty("updated_date")]
        public DateTime? UpdatedDate { get; private set; }

        ///<summary> The current version of the user. </summary> 
        [JsonProperty("version")]
        public int? Version { get; private set; }

        ///<summary> The url </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private FlexUserResource() {

        }
    }
}

