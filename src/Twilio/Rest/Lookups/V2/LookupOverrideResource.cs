/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Lookups.V2
{
    public class LookupOverrideResource : Resource
    {
    
        public class OverridesRequest
        {
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("line_type")]
            private LookupOverrideResource.LineTypeEnum LineType {get; set;}
            [JsonProperty("reason")]
            private string Reason {get; set;}
            public OverridesRequest() { }
            public class Builder
            {
                private OverridesRequest _overridesRequest = new OverridesRequest();
                public Builder()
                {
                }
                public Builder WithLineType(LookupOverrideResource.LineTypeEnum lineType)
                {
                    _overridesRequest.LineType= lineType;
                    return this;
                }
                public Builder WithReason(string reason)
                {
                    _overridesRequest.Reason= reason;
                    return this;
                }
                public OverridesRequest Build()
                {
                    return _overridesRequest;
                }
            }
        }

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class LineTypeEnum : StringEnum
        {
            private LineTypeEnum(string value) : base(value) {}
            public LineTypeEnum() {}
            public static implicit operator LineTypeEnum(string value)
            {
                return new LineTypeEnum(value);
            }
            public static readonly LineTypeEnum Mobile = new LineTypeEnum("mobile");
            public static readonly LineTypeEnum Landline = new LineTypeEnum("landline");
            public static readonly LineTypeEnum Tollfree = new LineTypeEnum("tollFree");
            public static readonly LineTypeEnum Fixedvoip = new LineTypeEnum("fixedVoip");
            public static readonly LineTypeEnum Nonfixedvoip = new LineTypeEnum("nonFixedVoip");
            public static readonly LineTypeEnum Personal = new LineTypeEnum("personal");
            public static readonly LineTypeEnum Premium = new LineTypeEnum("premium");
            public static readonly LineTypeEnum Voicemail = new LineTypeEnum("voicemail");
            public static readonly LineTypeEnum Sharedcost = new LineTypeEnum("sharedCost");
            public static readonly LineTypeEnum Uan = new LineTypeEnum("uan");
            public static readonly LineTypeEnum Pager = new LineTypeEnum("pager");
            public static readonly LineTypeEnum Unknown = new LineTypeEnum("unknown");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class OriginalLineTypeEnum : StringEnum
        {
            private OriginalLineTypeEnum(string value) : base(value) {}
            public OriginalLineTypeEnum() {}
            public static implicit operator OriginalLineTypeEnum(string value)
            {
                return new OriginalLineTypeEnum(value);
            }
            public static readonly OriginalLineTypeEnum Mobile = new OriginalLineTypeEnum("mobile");
            public static readonly OriginalLineTypeEnum Landline = new OriginalLineTypeEnum("landline");
            public static readonly OriginalLineTypeEnum Tollfree = new OriginalLineTypeEnum("tollFree");
            public static readonly OriginalLineTypeEnum Fixedvoip = new OriginalLineTypeEnum("fixedVoip");
            public static readonly OriginalLineTypeEnum Nonfixedvoip = new OriginalLineTypeEnum("nonFixedVoip");
            public static readonly OriginalLineTypeEnum Personal = new OriginalLineTypeEnum("personal");
            public static readonly OriginalLineTypeEnum Premium = new OriginalLineTypeEnum("premium");
            public static readonly OriginalLineTypeEnum Voicemail = new OriginalLineTypeEnum("voicemail");
            public static readonly OriginalLineTypeEnum Sharedcost = new OriginalLineTypeEnum("sharedCost");
            public static readonly OriginalLineTypeEnum Uan = new OriginalLineTypeEnum("uan");
            public static readonly OriginalLineTypeEnum Pager = new OriginalLineTypeEnum("pager");
            public static readonly OriginalLineTypeEnum Unknown = new OriginalLineTypeEnum("unknown");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class OverriddenLineTypeEnum : StringEnum
        {
            private OverriddenLineTypeEnum(string value) : base(value) {}
            public OverriddenLineTypeEnum() {}
            public static implicit operator OverriddenLineTypeEnum(string value)
            {
                return new OverriddenLineTypeEnum(value);
            }
            public static readonly OverriddenLineTypeEnum Mobile = new OverriddenLineTypeEnum("mobile");
            public static readonly OverriddenLineTypeEnum Landline = new OverriddenLineTypeEnum("landline");
            public static readonly OverriddenLineTypeEnum Tollfree = new OverriddenLineTypeEnum("tollFree");
            public static readonly OverriddenLineTypeEnum Fixedvoip = new OverriddenLineTypeEnum("fixedVoip");
            public static readonly OverriddenLineTypeEnum Nonfixedvoip = new OverriddenLineTypeEnum("nonFixedVoip");
            public static readonly OverriddenLineTypeEnum Personal = new OverriddenLineTypeEnum("personal");
            public static readonly OverriddenLineTypeEnum Premium = new OverriddenLineTypeEnum("premium");
            public static readonly OverriddenLineTypeEnum Voicemail = new OverriddenLineTypeEnum("voicemail");
            public static readonly OverriddenLineTypeEnum Sharedcost = new OverriddenLineTypeEnum("sharedCost");
            public static readonly OverriddenLineTypeEnum Uan = new OverriddenLineTypeEnum("uan");
            public static readonly OverriddenLineTypeEnum Pager = new OverriddenLineTypeEnum("pager");
            public static readonly OverriddenLineTypeEnum Unknown = new OverriddenLineTypeEnum("unknown");

        }

        
        private static Request BuildCreateRequest(CreateLookupOverrideOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/PhoneNumbers/{PhoneNumber}/Overrides/{Field}";

            string PathField = options.PathField;
            path = path.Replace("{"+"Field"+"}", PathField);
            string PathPhoneNumber = options.PathPhoneNumber;
            path = path.Replace("{"+"PhoneNumber"+"}", PathPhoneNumber);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Lookups,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Create an Override for a specific package and phone number. </summary>
        /// <param name="options"> Create LookupOverride parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of LookupOverride </returns>
        public static LookupOverrideResource Create(CreateLookupOverrideOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create an Override for a specific package and phone number. </summary>
        /// <param name="options"> Create LookupOverride parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of LookupOverride </returns>
        public static async System.Threading.Tasks.Task<LookupOverrideResource> CreateAsync(CreateLookupOverrideOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create an Override for a specific package and phone number. </summary>
        /// <param name="pathField">  </param>
        /// <param name="pathPhoneNumber">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of LookupOverride </returns>
        public static LookupOverrideResource Create(
                                          string pathField,
                                          string pathPhoneNumber,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateLookupOverrideOptions(pathField, pathPhoneNumber){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create an Override for a specific package and phone number. </summary>
        /// <param name="pathField">  </param>
        /// <param name="pathPhoneNumber">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of LookupOverride </returns>
        public static async System.Threading.Tasks.Task<LookupOverrideResource> CreateAsync(
                                                                                  string pathField,
                                                                                  string pathPhoneNumber,
                                                                                    ITwilioRestClient client = null)
        {
        var options = new CreateLookupOverrideOptions(pathField, pathPhoneNumber){  };
            return await CreateAsync(options, client);
        }
        #endif
        
        /// <summary> Delete an Override for a specific package and phone number. </summary>
        /// <param name="options"> Delete LookupOverride parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of LookupOverride </returns>
        private static Request BuildDeleteRequest(DeleteLookupOverrideOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/PhoneNumbers/{PhoneNumber}/Overrides/{Field}";

            string PathField = options.PathField;
            path = path.Replace("{"+"Field"+"}", PathField);
            string PathPhoneNumber = options.PathPhoneNumber;
            path = path.Replace("{"+"PhoneNumber"+"}", PathPhoneNumber);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Lookups,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Delete an Override for a specific package and phone number. </summary>
        /// <param name="options"> Delete LookupOverride parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of LookupOverride </returns>
        public static bool Delete(DeleteLookupOverrideOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> Delete an Override for a specific package and phone number. </summary>
        /// <param name="options"> Delete LookupOverride parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of LookupOverride </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteLookupOverrideOptions options,
                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> Delete an Override for a specific package and phone number. </summary>
        /// <param name="pathField">  </param>
        /// <param name="pathPhoneNumber">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of LookupOverride </returns>
        public static bool Delete(string pathField, string pathPhoneNumber, ITwilioRestClient client = null)
        {
            var options = new DeleteLookupOverrideOptions(pathField, pathPhoneNumber)        ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> Delete an Override for a specific package and phone number. </summary>
        /// <param name="pathField">  </param>
        /// <param name="pathPhoneNumber">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of LookupOverride </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathField, string pathPhoneNumber, ITwilioRestClient client = null)
        {
            var options = new DeleteLookupOverrideOptions(pathField, pathPhoneNumber) ;
            return await DeleteAsync(options, client);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchLookupOverrideOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/PhoneNumbers/{PhoneNumber}/Overrides/{Field}";

            string PathField = options.PathField;
            path = path.Replace("{"+"Field"+"}", PathField);
            string PathPhoneNumber = options.PathPhoneNumber;
            path = path.Replace("{"+"PhoneNumber"+"}", PathPhoneNumber);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Lookups,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Retrieve an Override for a specific package and phone number. </summary>
        /// <param name="options"> Fetch LookupOverride parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of LookupOverride </returns>
        public static LookupOverrideResource Fetch(FetchLookupOverrideOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Retrieve an Override for a specific package and phone number. </summary>
        /// <param name="options"> Fetch LookupOverride parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of LookupOverride </returns>
        public static async System.Threading.Tasks.Task<LookupOverrideResource> FetchAsync(FetchLookupOverrideOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Retrieve an Override for a specific package and phone number. </summary>
        /// <param name="pathField">  </param>
        /// <param name="pathPhoneNumber">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of LookupOverride </returns>
        public static LookupOverrideResource Fetch(
                                         string pathField, 
                                         string pathPhoneNumber, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchLookupOverrideOptions(pathField, pathPhoneNumber){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Retrieve an Override for a specific package and phone number. </summary>
        /// <param name="pathField">  </param>
        /// <param name="pathPhoneNumber">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of LookupOverride </returns>
        public static async System.Threading.Tasks.Task<LookupOverrideResource> FetchAsync(string pathField, string pathPhoneNumber, ITwilioRestClient client = null)
        {
            var options = new FetchLookupOverrideOptions(pathField, pathPhoneNumber){  };
            return await FetchAsync(options, client);
        }
        #endif
        
        private static Request BuildUpdateRequest(UpdateLookupOverrideOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/PhoneNumbers/{PhoneNumber}/Overrides/{Field}";

            string PathField = options.PathField;
            path = path.Replace("{"+"Field"+"}", PathField);
            string PathPhoneNumber = options.PathPhoneNumber;
            path = path.Replace("{"+"PhoneNumber"+"}", PathPhoneNumber);

            return new Request(
                HttpMethod.Put,
                Rest.Domain.Lookups,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Update an Override for a specific package and phone number. </summary>
        /// <param name="options"> Update LookupOverride parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of LookupOverride </returns>
        public static LookupOverrideResource Update(UpdateLookupOverrideOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update an Override for a specific package and phone number. </summary>
        /// <param name="options"> Update LookupOverride parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of LookupOverride </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<LookupOverrideResource> UpdateAsync(UpdateLookupOverrideOptions options,
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Update an Override for a specific package and phone number. </summary>
        /// <param name="pathField">  </param>
        /// <param name="pathPhoneNumber">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of LookupOverride </returns>
        public static LookupOverrideResource Update(
                                          string pathField,
                                          string pathPhoneNumber,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateLookupOverrideOptions(pathField, pathPhoneNumber){  };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Update an Override for a specific package and phone number. </summary>
        /// <param name="pathField">  </param>
        /// <param name="pathPhoneNumber">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of LookupOverride </returns>
        public static async System.Threading.Tasks.Task<LookupOverrideResource> UpdateAsync(
                                                                              string pathField,
                                                                              string pathPhoneNumber,
                                                                                ITwilioRestClient client = null)
        {
            var options = new UpdateLookupOverrideOptions(pathField, pathPhoneNumber){  };
            return await UpdateAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a LookupOverrideResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> LookupOverrideResource object represented by the provided JSON </returns>
        public static LookupOverrideResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<LookupOverrideResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The phone number for which the override was created </summary> 
        [JsonProperty("phone_number")]
        public string PhoneNumber { get; private set; }

        ///<summary> The original line type </summary> 
        [JsonProperty("original_line_type")]
        public LookupOverrideResource.OriginalLineTypeEnum OriginalLineType { get; private set; }

        ///<summary> The new line type after the override </summary> 
        [JsonProperty("overridden_line_type")]
        public LookupOverrideResource.OverriddenLineTypeEnum OverriddenLineType { get; private set; }

        ///<summary> The reason for the override </summary> 
        [JsonProperty("override_reason")]
        public string OverrideReason { get; private set; }

        ///<summary> The override_timestamp </summary> 
        [JsonProperty("override_timestamp")]
        public DateTime? OverrideTimestamp { get; private set; }

        ///<summary> The Account SID for the user who made the override </summary> 
        [JsonProperty("overridden_by_account_sid")]
        public string OverriddenByAccountSid { get; private set; }



        private LookupOverrideResource() {

        }
    }
}

