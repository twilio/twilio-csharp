/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Lookups.V2
{
    public class PhoneNumberResource : Resource
    {
    
        public class CallerName
        {
            [JsonProperty("caller_name")]
            private string VarCallerName {get; set;}
            [JsonProperty("caller_type")]
            private string CallerType {get; set;}
            [JsonProperty("error_code")]
            private int? ErrorCode {get; set;}
            public CallerName() { }
            public class Builder
            {
                private CallerName _callerName = new CallerName();
                public Builder()
                {
                }
                public Builder WithVarCallerName(string varCallerName)
                {
                    _callerName.VarCallerName= varCallerName;
                    return this;
                }
                public Builder WithCallerType(string callerType)
                {
                    _callerName.CallerType= callerType;
                    return this;
                }
                public Builder WithErrorCode(int? errorCode)
                {
                    _callerName.ErrorCode= errorCode;
                    return this;
                }
                public CallerName Build()
                {
                    return _callerName;
                }
            }
        }
        public class LastSimSwap
        {
            [JsonProperty("last_sim_swap_date")]
            private DateTime? LastSimSwapDate {get; set;}
            [JsonProperty("swapped_period")]
            private string SwappedPeriod {get; set;}
            [JsonProperty("swapped_in_period")]
            private bool? SwappedInPeriod {get; set;}
            public LastSimSwap() { }
            public class Builder
            {
                private LastSimSwap _lastSimSwap = new LastSimSwap();
                public Builder()
                {
                }
                public Builder WithLastSimSwapDate(DateTime? lastSimSwapDate)
                {
                    _lastSimSwap.LastSimSwapDate= lastSimSwapDate;
                    return this;
                }
                public Builder WithSwappedPeriod(string swappedPeriod)
                {
                    _lastSimSwap.SwappedPeriod= swappedPeriod;
                    return this;
                }
                public Builder WithSwappedInPeriod(bool? swappedInPeriod)
                {
                    _lastSimSwap.SwappedInPeriod= swappedInPeriod;
                    return this;
                }
                public LastSimSwap Build()
                {
                    return _lastSimSwap;
                }
            }
        }
        public class SimSwap
        {
            [JsonProperty("last_sim_swap")]
            private LastSimSwap LastSimSwap {get; set;}
            [JsonProperty("carrier_name")]
            private string CarrierName {get; set;}
            [JsonProperty("mobile_country_code")]
            private string MobileCountryCode {get; set;}
            [JsonProperty("mobile_network_code")]
            private string MobileNetworkCode {get; set;}
            [JsonProperty("error_code")]
            private int? ErrorCode {get; set;}
            public SimSwap() { }
            public class Builder
            {
                private SimSwap _simSwap = new SimSwap();
                public Builder()
                {
                }
                public Builder WithLastSimSwap(LastSimSwap lastSimSwap)
                {
                    _simSwap.LastSimSwap= lastSimSwap;
                    return this;
                }
                public Builder WithCarrierName(string carrierName)
                {
                    _simSwap.CarrierName= carrierName;
                    return this;
                }
                public Builder WithMobileCountryCode(string mobileCountryCode)
                {
                    _simSwap.MobileCountryCode= mobileCountryCode;
                    return this;
                }
                public Builder WithMobileNetworkCode(string mobileNetworkCode)
                {
                    _simSwap.MobileNetworkCode= mobileNetworkCode;
                    return this;
                }
                public Builder WithErrorCode(int? errorCode)
                {
                    _simSwap.ErrorCode= errorCode;
                    return this;
                }
                public SimSwap Build()
                {
                    return _simSwap;
                }
            }
        }
        public class CallForwarding
        {
            [JsonProperty("call_forwarding_enabled")]
            private bool? CallForwardingEnabled {get; set;}
            [JsonProperty("error_code")]
            private int? ErrorCode {get; set;}
            public CallForwarding() { }
            public class Builder
            {
                private CallForwarding _callForwarding = new CallForwarding();
                public Builder()
                {
                }
                public Builder WithCallForwardingEnabled(bool? callForwardingEnabled)
                {
                    _callForwarding.CallForwardingEnabled= callForwardingEnabled;
                    return this;
                }
                public Builder WithErrorCode(int? errorCode)
                {
                    _callForwarding.ErrorCode= errorCode;
                    return this;
                }
                public CallForwarding Build()
                {
                    return _callForwarding;
                }
            }
        }
        public class LineTypeIntelligence
        {
            [JsonProperty("mobile_country_code")]
            private string MobileCountryCode {get; set;}
            [JsonProperty("mobile_network_code")]
            private string MobileNetworkCode {get; set;}
            [JsonProperty("carrier_name")]
            private string CarrierName {get; set;}
            [JsonProperty("type")]
            private string Type {get; set;}
            [JsonProperty("error_code")]
            private int? ErrorCode {get; set;}
            public LineTypeIntelligence() { }
            public class Builder
            {
                private LineTypeIntelligence _lineTypeIntelligence = new LineTypeIntelligence();
                public Builder()
                {
                }
                public Builder WithMobileCountryCode(string mobileCountryCode)
                {
                    _lineTypeIntelligence.MobileCountryCode= mobileCountryCode;
                    return this;
                }
                public Builder WithMobileNetworkCode(string mobileNetworkCode)
                {
                    _lineTypeIntelligence.MobileNetworkCode= mobileNetworkCode;
                    return this;
                }
                public Builder WithCarrierName(string carrierName)
                {
                    _lineTypeIntelligence.CarrierName= carrierName;
                    return this;
                }
                public Builder WithType(string type)
                {
                    _lineTypeIntelligence.Type= type;
                    return this;
                }
                public Builder WithErrorCode(int? errorCode)
                {
                    _lineTypeIntelligence.ErrorCode= errorCode;
                    return this;
                }
                public LineTypeIntelligence Build()
                {
                    return _lineTypeIntelligence;
                }
            }
        }
        public class LineStatus
        {
            [JsonProperty("status")]
            private string Status {get; set;}
            [JsonProperty("error_code")]
            private int? ErrorCode {get; set;}
            public LineStatus() { }
            public class Builder
            {
                private LineStatus _lineStatus = new LineStatus();
                public Builder()
                {
                }
                public Builder WithStatus(string status)
                {
                    _lineStatus.Status= status;
                    return this;
                }
                public Builder WithErrorCode(int? errorCode)
                {
                    _lineStatus.ErrorCode= errorCode;
                    return this;
                }
                public LineStatus Build()
                {
                    return _lineStatus;
                }
            }
        }
        public class IdentityMatch
        {
            [JsonProperty("first_name_match")]
            private string FirstNameMatch {get; set;}
            [JsonProperty("last_name_match")]
            private string LastNameMatch {get; set;}
            [JsonProperty("address_lines_match")]
            private string AddressLinesMatch {get; set;}
            [JsonProperty("city_match")]
            private string CityMatch {get; set;}
            [JsonProperty("state_match")]
            private string StateMatch {get; set;}
            [JsonProperty("postal_code_match")]
            private string PostalCodeMatch {get; set;}
            [JsonProperty("address_country_match")]
            private string AddressCountryMatch {get; set;}
            [JsonProperty("national_id_match")]
            private string NationalIdMatch {get; set;}
            [JsonProperty("date_of_birth_match")]
            private string DateOfBirthMatch {get; set;}
            [JsonProperty("summary_score")]
            private int? SummaryScore {get; set;}
            [JsonProperty("error_code")]
            private int? ErrorCode {get; set;}
            [JsonProperty("error_message")]
            private string ErrorMessage {get; set;}
            public IdentityMatch() { }
            public class Builder
            {
                private IdentityMatch _identityMatch = new IdentityMatch();
                public Builder()
                {
                }
                public Builder WithFirstNameMatch(string firstNameMatch)
                {
                    _identityMatch.FirstNameMatch= firstNameMatch;
                    return this;
                }
                public Builder WithLastNameMatch(string lastNameMatch)
                {
                    _identityMatch.LastNameMatch= lastNameMatch;
                    return this;
                }
                public Builder WithAddressLinesMatch(string addressLinesMatch)
                {
                    _identityMatch.AddressLinesMatch= addressLinesMatch;
                    return this;
                }
                public Builder WithCityMatch(string cityMatch)
                {
                    _identityMatch.CityMatch= cityMatch;
                    return this;
                }
                public Builder WithStateMatch(string stateMatch)
                {
                    _identityMatch.StateMatch= stateMatch;
                    return this;
                }
                public Builder WithPostalCodeMatch(string postalCodeMatch)
                {
                    _identityMatch.PostalCodeMatch= postalCodeMatch;
                    return this;
                }
                public Builder WithAddressCountryMatch(string addressCountryMatch)
                {
                    _identityMatch.AddressCountryMatch= addressCountryMatch;
                    return this;
                }
                public Builder WithNationalIdMatch(string nationalIdMatch)
                {
                    _identityMatch.NationalIdMatch= nationalIdMatch;
                    return this;
                }
                public Builder WithDateOfBirthMatch(string dateOfBirthMatch)
                {
                    _identityMatch.DateOfBirthMatch= dateOfBirthMatch;
                    return this;
                }
                public Builder WithSummaryScore(int? summaryScore)
                {
                    _identityMatch.SummaryScore= summaryScore;
                    return this;
                }
                public Builder WithErrorCode(int? errorCode)
                {
                    _identityMatch.ErrorCode= errorCode;
                    return this;
                }
                public Builder WithErrorMessage(string errorMessage)
                {
                    _identityMatch.ErrorMessage= errorMessage;
                    return this;
                }
                public IdentityMatch Build()
                {
                    return _identityMatch;
                }
            }
        }
        public class ReassignedNumber
        {
            [JsonProperty("last_verified_date")]
            private string LastVerifiedDate {get; set;}
            [JsonProperty("is_number_reassigned")]
            private string IsNumberReassigned {get; set;}
            [JsonProperty("error_code")]
            private string ErrorCode {get; set;}
            public ReassignedNumber() { }
            public class Builder
            {
                private ReassignedNumber _reassignedNumber = new ReassignedNumber();
                public Builder()
                {
                }
                public Builder WithLastVerifiedDate(string lastVerifiedDate)
                {
                    _reassignedNumber.LastVerifiedDate= lastVerifiedDate;
                    return this;
                }
                public Builder WithIsNumberReassigned(string isNumberReassigned)
                {
                    _reassignedNumber.IsNumberReassigned= isNumberReassigned;
                    return this;
                }
                public Builder WithErrorCode(string errorCode)
                {
                    _reassignedNumber.ErrorCode= errorCode;
                    return this;
                }
                public ReassignedNumber Build()
                {
                    return _reassignedNumber;
                }
            }
        }
        public class SmsPumpingRisk
        {
            [JsonProperty("carrier_risk_category")]
            private string CarrierRiskCategory {get; set;}
            [JsonProperty("number_blocked")]
            private bool? NumberBlocked {get; set;}
            [JsonProperty("number_blocked_date")]
            private DateTime? NumberBlockedDate {get; set;}
            [JsonProperty("number_blocked_last_3_months")]
            private bool? NumberBlockedLast3Months {get; set;}
            [JsonProperty("sms_pumping_risk_score")]
            private int? SmsPumpingRiskScore {get; set;}
            [JsonProperty("error_code")]
            private int? ErrorCode {get; set;}
            public SmsPumpingRisk() { }
            public class Builder
            {
                private SmsPumpingRisk _smsPumpingRisk = new SmsPumpingRisk();
                public Builder()
                {
                }
                public Builder WithCarrierRiskCategory(string carrierRiskCategory)
                {
                    _smsPumpingRisk.CarrierRiskCategory= carrierRiskCategory;
                    return this;
                }
                public Builder WithNumberBlocked(bool? numberBlocked)
                {
                    _smsPumpingRisk.NumberBlocked= numberBlocked;
                    return this;
                }
                public Builder WithNumberBlockedDate(DateTime? numberBlockedDate)
                {
                    _smsPumpingRisk.NumberBlockedDate= numberBlockedDate;
                    return this;
                }
                public Builder WithNumberBlockedLast3Months(bool? numberBlockedLast3Months)
                {
                    _smsPumpingRisk.NumberBlockedLast3Months= numberBlockedLast3Months;
                    return this;
                }
                public Builder WithSmsPumpingRiskScore(int? smsPumpingRiskScore)
                {
                    _smsPumpingRisk.SmsPumpingRiskScore= smsPumpingRiskScore;
                    return this;
                }
                public Builder WithErrorCode(int? errorCode)
                {
                    _smsPumpingRisk.ErrorCode= errorCode;
                    return this;
                }
                public SmsPumpingRisk Build()
                {
                    return _smsPumpingRisk;
                }
            }
        }

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class ValidationError : StringEnum
        {
            private ValidationError(string value) : base(value) {}
            public ValidationError() {}
            public static implicit operator ValidationError(string value)
            {
                return new ValidationError(value);
            }

            public static readonly ValidationError TooShort = new ValidationError("TOO_SHORT");
            public static readonly ValidationError TooLong = new ValidationError("TOO_LONG");
            public static readonly ValidationError InvalidButPossible = new ValidationError("INVALID_BUT_POSSIBLE");
            public static readonly ValidationError InvalidCountryCode = new ValidationError("INVALID_COUNTRY_CODE");
            public static readonly ValidationError InvalidLength = new ValidationError("INVALID_LENGTH");
            public static readonly ValidationError NotANumber = new ValidationError("NOT_A_NUMBER");
        }

        
        private static Request BuildFetchRequest(FetchPhoneNumberOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/PhoneNumbers/{PhoneNumber}";

            string PathPhoneNumber = options.PathPhoneNumber;
            path = path.Replace("{"+"PhoneNumber"+"}", PathPhoneNumber);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Lookups,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> The Lookup API allows you to query information on a phone number so that you can make a trusted interaction with your user </summary>
        /// <param name="options"> Fetch PhoneNumber parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of PhoneNumber </returns>
        public static PhoneNumberResource Fetch(FetchPhoneNumberOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> The Lookup API allows you to query information on a phone number so that you can make a trusted interaction with your user </summary>
        /// <param name="options"> Fetch PhoneNumber parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of PhoneNumber </returns>
        public static async System.Threading.Tasks.Task<PhoneNumberResource> FetchAsync(FetchPhoneNumberOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> The Lookup API allows you to query information on a phone number so that you can make a trusted interaction with your user </summary>
        /// <param name="pathPhoneNumber"> The phone number to lookup in E.164 or national format. Default country code is +1 (North America). </param>
        /// <param name="fields"> A comma-separated list of fields to return. Possible values are validation, caller_name, sim_swap, call_forwarding, line_status, line_type_intelligence, identity_match, reassigned_number, sms_pumping_risk, phone_number_quality_score, pre_fill. </param>
        /// <param name="countryCode"> The [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) used if the phone number provided is in national format. </param>
        /// <param name="firstName"> User’s first name. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="lastName"> User’s last name. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="addressLine1"> User’s first address line. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="addressLine2"> User’s second address line. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="city"> User’s city. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="state"> User’s country subdivision, such as state, province, or locality. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="postalCode"> User’s postal zip code. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="addressCountryCode"> User’s country, up to two characters. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="nationalId"> User’s national ID, such as SSN or Passport ID. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="dateOfBirth"> User’s date of birth, in YYYYMMDD format. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="lastVerifiedDate"> The date you obtained consent to call or text the end-user of the phone number or a date on which you are reasonably certain that the end-user could still be reached at that number. This query parameter is only used (optionally) for reassigned_number package requests. </param>
        /// <param name="verificationSid"> The unique identifier associated with a verification process through verify API. This query parameter is only used (optionally) for pre_fill package requests. </param>
        /// <param name="partnerSubId"> The optional partnerSubId parameter to provide context for your sub-accounts, tenantIDs, sender IDs or other segmentation, enhancing the accuracy of the risk analysis. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of PhoneNumber </returns>
        public static PhoneNumberResource Fetch(
                                         string pathPhoneNumber, 
                                         string fields = null, 
                                         string countryCode = null, 
                                         string firstName = null, 
                                         string lastName = null, 
                                         string addressLine1 = null, 
                                         string addressLine2 = null, 
                                         string city = null, 
                                         string state = null, 
                                         string postalCode = null, 
                                         string addressCountryCode = null, 
                                         string nationalId = null, 
                                         string dateOfBirth = null, 
                                         string lastVerifiedDate = null, 
                                         string verificationSid = null, 
                                         string partnerSubId = null, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchPhoneNumberOptions(pathPhoneNumber){ Fields = fields,CountryCode = countryCode,FirstName = firstName,LastName = lastName,AddressLine1 = addressLine1,AddressLine2 = addressLine2,City = city,State = state,PostalCode = postalCode,AddressCountryCode = addressCountryCode,NationalId = nationalId,DateOfBirth = dateOfBirth,LastVerifiedDate = lastVerifiedDate,VerificationSid = verificationSid,PartnerSubId = partnerSubId };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> The Lookup API allows you to query information on a phone number so that you can make a trusted interaction with your user </summary>
        /// <param name="pathPhoneNumber"> The phone number to lookup in E.164 or national format. Default country code is +1 (North America). </param>
        /// <param name="fields"> A comma-separated list of fields to return. Possible values are validation, caller_name, sim_swap, call_forwarding, line_status, line_type_intelligence, identity_match, reassigned_number, sms_pumping_risk, phone_number_quality_score, pre_fill. </param>
        /// <param name="countryCode"> The [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) used if the phone number provided is in national format. </param>
        /// <param name="firstName"> User’s first name. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="lastName"> User’s last name. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="addressLine1"> User’s first address line. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="addressLine2"> User’s second address line. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="city"> User’s city. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="state"> User’s country subdivision, such as state, province, or locality. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="postalCode"> User’s postal zip code. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="addressCountryCode"> User’s country, up to two characters. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="nationalId"> User’s national ID, such as SSN or Passport ID. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="dateOfBirth"> User’s date of birth, in YYYYMMDD format. This query parameter is only used (optionally) for identity_match package requests. </param>
        /// <param name="lastVerifiedDate"> The date you obtained consent to call or text the end-user of the phone number or a date on which you are reasonably certain that the end-user could still be reached at that number. This query parameter is only used (optionally) for reassigned_number package requests. </param>
        /// <param name="verificationSid"> The unique identifier associated with a verification process through verify API. This query parameter is only used (optionally) for pre_fill package requests. </param>
        /// <param name="partnerSubId"> The optional partnerSubId parameter to provide context for your sub-accounts, tenantIDs, sender IDs or other segmentation, enhancing the accuracy of the risk analysis. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of PhoneNumber </returns>
        public static async System.Threading.Tasks.Task<PhoneNumberResource> FetchAsync(string pathPhoneNumber, string fields = null, string countryCode = null, string firstName = null, string lastName = null, string addressLine1 = null, string addressLine2 = null, string city = null, string state = null, string postalCode = null, string addressCountryCode = null, string nationalId = null, string dateOfBirth = null, string lastVerifiedDate = null, string verificationSid = null, string partnerSubId = null, ITwilioRestClient client = null)
        {
            var options = new FetchPhoneNumberOptions(pathPhoneNumber){ Fields = fields,CountryCode = countryCode,FirstName = firstName,LastName = lastName,AddressLine1 = addressLine1,AddressLine2 = addressLine2,City = city,State = state,PostalCode = postalCode,AddressCountryCode = addressCountryCode,NationalId = nationalId,DateOfBirth = dateOfBirth,LastVerifiedDate = lastVerifiedDate,VerificationSid = verificationSid,PartnerSubId = partnerSubId };
            return await FetchAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a PhoneNumberResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> PhoneNumberResource object represented by the provided JSON </returns>
        public static PhoneNumberResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<PhoneNumberResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> International dialing prefix of the phone number defined in the E.164 standard. </summary> 
        [JsonProperty("calling_country_code")]
        public string CallingCountryCode { get; private set; }

        ///<summary> The phone number's [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). </summary> 
        [JsonProperty("country_code")]
        public string CountryCode { get; private set; }

        ///<summary> The phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number. </summary> 
        [JsonProperty("phone_number")]
        [JsonConverter(typeof(PhoneNumberConverter))]
        public Types.PhoneNumber PhoneNumber { get; private set; }

        ///<summary> The phone number in [national format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). </summary> 
        [JsonProperty("national_format")]
        public string NationalFormat { get; private set; }

        ///<summary> Boolean which indicates if the phone number is in a valid range that can be freely assigned by a carrier to a user. </summary> 
        [JsonProperty("valid")]
        public bool? Valid { get; private set; }

        ///<summary> Contains reasons why a phone number is invalid. Possible values: TOO_SHORT, TOO_LONG, INVALID_BUT_POSSIBLE, INVALID_COUNTRY_CODE, INVALID_LENGTH, NOT_A_NUMBER. </summary> 
        [JsonProperty("validation_errors")]
        public List<PhoneNumberResource.ValidationError> ValidationErrors { get; private set; }

        ///<summary> The caller_name </summary> 
        [JsonProperty("caller_name")]
        public CallerName _CallerName { get; private set; }

        ///<summary> The sim_swap </summary> 
        [JsonProperty("sim_swap")]
        public SimSwap _SimSwap { get; private set; }

        ///<summary> The call_forwarding </summary> 
        [JsonProperty("call_forwarding")]
        public CallForwarding _CallForwarding { get; private set; }

        ///<summary> The line_type_intelligence </summary> 
        [JsonProperty("line_type_intelligence")]
        public LineTypeIntelligence _LineTypeIntelligence { get; private set; }

        ///<summary> The line_status </summary> 
        [JsonProperty("line_status")]
        public LineStatus _LineStatus { get; private set; }

        ///<summary> The identity_match </summary> 
        [JsonProperty("identity_match")]
        public IdentityMatch _IdentityMatch { get; private set; }

        ///<summary> The reassigned_number </summary> 
        [JsonProperty("reassigned_number")]
        public ReassignedNumber _ReassignedNumber { get; private set; }

        ///<summary> The sms_pumping_risk </summary> 
        [JsonProperty("sms_pumping_risk")]
        public SmsPumpingRisk _SmsPumpingRisk { get; private set; }

        ///<summary> An object that contains information of a mobile phone number quality score. Quality score will return a risk score about the phone number. </summary> 
        [JsonProperty("phone_number_quality_score")]
        public object PhoneNumberQualityScore { get; private set; }

        ///<summary> An object that contains pre fill information. pre_fill will return PII information associated with the phone number like first name, last name, address line, country code, state and postal code.  </summary> 
        [JsonProperty("pre_fill")]
        public object PreFill { get; private set; }

        ///<summary> The absolute URL of the resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private PhoneNumberResource() {

        }
    }
}

