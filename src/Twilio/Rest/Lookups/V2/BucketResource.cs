/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Lookups.V2
{
    public class BucketResource : Resource
    {
    
        public class RateLimitRequest
        {
            [JsonProperty("limit")]
            private int? Limit {get; set;}
            [JsonProperty("ttl")]
            private int? Ttl {get; set;}
            public RateLimitRequest() { }
            public class Builder
            {
                private RateLimitRequest _rateLimitRequest = new RateLimitRequest();
                public Builder()
                {
                }
                public Builder WithLimit(int? limit)
                {
                    _rateLimitRequest.Limit= limit;
                    return this;
                }
                public Builder WithTtl(int? ttl)
                {
                    _rateLimitRequest.Ttl= ttl;
                    return this;
                }
                public RateLimitRequest Build()
                {
                    return _rateLimitRequest;
                }
            }
        }

    

        
        /// <summary> delete </summary>
        /// <param name="options"> Delete Bucket parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Bucket </returns>
        private static Request BuildDeleteRequest(DeleteBucketOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/RateLimits/Fields/{Field}/Bucket/{Bucket}";

            string PathField = options.PathField;
            path = path.Replace("{"+"Field"+"}", PathField);
            string PathBucket = options.PathBucket;
            path = path.Replace("{"+"Bucket"+"}", PathBucket);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Lookups,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> delete </summary>
        /// <param name="options"> Delete Bucket parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Bucket </returns>
        public static bool Delete(DeleteBucketOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> delete </summary>
        /// <param name="options"> Delete Bucket parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Bucket </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteBucketOptions options,
                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> delete </summary>
        /// <param name="pathField"> bucket name </param>
        /// <param name="pathBucket"> bucket name </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Bucket </returns>
        public static bool Delete(string pathField, string pathBucket, ITwilioRestClient client = null)
        {
            var options = new DeleteBucketOptions(pathField, pathBucket)        ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> delete </summary>
        /// <param name="pathField"> bucket name </param>
        /// <param name="pathBucket"> bucket name </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Bucket </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathField, string pathBucket, ITwilioRestClient client = null)
        {
            var options = new DeleteBucketOptions(pathField, pathBucket) ;
            return await DeleteAsync(options, client);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchBucketOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/RateLimits/Fields/{Field}/Bucket/{Bucket}";

            string PathField = options.PathField;
            path = path.Replace("{"+"Field"+"}", PathField);
            string PathBucket = options.PathBucket;
            path = path.Replace("{"+"Bucket"+"}", PathBucket);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Lookups,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> fetch </summary>
        /// <param name="options"> Fetch Bucket parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Bucket </returns>
        public static BucketResource Fetch(FetchBucketOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="options"> Fetch Bucket parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Bucket </returns>
        public static async System.Threading.Tasks.Task<BucketResource> FetchAsync(FetchBucketOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> fetch </summary>
        /// <param name="pathField"> bucket name </param>
        /// <param name="pathBucket"> bucket name </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Bucket </returns>
        public static BucketResource Fetch(
                                         string pathField, 
                                         string pathBucket, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchBucketOptions(pathField, pathBucket){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="pathField"> bucket name </param>
        /// <param name="pathBucket"> bucket name </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Bucket </returns>
        public static async System.Threading.Tasks.Task<BucketResource> FetchAsync(string pathField, string pathBucket, ITwilioRestClient client = null)
        {
            var options = new FetchBucketOptions(pathField, pathBucket){  };
            return await FetchAsync(options, client);
        }
        #endif
        
        private static Request BuildUpdateRequest(UpdateBucketOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/RateLimits/Fields/{Field}/Bucket/{Bucket}";

            string PathField = options.PathField;
            path = path.Replace("{"+"Field"+"}", PathField);
            string PathBucket = options.PathBucket;
            path = path.Replace("{"+"Bucket"+"}", PathBucket);

            return new Request(
                HttpMethod.Put,
                Rest.Domain.Lookups,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> update </summary>
        /// <param name="options"> Update Bucket parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Bucket </returns>
        public static BucketResource Update(UpdateBucketOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> update </summary>
        /// <param name="options"> Update Bucket parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Bucket </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<BucketResource> UpdateAsync(UpdateBucketOptions options,
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> update </summary>
        /// <param name="pathField"> field name </param>
        /// <param name="pathBucket"> bucket name </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Bucket </returns>
        public static BucketResource Update(
                                          string pathField,
                                          string pathBucket,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateBucketOptions(pathField, pathBucket){  };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> update </summary>
        /// <param name="pathField"> field name </param>
        /// <param name="pathBucket"> bucket name </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Bucket </returns>
        public static async System.Threading.Tasks.Task<BucketResource> UpdateAsync(
                                                                              string pathField,
                                                                              string pathBucket,
                                                                                ITwilioRestClient client = null)
        {
            var options = new UpdateBucketOptions(pathField, pathBucket){  };
            return await UpdateAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a BucketResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> BucketResource object represented by the provided JSON </returns>
        public static BucketResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<BucketResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> Limit of requests for the bucket </summary> 
        [JsonProperty("field")]
        public string Field { get; private set; }

        ///<summary> Limit of requests for the bucket </summary> 
        [JsonProperty("limit")]
        public int? Limit { get; private set; }

        ///<summary> Name of the bucket </summary> 
        [JsonProperty("bucket")]
        public string Bucket { get; private set; }

        ///<summary> Owner of the rule </summary> 
        [JsonProperty("owner")]
        public string Owner { get; private set; }

        ///<summary> Time to live of the rule </summary> 
        [JsonProperty("ttl")]
        public int? Ttl { get; private set; }



        private BucketResource() {

        }
    }
}

