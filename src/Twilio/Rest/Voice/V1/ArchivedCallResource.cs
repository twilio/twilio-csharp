/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Voice.V1
{
    public class ArchivedCallResource : Resource
    {
    

    

        
        /// <summary> Delete an archived call record from Bulk Export. Note: this does not also delete the record from the Voice API. </summary>
        /// <param name="options"> Delete ArchivedCall parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ArchivedCall </returns>
        private static Request BuildDeleteRequest(DeleteArchivedCallOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Archives/{Date}/Calls/{Sid}";

            string PathDate = options.PathDate.Value.ToString("yyyy-MM-dd");
            path = path.Replace("{"+"Date"+"}", PathDate);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Voice,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Delete an archived call record from Bulk Export. Note: this does not also delete the record from the Voice API. </summary>
        /// <param name="options"> Delete ArchivedCall parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ArchivedCall </returns>
        public static bool Delete(DeleteArchivedCallOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> Delete an archived call record from Bulk Export. Note: this does not also delete the record from the Voice API. </summary>
        /// <param name="options"> Delete ArchivedCall parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ArchivedCall </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteArchivedCallOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> Delete an archived call record from Bulk Export. Note: this does not also delete the record from the Voice API. </summary>
        /// <param name="pathDate"> The date of the Call in UTC. </param>
        /// <param name="pathSid"> The Twilio-provided Call SID that uniquely identifies the Call resource to delete </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ArchivedCall </returns>
        public static bool Delete(DateTime? pathDate, string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteArchivedCallOptions(pathDate, pathSid)        ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> Delete an archived call record from Bulk Export. Note: this does not also delete the record from the Voice API. </summary>
        /// <param name="pathDate"> The date of the Call in UTC. </param>
        /// <param name="pathSid"> The Twilio-provided Call SID that uniquely identifies the Call resource to delete </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ArchivedCall </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DateTime? pathDate, string pathSid, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteArchivedCallOptions(pathDate, pathSid) ;
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ArchivedCallResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ArchivedCallResource object represented by the provided JSON </returns>
        public static ArchivedCallResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ArchivedCallResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    


        private ArchivedCallResource() {

        }
    }
}

