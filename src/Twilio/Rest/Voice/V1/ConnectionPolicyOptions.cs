/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Voice.V1
{

    /// <summary> create </summary>
    public class CreateConnectionPolicyOptions : IOptions<ConnectionPolicyResource>
    {
        
        ///<summary> A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. </summary> 
        public string FriendlyName { get; set; }



        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            return p;
        }

        

    }
    /// <summary> delete </summary>
    public class DeleteConnectionPolicyOptions : IOptions<ConnectionPolicyResource>
    {
        
        ///<summary> The unique string that we created to identify the Connection Policy resource to delete. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteConnectionPolicyOptions </summary>
        /// <param name="pathSid"> The unique string that we created to identify the Connection Policy resource to delete. </param>
        public DeleteConnectionPolicyOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> fetch </summary>
    public class FetchConnectionPolicyOptions : IOptions<ConnectionPolicyResource>
    {
    
        ///<summary> The unique string that we created to identify the Connection Policy resource to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchConnectionPolicyOptions </summary>
        /// <param name="pathSid"> The unique string that we created to identify the Connection Policy resource to fetch. </param>
        public FetchConnectionPolicyOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> read </summary>
    public class ReadConnectionPolicyOptions : ReadOptions<ConnectionPolicyResource>
    {
    



        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> update </summary>
    public class UpdateConnectionPolicyOptions : IOptions<ConnectionPolicyResource>
    {
    
        ///<summary> The unique string that we created to identify the Connection Policy resource to update. </summary> 
        public string PathSid { get; }

        ///<summary> A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. </summary> 
        public string FriendlyName { get; set; }



        /// <summary> Construct a new UpdateConnectionPolicyOptions </summary>
        /// <param name="pathSid"> The unique string that we created to identify the Connection Policy resource to update. </param>
        public UpdateConnectionPolicyOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            return p;
        }

        

    }


}

