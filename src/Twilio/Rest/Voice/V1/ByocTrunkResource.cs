/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Voice.V1
{
    public class ByocTrunkResource : Resource
    {
    

    

        
        private static Request BuildCreateRequest(CreateByocTrunkOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/ByocTrunks";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Voice,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> create </summary>
        /// <param name="options"> Create ByocTrunk parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ByocTrunk </returns>
        public static ByocTrunkResource Create(CreateByocTrunkOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="options"> Create ByocTrunk parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ByocTrunk </returns>
        public static async System.Threading.Tasks.Task<ByocTrunkResource> CreateAsync(CreateByocTrunkOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> create </summary>
        /// <param name="friendlyName"> A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. </param>
        /// <param name="voiceUrl"> The URL we should call when the BYOC Trunk receives a call. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="statusCallbackUrl"> The URL that we should call to pass status parameters (such as call ended) to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="cnamLookupEnabled"> Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. </param>
        /// <param name="connectionPolicySid"> The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. </param>
        /// <param name="fromDomainSid"> The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\"call back\\\" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\"sip.twilio.com\\\". </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ByocTrunk </returns>
        public static ByocTrunkResource Create(
                                          string friendlyName = null,
                                          Uri voiceUrl = null,
                                          Twilio.Http.HttpMethod voiceMethod = null,
                                          Uri voiceFallbackUrl = null,
                                          Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                          Uri statusCallbackUrl = null,
                                          Twilio.Http.HttpMethod statusCallbackMethod = null,
                                          bool? cnamLookupEnabled = null,
                                          string connectionPolicySid = null,
                                          string fromDomainSid = null,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateByocTrunkOptions(){  FriendlyName = friendlyName, VoiceUrl = voiceUrl, VoiceMethod = voiceMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceFallbackMethod = voiceFallbackMethod, StatusCallbackUrl = statusCallbackUrl, StatusCallbackMethod = statusCallbackMethod, CnamLookupEnabled = cnamLookupEnabled, ConnectionPolicySid = connectionPolicySid, FromDomainSid = fromDomainSid };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="friendlyName"> A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. </param>
        /// <param name="voiceUrl"> The URL we should call when the BYOC Trunk receives a call. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`. </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="statusCallbackUrl"> The URL that we should call to pass status parameters (such as call ended) to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="cnamLookupEnabled"> Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. </param>
        /// <param name="connectionPolicySid"> The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. </param>
        /// <param name="fromDomainSid"> The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\"call back\\\" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\"sip.twilio.com\\\". </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ByocTrunk </returns>
        public static async System.Threading.Tasks.Task<ByocTrunkResource> CreateAsync(
                                                                                  string friendlyName = null,
                                                                                  Uri voiceUrl = null,
                                                                                  Twilio.Http.HttpMethod voiceMethod = null,
                                                                                  Uri voiceFallbackUrl = null,
                                                                                  Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                                                                  Uri statusCallbackUrl = null,
                                                                                  Twilio.Http.HttpMethod statusCallbackMethod = null,
                                                                                  bool? cnamLookupEnabled = null,
                                                                                  string connectionPolicySid = null,
                                                                                  string fromDomainSid = null,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateByocTrunkOptions(){  FriendlyName = friendlyName, VoiceUrl = voiceUrl, VoiceMethod = voiceMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceFallbackMethod = voiceFallbackMethod, StatusCallbackUrl = statusCallbackUrl, StatusCallbackMethod = statusCallbackMethod, CnamLookupEnabled = cnamLookupEnabled, ConnectionPolicySid = connectionPolicySid, FromDomainSid = fromDomainSid };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        /// <summary> delete </summary>
        /// <param name="options"> Delete ByocTrunk parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ByocTrunk </returns>
        private static Request BuildDeleteRequest(DeleteByocTrunkOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/ByocTrunks/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Voice,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> delete </summary>
        /// <param name="options"> Delete ByocTrunk parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ByocTrunk </returns>
        public static bool Delete(DeleteByocTrunkOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> delete </summary>
        /// <param name="options"> Delete ByocTrunk parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ByocTrunk </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteByocTrunkOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> delete </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the BYOC Trunk resource to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ByocTrunk </returns>
        public static bool Delete(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteByocTrunkOptions(pathSid)     ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> delete </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the BYOC Trunk resource to delete. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ByocTrunk </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteByocTrunkOptions(pathSid) ;
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchByocTrunkOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/ByocTrunks/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Voice,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> fetch </summary>
        /// <param name="options"> Fetch ByocTrunk parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ByocTrunk </returns>
        public static ByocTrunkResource Fetch(FetchByocTrunkOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="options"> Fetch ByocTrunk parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ByocTrunk </returns>
        public static async System.Threading.Tasks.Task<ByocTrunkResource> FetchAsync(FetchByocTrunkOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> fetch </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the BYOC Trunk resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ByocTrunk </returns>
        public static ByocTrunkResource Fetch(
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchByocTrunkOptions(pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the BYOC Trunk resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ByocTrunk </returns>
        public static async System.Threading.Tasks.Task<ByocTrunkResource> FetchAsync(string pathSid, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchByocTrunkOptions(pathSid){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadByocTrunkOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/ByocTrunks";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Voice,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> read </summary>
        /// <param name="options"> Read ByocTrunk parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ByocTrunk </returns>
        public static ResourceSet<ByocTrunkResource> Read(ReadByocTrunkOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<ByocTrunkResource>.FromJson("byoc_trunks", response.Content);
            return new ResourceSet<ByocTrunkResource>(page, options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="options"> Read ByocTrunk parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ByocTrunk </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ByocTrunkResource>> ReadAsync(ReadByocTrunkOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<ByocTrunkResource>.FromJson("byoc_trunks", response.Content);
            return new ResourceSet<ByocTrunkResource>(page, options, client);
        }
        #endif
        /// <summary> read </summary>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ByocTrunk </returns>
        public static ResourceSet<ByocTrunkResource> Read(
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadByocTrunkOptions(){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ByocTrunk </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ByocTrunkResource>> ReadAsync(
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadByocTrunkOptions(){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<ByocTrunkResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<ByocTrunkResource>.FromJson("byoc_trunks", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<ByocTrunkResource> NextPage(Page<ByocTrunkResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ByocTrunkResource>.FromJson("byoc_trunks", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<ByocTrunkResource> PreviousPage(Page<ByocTrunkResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ByocTrunkResource>.FromJson("byoc_trunks", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateByocTrunkOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/ByocTrunks/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Voice,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> update </summary>
        /// <param name="options"> Update ByocTrunk parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ByocTrunk </returns>
        public static ByocTrunkResource Update(UpdateByocTrunkOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> update </summary>
        /// <param name="options"> Update ByocTrunk parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ByocTrunk </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<ByocTrunkResource> UpdateAsync(UpdateByocTrunkOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> update </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the BYOC Trunk resource to update. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. </param>
        /// <param name="voiceUrl"> The URL we should call when the BYOC Trunk receives a call. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url` </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="statusCallbackUrl"> The URL that we should call to pass status parameters (such as call ended) to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="cnamLookupEnabled"> Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. </param>
        /// <param name="connectionPolicySid"> The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. </param>
        /// <param name="fromDomainSid"> The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\"call back\\\" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\"sip.twilio.com\\\". </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ByocTrunk </returns>
        public static ByocTrunkResource Update(
                                          string pathSid,
                                          string friendlyName = null,
                                          Uri voiceUrl = null,
                                          Twilio.Http.HttpMethod voiceMethod = null,
                                          Uri voiceFallbackUrl = null,
                                          Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                          Uri statusCallbackUrl = null,
                                          Twilio.Http.HttpMethod statusCallbackMethod = null,
                                          bool? cnamLookupEnabled = null,
                                          string connectionPolicySid = null,
                                          string fromDomainSid = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateByocTrunkOptions(pathSid){ FriendlyName = friendlyName, VoiceUrl = voiceUrl, VoiceMethod = voiceMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceFallbackMethod = voiceFallbackMethod, StatusCallbackUrl = statusCallbackUrl, StatusCallbackMethod = statusCallbackMethod, CnamLookupEnabled = cnamLookupEnabled, ConnectionPolicySid = connectionPolicySid, FromDomainSid = fromDomainSid };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> update </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the BYOC Trunk resource to update. </param>
        /// <param name="friendlyName"> A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. </param>
        /// <param name="voiceUrl"> The URL we should call when the BYOC Trunk receives a call. </param>
        /// <param name="voiceMethod"> The HTTP method we should use to call `voice_url` </param>
        /// <param name="voiceFallbackUrl"> The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`. </param>
        /// <param name="voiceFallbackMethod"> The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="statusCallbackUrl"> The URL that we should call to pass status parameters (such as call ended) to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`. </param>
        /// <param name="cnamLookupEnabled"> Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. </param>
        /// <param name="connectionPolicySid"> The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. </param>
        /// <param name="fromDomainSid"> The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\"call back\\\" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\"sip.twilio.com\\\". </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ByocTrunk </returns>
        public static async System.Threading.Tasks.Task<ByocTrunkResource> UpdateAsync(
                                                                              string pathSid,
                                                                              string friendlyName = null,
                                                                              Uri voiceUrl = null,
                                                                              Twilio.Http.HttpMethod voiceMethod = null,
                                                                              Uri voiceFallbackUrl = null,
                                                                              Twilio.Http.HttpMethod voiceFallbackMethod = null,
                                                                              Uri statusCallbackUrl = null,
                                                                              Twilio.Http.HttpMethod statusCallbackMethod = null,
                                                                              bool? cnamLookupEnabled = null,
                                                                              string connectionPolicySid = null,
                                                                              string fromDomainSid = null,
                                                                                ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateByocTrunkOptions(pathSid){ FriendlyName = friendlyName, VoiceUrl = voiceUrl, VoiceMethod = voiceMethod, VoiceFallbackUrl = voiceFallbackUrl, VoiceFallbackMethod = voiceFallbackMethod, StatusCallbackUrl = statusCallbackUrl, StatusCallbackMethod = statusCallbackMethod, CnamLookupEnabled = cnamLookupEnabled, ConnectionPolicySid = connectionPolicySid, FromDomainSid = fromDomainSid };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ByocTrunkResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ByocTrunkResource object represented by the provided JSON </returns>
        public static ByocTrunkResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ByocTrunkResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the BYOC Trunk resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The unique string that that we created to identify the BYOC Trunk resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The string that you assigned to describe the resource. </summary> 
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }

        ///<summary> The URL we call using the `voice_method` when the BYOC Trunk receives a call. </summary> 
        [JsonProperty("voice_url")]
        public Uri VoiceUrl { get; private set; }

        ///<summary> The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`. </summary> 
        [JsonProperty("voice_method")]
        public Twilio.Http.HttpMethod VoiceMethod { get; private set; }

        ///<summary> The URL that we call when an error occurs while retrieving or executing the TwiML requested from `voice_url`. </summary> 
        [JsonProperty("voice_fallback_url")]
        public Uri VoiceFallbackUrl { get; private set; }

        ///<summary> The HTTP method we use to call `voice_fallback_url`. Can be: `GET` or `POST`. </summary> 
        [JsonProperty("voice_fallback_method")]
        public Twilio.Http.HttpMethod VoiceFallbackMethod { get; private set; }

        ///<summary> The URL that we call to pass status parameters (such as call ended) to your application. </summary> 
        [JsonProperty("status_callback_url")]
        public Uri StatusCallbackUrl { get; private set; }

        ///<summary> The HTTP method we use to call `status_callback_url`. Either `GET` or `POST`. </summary> 
        [JsonProperty("status_callback_method")]
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; private set; }

        ///<summary> Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. </summary> 
        [JsonProperty("cnam_lookup_enabled")]
        public bool? CnamLookupEnabled { get; private set; }

        ///<summary> The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. </summary> 
        [JsonProperty("connection_policy_sid")]
        public string ConnectionPolicySid { get; private set; }

        ///<summary> The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \"call back\" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \"sip.twilio.com\". </summary> 
        [JsonProperty("from_domain_sid")]
        public string FromDomainSid { get; private set; }

        ///<summary> The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The absolute URL of the resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private ByocTrunkResource() {

        }
    }
}

