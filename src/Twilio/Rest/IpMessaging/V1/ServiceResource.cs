/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.IpMessaging.V1
{
    public class ServiceResource : Resource
    {
    

    

        
        private static Request BuildCreateRequest(CreateServiceOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Services";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.IpMessaging,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> create </summary>
        /// <param name="options"> Create Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Create(CreateServiceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="options"> Create Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ServiceResource> CreateAsync(CreateServiceOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> create </summary>
        /// <param name="friendlyName">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Create(
                                          string friendlyName,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateServiceOptions(friendlyName){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="friendlyName">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ServiceResource> CreateAsync(
                                                                                  string friendlyName,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateServiceOptions(friendlyName){  };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        /// <summary> delete </summary>
        /// <param name="options"> Delete Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        private static Request BuildDeleteRequest(DeleteServiceOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Services/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.IpMessaging,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> delete </summary>
        /// <param name="options"> Delete Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static bool Delete(DeleteServiceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> delete </summary>
        /// <param name="options"> Delete Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteServiceOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> delete </summary>
        /// <param name="pathSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static bool Delete(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteServiceOptions(pathSid)     ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> delete </summary>
        /// <param name="pathSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteServiceOptions(pathSid) ;
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchServiceOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Services/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.IpMessaging,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> fetch </summary>
        /// <param name="options"> Fetch Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Fetch(FetchServiceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="options"> Fetch Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ServiceResource> FetchAsync(FetchServiceOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> fetch </summary>
        /// <param name="pathSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Fetch(
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchServiceOptions(pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="pathSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ServiceResource> FetchAsync(string pathSid, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchServiceOptions(pathSid){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadServiceOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Services";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.IpMessaging,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> read </summary>
        /// <param name="options"> Read Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ResourceSet<ServiceResource> Read(ReadServiceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<ServiceResource>.FromJson("services", response.Content);
            return new ResourceSet<ServiceResource>(page, options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="options"> Read Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ServiceResource>> ReadAsync(ReadServiceOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<ServiceResource>.FromJson("services", response.Content);
            return new ResourceSet<ServiceResource>(page, options, client);
        }
        #endif
        /// <summary> read </summary>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ResourceSet<ServiceResource> Read(
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadServiceOptions(){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ServiceResource>> ReadAsync(
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadServiceOptions(){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<ServiceResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<ServiceResource>.FromJson("services", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<ServiceResource> NextPage(Page<ServiceResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ServiceResource>.FromJson("services", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<ServiceResource> PreviousPage(Page<ServiceResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ServiceResource>.FromJson("services", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateServiceOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Services/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.IpMessaging,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> update </summary>
        /// <param name="options"> Update Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Update(UpdateServiceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> update </summary>
        /// <param name="options"> Update Service parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<ServiceResource> UpdateAsync(UpdateServiceOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> update </summary>
        /// <param name="pathSid">  </param>
        /// <param name="friendlyName">  </param>
        /// <param name="defaultServiceRoleSid">  </param>
        /// <param name="defaultChannelRoleSid">  </param>
        /// <param name="defaultChannelCreatorRoleSid">  </param>
        /// <param name="readStatusEnabled">  </param>
        /// <param name="reachabilityEnabled">  </param>
        /// <param name="typingIndicatorTimeout">  </param>
        /// <param name="consumptionReportInterval">  </param>
        /// <param name="notificationsNewMessageEnabled">  </param>
        /// <param name="notificationsNewMessageTemplate">  </param>
        /// <param name="notificationsAddedToChannelEnabled">  </param>
        /// <param name="notificationsAddedToChannelTemplate">  </param>
        /// <param name="notificationsRemovedFromChannelEnabled">  </param>
        /// <param name="notificationsRemovedFromChannelTemplate">  </param>
        /// <param name="notificationsInvitedToChannelEnabled">  </param>
        /// <param name="notificationsInvitedToChannelTemplate">  </param>
        /// <param name="preWebhookUrl">  </param>
        /// <param name="postWebhookUrl">  </param>
        /// <param name="webhookMethod">  </param>
        /// <param name="webhookFilters">  </param>
        /// <param name="webhooksOnMessageSendUrl">  </param>
        /// <param name="webhooksOnMessageSendMethod">  </param>
        /// <param name="webhooksOnMessageUpdateUrl">  </param>
        /// <param name="webhooksOnMessageUpdateMethod">  </param>
        /// <param name="webhooksOnMessageRemoveUrl">  </param>
        /// <param name="webhooksOnMessageRemoveMethod">  </param>
        /// <param name="webhooksOnChannelAddUrl">  </param>
        /// <param name="webhooksOnChannelAddMethod">  </param>
        /// <param name="webhooksOnChannelDestroyUrl">  </param>
        /// <param name="webhooksOnChannelDestroyMethod">  </param>
        /// <param name="webhooksOnChannelUpdateUrl">  </param>
        /// <param name="webhooksOnChannelUpdateMethod">  </param>
        /// <param name="webhooksOnMemberAddUrl">  </param>
        /// <param name="webhooksOnMemberAddMethod">  </param>
        /// <param name="webhooksOnMemberRemoveUrl">  </param>
        /// <param name="webhooksOnMemberRemoveMethod">  </param>
        /// <param name="webhooksOnMessageSentUrl">  </param>
        /// <param name="webhooksOnMessageSentMethod">  </param>
        /// <param name="webhooksOnMessageUpdatedUrl">  </param>
        /// <param name="webhooksOnMessageUpdatedMethod">  </param>
        /// <param name="webhooksOnMessageRemovedUrl">  </param>
        /// <param name="webhooksOnMessageRemovedMethod">  </param>
        /// <param name="webhooksOnChannelAddedUrl">  </param>
        /// <param name="webhooksOnChannelAddedMethod">  </param>
        /// <param name="webhooksOnChannelDestroyedUrl">  </param>
        /// <param name="webhooksOnChannelDestroyedMethod">  </param>
        /// <param name="webhooksOnChannelUpdatedUrl">  </param>
        /// <param name="webhooksOnChannelUpdatedMethod">  </param>
        /// <param name="webhooksOnMemberAddedUrl">  </param>
        /// <param name="webhooksOnMemberAddedMethod">  </param>
        /// <param name="webhooksOnMemberRemovedUrl">  </param>
        /// <param name="webhooksOnMemberRemovedMethod">  </param>
        /// <param name="limitsChannelMembers">  </param>
        /// <param name="limitsUserChannels">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Service </returns>
        public static ServiceResource Update(
                                          string pathSid,
                                          string friendlyName = null,
                                          string defaultServiceRoleSid = null,
                                          string defaultChannelRoleSid = null,
                                          string defaultChannelCreatorRoleSid = null,
                                          bool? readStatusEnabled = null,
                                          bool? reachabilityEnabled = null,
                                          int? typingIndicatorTimeout = null,
                                          int? consumptionReportInterval = null,
                                          bool? notificationsNewMessageEnabled = null,
                                          string notificationsNewMessageTemplate = null,
                                          bool? notificationsAddedToChannelEnabled = null,
                                          string notificationsAddedToChannelTemplate = null,
                                          bool? notificationsRemovedFromChannelEnabled = null,
                                          string notificationsRemovedFromChannelTemplate = null,
                                          bool? notificationsInvitedToChannelEnabled = null,
                                          string notificationsInvitedToChannelTemplate = null,
                                          Uri preWebhookUrl = null,
                                          Uri postWebhookUrl = null,
                                          Twilio.Http.HttpMethod webhookMethod = null,
                                          List<string> webhookFilters = null,
                                          Uri webhooksOnMessageSendUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnMessageSendMethod = null,
                                          Uri webhooksOnMessageUpdateUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnMessageUpdateMethod = null,
                                          Uri webhooksOnMessageRemoveUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnMessageRemoveMethod = null,
                                          Uri webhooksOnChannelAddUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnChannelAddMethod = null,
                                          Uri webhooksOnChannelDestroyUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnChannelDestroyMethod = null,
                                          Uri webhooksOnChannelUpdateUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnChannelUpdateMethod = null,
                                          Uri webhooksOnMemberAddUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnMemberAddMethod = null,
                                          Uri webhooksOnMemberRemoveUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnMemberRemoveMethod = null,
                                          Uri webhooksOnMessageSentUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnMessageSentMethod = null,
                                          Uri webhooksOnMessageUpdatedUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnMessageUpdatedMethod = null,
                                          Uri webhooksOnMessageRemovedUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnMessageRemovedMethod = null,
                                          Uri webhooksOnChannelAddedUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnChannelAddedMethod = null,
                                          Uri webhooksOnChannelDestroyedUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnChannelDestroyedMethod = null,
                                          Uri webhooksOnChannelUpdatedUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnChannelUpdatedMethod = null,
                                          Uri webhooksOnMemberAddedUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnMemberAddedMethod = null,
                                          Uri webhooksOnMemberRemovedUrl = null,
                                          Twilio.Http.HttpMethod webhooksOnMemberRemovedMethod = null,
                                          int? limitsChannelMembers = null,
                                          int? limitsUserChannels = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateServiceOptions(pathSid){ FriendlyName = friendlyName, DefaultServiceRoleSid = defaultServiceRoleSid, DefaultChannelRoleSid = defaultChannelRoleSid, DefaultChannelCreatorRoleSid = defaultChannelCreatorRoleSid, ReadStatusEnabled = readStatusEnabled, ReachabilityEnabled = reachabilityEnabled, TypingIndicatorTimeout = typingIndicatorTimeout, ConsumptionReportInterval = consumptionReportInterval, NotificationsNewMessageEnabled = notificationsNewMessageEnabled, NotificationsNewMessageTemplate = notificationsNewMessageTemplate, NotificationsAddedToChannelEnabled = notificationsAddedToChannelEnabled, NotificationsAddedToChannelTemplate = notificationsAddedToChannelTemplate, NotificationsRemovedFromChannelEnabled = notificationsRemovedFromChannelEnabled, NotificationsRemovedFromChannelTemplate = notificationsRemovedFromChannelTemplate, NotificationsInvitedToChannelEnabled = notificationsInvitedToChannelEnabled, NotificationsInvitedToChannelTemplate = notificationsInvitedToChannelTemplate, PreWebhookUrl = preWebhookUrl, PostWebhookUrl = postWebhookUrl, WebhookMethod = webhookMethod, WebhookFilters = webhookFilters, WebhooksOnMessageSendUrl = webhooksOnMessageSendUrl, WebhooksOnMessageSendMethod = webhooksOnMessageSendMethod, WebhooksOnMessageUpdateUrl = webhooksOnMessageUpdateUrl, WebhooksOnMessageUpdateMethod = webhooksOnMessageUpdateMethod, WebhooksOnMessageRemoveUrl = webhooksOnMessageRemoveUrl, WebhooksOnMessageRemoveMethod = webhooksOnMessageRemoveMethod, WebhooksOnChannelAddUrl = webhooksOnChannelAddUrl, WebhooksOnChannelAddMethod = webhooksOnChannelAddMethod, WebhooksOnChannelDestroyUrl = webhooksOnChannelDestroyUrl, WebhooksOnChannelDestroyMethod = webhooksOnChannelDestroyMethod, WebhooksOnChannelUpdateUrl = webhooksOnChannelUpdateUrl, WebhooksOnChannelUpdateMethod = webhooksOnChannelUpdateMethod, WebhooksOnMemberAddUrl = webhooksOnMemberAddUrl, WebhooksOnMemberAddMethod = webhooksOnMemberAddMethod, WebhooksOnMemberRemoveUrl = webhooksOnMemberRemoveUrl, WebhooksOnMemberRemoveMethod = webhooksOnMemberRemoveMethod, WebhooksOnMessageSentUrl = webhooksOnMessageSentUrl, WebhooksOnMessageSentMethod = webhooksOnMessageSentMethod, WebhooksOnMessageUpdatedUrl = webhooksOnMessageUpdatedUrl, WebhooksOnMessageUpdatedMethod = webhooksOnMessageUpdatedMethod, WebhooksOnMessageRemovedUrl = webhooksOnMessageRemovedUrl, WebhooksOnMessageRemovedMethod = webhooksOnMessageRemovedMethod, WebhooksOnChannelAddedUrl = webhooksOnChannelAddedUrl, WebhooksOnChannelAddedMethod = webhooksOnChannelAddedMethod, WebhooksOnChannelDestroyedUrl = webhooksOnChannelDestroyedUrl, WebhooksOnChannelDestroyedMethod = webhooksOnChannelDestroyedMethod, WebhooksOnChannelUpdatedUrl = webhooksOnChannelUpdatedUrl, WebhooksOnChannelUpdatedMethod = webhooksOnChannelUpdatedMethod, WebhooksOnMemberAddedUrl = webhooksOnMemberAddedUrl, WebhooksOnMemberAddedMethod = webhooksOnMemberAddedMethod, WebhooksOnMemberRemovedUrl = webhooksOnMemberRemovedUrl, WebhooksOnMemberRemovedMethod = webhooksOnMemberRemovedMethod, LimitsChannelMembers = limitsChannelMembers, LimitsUserChannels = limitsUserChannels };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> update </summary>
        /// <param name="pathSid">  </param>
        /// <param name="friendlyName">  </param>
        /// <param name="defaultServiceRoleSid">  </param>
        /// <param name="defaultChannelRoleSid">  </param>
        /// <param name="defaultChannelCreatorRoleSid">  </param>
        /// <param name="readStatusEnabled">  </param>
        /// <param name="reachabilityEnabled">  </param>
        /// <param name="typingIndicatorTimeout">  </param>
        /// <param name="consumptionReportInterval">  </param>
        /// <param name="notificationsNewMessageEnabled">  </param>
        /// <param name="notificationsNewMessageTemplate">  </param>
        /// <param name="notificationsAddedToChannelEnabled">  </param>
        /// <param name="notificationsAddedToChannelTemplate">  </param>
        /// <param name="notificationsRemovedFromChannelEnabled">  </param>
        /// <param name="notificationsRemovedFromChannelTemplate">  </param>
        /// <param name="notificationsInvitedToChannelEnabled">  </param>
        /// <param name="notificationsInvitedToChannelTemplate">  </param>
        /// <param name="preWebhookUrl">  </param>
        /// <param name="postWebhookUrl">  </param>
        /// <param name="webhookMethod">  </param>
        /// <param name="webhookFilters">  </param>
        /// <param name="webhooksOnMessageSendUrl">  </param>
        /// <param name="webhooksOnMessageSendMethod">  </param>
        /// <param name="webhooksOnMessageUpdateUrl">  </param>
        /// <param name="webhooksOnMessageUpdateMethod">  </param>
        /// <param name="webhooksOnMessageRemoveUrl">  </param>
        /// <param name="webhooksOnMessageRemoveMethod">  </param>
        /// <param name="webhooksOnChannelAddUrl">  </param>
        /// <param name="webhooksOnChannelAddMethod">  </param>
        /// <param name="webhooksOnChannelDestroyUrl">  </param>
        /// <param name="webhooksOnChannelDestroyMethod">  </param>
        /// <param name="webhooksOnChannelUpdateUrl">  </param>
        /// <param name="webhooksOnChannelUpdateMethod">  </param>
        /// <param name="webhooksOnMemberAddUrl">  </param>
        /// <param name="webhooksOnMemberAddMethod">  </param>
        /// <param name="webhooksOnMemberRemoveUrl">  </param>
        /// <param name="webhooksOnMemberRemoveMethod">  </param>
        /// <param name="webhooksOnMessageSentUrl">  </param>
        /// <param name="webhooksOnMessageSentMethod">  </param>
        /// <param name="webhooksOnMessageUpdatedUrl">  </param>
        /// <param name="webhooksOnMessageUpdatedMethod">  </param>
        /// <param name="webhooksOnMessageRemovedUrl">  </param>
        /// <param name="webhooksOnMessageRemovedMethod">  </param>
        /// <param name="webhooksOnChannelAddedUrl">  </param>
        /// <param name="webhooksOnChannelAddedMethod">  </param>
        /// <param name="webhooksOnChannelDestroyedUrl">  </param>
        /// <param name="webhooksOnChannelDestroyedMethod">  </param>
        /// <param name="webhooksOnChannelUpdatedUrl">  </param>
        /// <param name="webhooksOnChannelUpdatedMethod">  </param>
        /// <param name="webhooksOnMemberAddedUrl">  </param>
        /// <param name="webhooksOnMemberAddedMethod">  </param>
        /// <param name="webhooksOnMemberRemovedUrl">  </param>
        /// <param name="webhooksOnMemberRemovedMethod">  </param>
        /// <param name="limitsChannelMembers">  </param>
        /// <param name="limitsUserChannels">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Service </returns>
        public static async System.Threading.Tasks.Task<ServiceResource> UpdateAsync(
                                                                              string pathSid,
                                                                              string friendlyName = null,
                                                                              string defaultServiceRoleSid = null,
                                                                              string defaultChannelRoleSid = null,
                                                                              string defaultChannelCreatorRoleSid = null,
                                                                              bool? readStatusEnabled = null,
                                                                              bool? reachabilityEnabled = null,
                                                                              int? typingIndicatorTimeout = null,
                                                                              int? consumptionReportInterval = null,
                                                                              bool? notificationsNewMessageEnabled = null,
                                                                              string notificationsNewMessageTemplate = null,
                                                                              bool? notificationsAddedToChannelEnabled = null,
                                                                              string notificationsAddedToChannelTemplate = null,
                                                                              bool? notificationsRemovedFromChannelEnabled = null,
                                                                              string notificationsRemovedFromChannelTemplate = null,
                                                                              bool? notificationsInvitedToChannelEnabled = null,
                                                                              string notificationsInvitedToChannelTemplate = null,
                                                                              Uri preWebhookUrl = null,
                                                                              Uri postWebhookUrl = null,
                                                                              Twilio.Http.HttpMethod webhookMethod = null,
                                                                              List<string> webhookFilters = null,
                                                                              Uri webhooksOnMessageSendUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnMessageSendMethod = null,
                                                                              Uri webhooksOnMessageUpdateUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnMessageUpdateMethod = null,
                                                                              Uri webhooksOnMessageRemoveUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnMessageRemoveMethod = null,
                                                                              Uri webhooksOnChannelAddUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnChannelAddMethod = null,
                                                                              Uri webhooksOnChannelDestroyUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnChannelDestroyMethod = null,
                                                                              Uri webhooksOnChannelUpdateUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnChannelUpdateMethod = null,
                                                                              Uri webhooksOnMemberAddUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnMemberAddMethod = null,
                                                                              Uri webhooksOnMemberRemoveUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnMemberRemoveMethod = null,
                                                                              Uri webhooksOnMessageSentUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnMessageSentMethod = null,
                                                                              Uri webhooksOnMessageUpdatedUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnMessageUpdatedMethod = null,
                                                                              Uri webhooksOnMessageRemovedUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnMessageRemovedMethod = null,
                                                                              Uri webhooksOnChannelAddedUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnChannelAddedMethod = null,
                                                                              Uri webhooksOnChannelDestroyedUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnChannelDestroyedMethod = null,
                                                                              Uri webhooksOnChannelUpdatedUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnChannelUpdatedMethod = null,
                                                                              Uri webhooksOnMemberAddedUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnMemberAddedMethod = null,
                                                                              Uri webhooksOnMemberRemovedUrl = null,
                                                                              Twilio.Http.HttpMethod webhooksOnMemberRemovedMethod = null,
                                                                              int? limitsChannelMembers = null,
                                                                              int? limitsUserChannels = null,
                                                                                ITwilioRestClient client = null, System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateServiceOptions(pathSid){ FriendlyName = friendlyName, DefaultServiceRoleSid = defaultServiceRoleSid, DefaultChannelRoleSid = defaultChannelRoleSid, DefaultChannelCreatorRoleSid = defaultChannelCreatorRoleSid, ReadStatusEnabled = readStatusEnabled, ReachabilityEnabled = reachabilityEnabled, TypingIndicatorTimeout = typingIndicatorTimeout, ConsumptionReportInterval = consumptionReportInterval, NotificationsNewMessageEnabled = notificationsNewMessageEnabled, NotificationsNewMessageTemplate = notificationsNewMessageTemplate, NotificationsAddedToChannelEnabled = notificationsAddedToChannelEnabled, NotificationsAddedToChannelTemplate = notificationsAddedToChannelTemplate, NotificationsRemovedFromChannelEnabled = notificationsRemovedFromChannelEnabled, NotificationsRemovedFromChannelTemplate = notificationsRemovedFromChannelTemplate, NotificationsInvitedToChannelEnabled = notificationsInvitedToChannelEnabled, NotificationsInvitedToChannelTemplate = notificationsInvitedToChannelTemplate, PreWebhookUrl = preWebhookUrl, PostWebhookUrl = postWebhookUrl, WebhookMethod = webhookMethod, WebhookFilters = webhookFilters, WebhooksOnMessageSendUrl = webhooksOnMessageSendUrl, WebhooksOnMessageSendMethod = webhooksOnMessageSendMethod, WebhooksOnMessageUpdateUrl = webhooksOnMessageUpdateUrl, WebhooksOnMessageUpdateMethod = webhooksOnMessageUpdateMethod, WebhooksOnMessageRemoveUrl = webhooksOnMessageRemoveUrl, WebhooksOnMessageRemoveMethod = webhooksOnMessageRemoveMethod, WebhooksOnChannelAddUrl = webhooksOnChannelAddUrl, WebhooksOnChannelAddMethod = webhooksOnChannelAddMethod, WebhooksOnChannelDestroyUrl = webhooksOnChannelDestroyUrl, WebhooksOnChannelDestroyMethod = webhooksOnChannelDestroyMethod, WebhooksOnChannelUpdateUrl = webhooksOnChannelUpdateUrl, WebhooksOnChannelUpdateMethod = webhooksOnChannelUpdateMethod, WebhooksOnMemberAddUrl = webhooksOnMemberAddUrl, WebhooksOnMemberAddMethod = webhooksOnMemberAddMethod, WebhooksOnMemberRemoveUrl = webhooksOnMemberRemoveUrl, WebhooksOnMemberRemoveMethod = webhooksOnMemberRemoveMethod, WebhooksOnMessageSentUrl = webhooksOnMessageSentUrl, WebhooksOnMessageSentMethod = webhooksOnMessageSentMethod, WebhooksOnMessageUpdatedUrl = webhooksOnMessageUpdatedUrl, WebhooksOnMessageUpdatedMethod = webhooksOnMessageUpdatedMethod, WebhooksOnMessageRemovedUrl = webhooksOnMessageRemovedUrl, WebhooksOnMessageRemovedMethod = webhooksOnMessageRemovedMethod, WebhooksOnChannelAddedUrl = webhooksOnChannelAddedUrl, WebhooksOnChannelAddedMethod = webhooksOnChannelAddedMethod, WebhooksOnChannelDestroyedUrl = webhooksOnChannelDestroyedUrl, WebhooksOnChannelDestroyedMethod = webhooksOnChannelDestroyedMethod, WebhooksOnChannelUpdatedUrl = webhooksOnChannelUpdatedUrl, WebhooksOnChannelUpdatedMethod = webhooksOnChannelUpdatedMethod, WebhooksOnMemberAddedUrl = webhooksOnMemberAddedUrl, WebhooksOnMemberAddedMethod = webhooksOnMemberAddedMethod, WebhooksOnMemberRemovedUrl = webhooksOnMemberRemovedUrl, WebhooksOnMemberRemovedMethod = webhooksOnMemberRemovedMethod, LimitsChannelMembers = limitsChannelMembers, LimitsUserChannels = limitsUserChannels };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ServiceResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ServiceResource object represented by the provided JSON </returns>
        public static ServiceResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ServiceResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The sid </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The account_sid </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The friendly_name </summary> 
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }

        ///<summary> The date_created </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date_updated </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The default_service_role_sid </summary> 
        [JsonProperty("default_service_role_sid")]
        public string DefaultServiceRoleSid { get; private set; }

        ///<summary> The default_channel_role_sid </summary> 
        [JsonProperty("default_channel_role_sid")]
        public string DefaultChannelRoleSid { get; private set; }

        ///<summary> The default_channel_creator_role_sid </summary> 
        [JsonProperty("default_channel_creator_role_sid")]
        public string DefaultChannelCreatorRoleSid { get; private set; }

        ///<summary> The read_status_enabled </summary> 
        [JsonProperty("read_status_enabled")]
        public bool? ReadStatusEnabled { get; private set; }

        ///<summary> The reachability_enabled </summary> 
        [JsonProperty("reachability_enabled")]
        public bool? ReachabilityEnabled { get; private set; }

        ///<summary> The typing_indicator_timeout </summary> 
        [JsonProperty("typing_indicator_timeout")]
        public int? TypingIndicatorTimeout { get; private set; }

        ///<summary> The consumption_report_interval </summary> 
        [JsonProperty("consumption_report_interval")]
        public int? ConsumptionReportInterval { get; private set; }

        ///<summary> The limits </summary> 
        [JsonProperty("limits")]
        public object Limits { get; private set; }

        ///<summary> The webhooks </summary> 
        [JsonProperty("webhooks")]
        public object Webhooks { get; private set; }

        ///<summary> The pre_webhook_url </summary> 
        [JsonProperty("pre_webhook_url")]
        public string PreWebhookUrl { get; private set; }

        ///<summary> The post_webhook_url </summary> 
        [JsonProperty("post_webhook_url")]
        public string PostWebhookUrl { get; private set; }

        ///<summary> The webhook_method </summary> 
        [JsonProperty("webhook_method")]
        public string WebhookMethod { get; private set; }

        ///<summary> The webhook_filters </summary> 
        [JsonProperty("webhook_filters")]
        public List<string> WebhookFilters { get; private set; }

        ///<summary> The notifications </summary> 
        [JsonProperty("notifications")]
        public object Notifications { get; private set; }

        ///<summary> The url </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> The links </summary> 
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }



        private ServiceResource() {

        }
    }
}

