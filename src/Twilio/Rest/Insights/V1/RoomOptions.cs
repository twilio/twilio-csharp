/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;
using System.Linq;



namespace Twilio.Rest.Insights.V1
{
    /// <summary> Get Video Log Analyzer data for a Room. </summary>
    public class FetchRoomOptions : IOptions<RoomResource>
    {
    
        ///<summary> The SID of the Room resource. </summary> 
        public string PathRoomSid { get; }



        /// <summary> Construct a new FetchVideoRoomSummaryOptions </summary>
        /// <param name="pathRoomSid"> The SID of the Room resource. </param>
        public FetchRoomOptions(string pathRoomSid)
        {
            PathRoomSid = pathRoomSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Get a list of Programmable Video Rooms. </summary>
    public class ReadRoomOptions : ReadOptions<RoomResource>
    {
    
        ///<summary> Type of room. Can be `go`, `peer_to_peer`, `group`, or `group_small`. </summary> 
        public List<RoomResource.RoomTypeEnum> RoomType { get; set; }

        ///<summary> Codecs used by participants in the room. Can be `VP8`, `H264`, or `VP9`. </summary> 
        public List<RoomResource.CodecEnum> Codec { get; set; }

        ///<summary> Room friendly name. </summary> 
        public string RoomName { get; set; }

        ///<summary> Only read rooms that started on or after this ISO 8601 timestamp. </summary> 
        public DateTime? CreatedAfter { get; set; }

        ///<summary> Only read rooms that started before this ISO 8601 timestamp. </summary> 
        public DateTime? CreatedBefore { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (RoomType != null)
            {
                p.AddRange(RoomType.Select(RoomType => new KeyValuePair<string, string>("RoomType", RoomType.ToString())));
            }
            if (Codec != null)
            {
                p.AddRange(Codec.Select(Codec => new KeyValuePair<string, string>("Codec", Codec.ToString())));
            }
            if (RoomName != null)
            {
                p.Add(new KeyValuePair<string, string>("RoomName", RoomName));
            }
            if (CreatedAfter != null)
            {
                p.Add(new KeyValuePair<string, string>("CreatedAfter", Serializers.DateTimeIso8601(CreatedAfter)));
            }
            if (CreatedBefore != null)
            {
                p.Add(new KeyValuePair<string, string>("CreatedBefore", Serializers.DateTimeIso8601(CreatedBefore)));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

}

