/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Insights.V1.Call
{
    /// <summary> Get a list of Call Metrics for a Call. </summary>
    public class ReadMetricOptions : ReadOptions<MetricResource>
    {
    
        ///<summary> The unique SID identifier of the Call. </summary> 
        public string PathCallSid { get; }

        ///<summary> The Edge of this Metric. One of `unknown_edge`, `carrier_edge`, `sip_edge`, `sdk_edge` or `client_edge`. </summary> 
        public MetricResource.TwilioEdgeEnum Edge { get; set; }

        ///<summary> The Direction of this Metric. One of `unknown`, `inbound`, `outbound` or `both`. </summary> 
        public MetricResource.StreamDirectionEnum Direction { get; set; }



        /// <summary> Construct a new ListMetricOptions </summary>
        /// <param name="pathCallSid"> The unique SID identifier of the Call. </param>
        public ReadMetricOptions(string pathCallSid)
        {
            PathCallSid = pathCallSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Edge != null)
            {
                p.Add(new KeyValuePair<string, string>("Edge", Edge.ToString()));
            }
            if (Direction != null)
            {
                p.Add(new KeyValuePair<string, string>("Direction", Direction.ToString()));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

}

