/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Assistants.V1
{
    public class ToolResource : Resource
    {
    
        public class AssistantsV1ServiceCreatePolicyRequest
        {
            [JsonProperty("description")]
            private string Description {get; set;}
            [JsonProperty("id")]
            private string Id {get; set;}
            [JsonProperty("name")]
            private string Name {get; set;}
            [JsonProperty("policy_details")]
            private object PolicyDetails {get; set;}
            [JsonProperty("type")]
            private string Type {get; set;}
            public AssistantsV1ServiceCreatePolicyRequest() { }
            public class Builder
            {
                private AssistantsV1ServiceCreatePolicyRequest _assistantsV1ServiceCreatePolicyRequest = new AssistantsV1ServiceCreatePolicyRequest();
                public Builder()
                {
                }
                public Builder WithDescription(string description)
                {
                    _assistantsV1ServiceCreatePolicyRequest.Description= description;
                    return this;
                }
                public Builder WithId(string id)
                {
                    _assistantsV1ServiceCreatePolicyRequest.Id= id;
                    return this;
                }
                public Builder WithName(string name)
                {
                    _assistantsV1ServiceCreatePolicyRequest.Name= name;
                    return this;
                }
                public Builder WithPolicyDetails(object policyDetails)
                {
                    _assistantsV1ServiceCreatePolicyRequest.PolicyDetails= policyDetails;
                    return this;
                }
                public Builder WithType(string type)
                {
                    _assistantsV1ServiceCreatePolicyRequest.Type= type;
                    return this;
                }
                public AssistantsV1ServiceCreatePolicyRequest Build()
                {
                    return _assistantsV1ServiceCreatePolicyRequest;
                }
            }
        }
        public class AssistantsV1ServiceCreateToolRequest
        {
            [JsonProperty("assistant_id")]
            private string AssistantId {get; set;}
            [JsonProperty("description")]
            private string Description {get; set;}
            [JsonProperty("enabled")]
            private bool? Enabled {get; set;}
            [JsonProperty("meta")]
            private object Meta {get; set;}
            [JsonProperty("name")]
            private string Name {get; set;}
            [JsonProperty("policy")]
            private AssistantsV1ServiceCreatePolicyRequest Policy {get; set;}
            [JsonProperty("type")]
            private string Type {get; set;}
            public AssistantsV1ServiceCreateToolRequest() { }
            public class Builder
            {
                private AssistantsV1ServiceCreateToolRequest _assistantsV1ServiceCreateToolRequest = new AssistantsV1ServiceCreateToolRequest();
                public Builder()
                {
                }
                public Builder WithAssistantId(string assistantId)
                {
                    _assistantsV1ServiceCreateToolRequest.AssistantId= assistantId;
                    return this;
                }
                public Builder WithDescription(string description)
                {
                    _assistantsV1ServiceCreateToolRequest.Description= description;
                    return this;
                }
                public Builder WithEnabled(bool? enabled)
                {
                    _assistantsV1ServiceCreateToolRequest.Enabled= enabled;
                    return this;
                }
                public Builder WithMeta(object meta)
                {
                    _assistantsV1ServiceCreateToolRequest.Meta= meta;
                    return this;
                }
                public Builder WithName(string name)
                {
                    _assistantsV1ServiceCreateToolRequest.Name= name;
                    return this;
                }
                public Builder WithPolicy(AssistantsV1ServiceCreatePolicyRequest policy)
                {
                    _assistantsV1ServiceCreateToolRequest.Policy= policy;
                    return this;
                }
                public Builder WithType(string type)
                {
                    _assistantsV1ServiceCreateToolRequest.Type= type;
                    return this;
                }
                public AssistantsV1ServiceCreateToolRequest Build()
                {
                    return _assistantsV1ServiceCreateToolRequest;
                }
            }
        }
        public class AssistantsV1ServiceUpdateToolRequest
        {
            [JsonProperty("assistant_id")]
            private string AssistantId {get; set;}
            [JsonProperty("description")]
            private string Description {get; set;}
            [JsonProperty("enabled")]
            private bool? Enabled {get; set;}
            [JsonProperty("meta")]
            private object Meta {get; set;}
            [JsonProperty("name")]
            private string Name {get; set;}
            [JsonProperty("policy")]
            private AssistantsV1ServiceCreatePolicyRequest Policy {get; set;}
            [JsonProperty("type")]
            private string Type {get; set;}
            public AssistantsV1ServiceUpdateToolRequest() { }
            public class Builder
            {
                private AssistantsV1ServiceUpdateToolRequest _assistantsV1ServiceUpdateToolRequest = new AssistantsV1ServiceUpdateToolRequest();
                public Builder()
                {
                }
                public Builder WithAssistantId(string assistantId)
                {
                    _assistantsV1ServiceUpdateToolRequest.AssistantId= assistantId;
                    return this;
                }
                public Builder WithDescription(string description)
                {
                    _assistantsV1ServiceUpdateToolRequest.Description= description;
                    return this;
                }
                public Builder WithEnabled(bool? enabled)
                {
                    _assistantsV1ServiceUpdateToolRequest.Enabled= enabled;
                    return this;
                }
                public Builder WithMeta(object meta)
                {
                    _assistantsV1ServiceUpdateToolRequest.Meta= meta;
                    return this;
                }
                public Builder WithName(string name)
                {
                    _assistantsV1ServiceUpdateToolRequest.Name= name;
                    return this;
                }
                public Builder WithPolicy(AssistantsV1ServiceCreatePolicyRequest policy)
                {
                    _assistantsV1ServiceUpdateToolRequest.Policy= policy;
                    return this;
                }
                public Builder WithType(string type)
                {
                    _assistantsV1ServiceUpdateToolRequest.Type= type;
                    return this;
                }
                public AssistantsV1ServiceUpdateToolRequest Build()
                {
                    return _assistantsV1ServiceUpdateToolRequest;
                }
            }
        }
        public class AssistantsV1ServicePolicy
        {
            [JsonProperty("id")]
            private string Id {get; set;}
            [JsonProperty("name")]
            private string Name {get; set;}
            [JsonProperty("description")]
            private string Description {get; set;}
            [JsonProperty("account_sid")]
            private string AccountSid {get; set;}
            [JsonProperty("user_sid")]
            private string UserSid {get; set;}
            [JsonProperty("type")]
            private string Type {get; set;}
            [JsonProperty("policy_details")]
            private object PolicyDetails {get; set;}
            [JsonProperty("date_created")]
            private DateTime? DateCreated {get; set;}
            [JsonProperty("date_updated")]
            private DateTime? DateUpdated {get; set;}
            public AssistantsV1ServicePolicy() { }
            public class Builder
            {
                private AssistantsV1ServicePolicy _assistantsV1ServicePolicy = new AssistantsV1ServicePolicy();
                public Builder()
                {
                }
                public Builder WithId(string id)
                {
                    _assistantsV1ServicePolicy.Id= id;
                    return this;
                }
                public Builder WithName(string name)
                {
                    _assistantsV1ServicePolicy.Name= name;
                    return this;
                }
                public Builder WithDescription(string description)
                {
                    _assistantsV1ServicePolicy.Description= description;
                    return this;
                }
                public Builder WithAccountSid(string accountSid)
                {
                    _assistantsV1ServicePolicy.AccountSid= accountSid;
                    return this;
                }
                public Builder WithUserSid(string userSid)
                {
                    _assistantsV1ServicePolicy.UserSid= userSid;
                    return this;
                }
                public Builder WithType(string type)
                {
                    _assistantsV1ServicePolicy.Type= type;
                    return this;
                }
                public Builder WithPolicyDetails(object policyDetails)
                {
                    _assistantsV1ServicePolicy.PolicyDetails= policyDetails;
                    return this;
                }
                public Builder WithDateCreated(DateTime? dateCreated)
                {
                    _assistantsV1ServicePolicy.DateCreated= dateCreated;
                    return this;
                }
                public Builder WithDateUpdated(DateTime? dateUpdated)
                {
                    _assistantsV1ServicePolicy.DateUpdated= dateUpdated;
                    return this;
                }
                public AssistantsV1ServicePolicy Build()
                {
                    return _assistantsV1ServicePolicy;
                }
            }
        }

    

        
        private static Request BuildCreateRequest(CreateToolOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Tools";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Assistants,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Create tool </summary>
        /// <param name="options"> Create Tool parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Tool </returns>
        public static ToolResource Create(CreateToolOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create tool </summary>
        /// <param name="options"> Create Tool parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Tool </returns>
        public static async System.Threading.Tasks.Task<ToolResource> CreateAsync(CreateToolOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create tool </summary>
        /// <param name="assistantsV1ServiceCreateToolRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Tool </returns>
        public static ToolResource Create(
                                          ToolResource.AssistantsV1ServiceCreateToolRequest assistantsV1ServiceCreateToolRequest,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateToolOptions(assistantsV1ServiceCreateToolRequest){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create tool </summary>
        /// <param name="assistantsV1ServiceCreateToolRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Tool </returns>
        public static async System.Threading.Tasks.Task<ToolResource> CreateAsync(
                                                                                  ToolResource.AssistantsV1ServiceCreateToolRequest assistantsV1ServiceCreateToolRequest,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateToolOptions(assistantsV1ServiceCreateToolRequest){  };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        /// <summary> delete a tool </summary>
        /// <param name="options"> Delete Tool parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Tool </returns>
        private static Request BuildDeleteRequest(DeleteToolOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Tools/{id}";

            string PathId = options.PathId;
            path = path.Replace("{"+"Id"+"}", PathId);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Assistants,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> delete a tool </summary>
        /// <param name="options"> Delete Tool parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Tool </returns>
        public static bool Delete(DeleteToolOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> delete a tool </summary>
        /// <param name="options"> Delete Tool parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Tool </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteToolOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> delete a tool </summary>
        /// <param name="pathId"> The tool ID. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Tool </returns>
        public static bool Delete(string pathId, ITwilioRestClient client = null)
        {
            var options = new DeleteToolOptions(pathId)     ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> delete a tool </summary>
        /// <param name="pathId"> The tool ID. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Tool </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathId, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteToolOptions(pathId) ;
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchToolOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Tools/{id}";

            string PathId = options.PathId;
            path = path.Replace("{"+"Id"+"}", PathId);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Assistants,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Get tool </summary>
        /// <param name="options"> Fetch Tool parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Tool </returns>
        public static ToolResource Fetch(FetchToolOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Get tool </summary>
        /// <param name="options"> Fetch Tool parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Tool </returns>
        public static async System.Threading.Tasks.Task<ToolResource> FetchAsync(FetchToolOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Get tool </summary>
        /// <param name="pathId">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Tool </returns>
        public static ToolResource Fetch(
                                         string pathId, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchToolOptions(pathId){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Get tool </summary>
        /// <param name="pathId">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Tool </returns>
        public static async System.Threading.Tasks.Task<ToolResource> FetchAsync(string pathId, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchToolOptions(pathId){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadToolOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Tools";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Assistants,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> List tools </summary>
        /// <param name="options"> Read Tool parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Tool </returns>
        public static ResourceSet<ToolResource> Read(ReadToolOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<ToolResource>.FromJson("tools", response.Content);
            return new ResourceSet<ToolResource>(page, options, client);
        }

        #if !NET35
        /// <summary> List tools </summary>
        /// <param name="options"> Read Tool parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Tool </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ToolResource>> ReadAsync(ReadToolOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<ToolResource>.FromJson("tools", response.Content);
            return new ResourceSet<ToolResource>(page, options, client);
        }
        #endif
        /// <summary> List tools </summary>
        /// <param name="assistantId">  </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Tool </returns>
        public static ResourceSet<ToolResource> Read(
                                                     string assistantId = null,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadToolOptions(){ AssistantId = assistantId, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> List tools </summary>
        /// <param name="assistantId">  </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Tool </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ToolResource>> ReadAsync(
                                                                                             string assistantId = null,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadToolOptions(){ AssistantId = assistantId, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<ToolResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<ToolResource>.FromJson("tools", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<ToolResource> NextPage(Page<ToolResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ToolResource>.FromJson("tools", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<ToolResource> PreviousPage(Page<ToolResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ToolResource>.FromJson("tools", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateToolOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Tools/{id}";

            string PathId = options.PathId;
            path = path.Replace("{"+"Id"+"}", PathId);

            return new Request(
                HttpMethod.Put,
                Rest.Domain.Assistants,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Update tool </summary>
        /// <param name="options"> Update Tool parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Tool </returns>
        public static ToolResource Update(UpdateToolOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update tool </summary>
        /// <param name="options"> Update Tool parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Tool </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<ToolResource> UpdateAsync(UpdateToolOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Update tool </summary>
        /// <param name="pathId">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Tool </returns>
        public static ToolResource Update(
                                          string pathId,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateToolOptions(pathId){  };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Update tool </summary>
        /// <param name="pathId">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Tool </returns>
        public static async System.Threading.Tasks.Task<ToolResource> UpdateAsync(
                                                                              string pathId,
                                                                                ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateToolOptions(pathId){  };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ToolResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ToolResource object represented by the provided JSON </returns>
        public static ToolResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ToolResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Tool resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The description of the tool. </summary> 
        [JsonProperty("description")]
        public string Description { get; }

        ///<summary> True if the tool is enabled. </summary> 
        [JsonProperty("enabled")]
        public bool? Enabled { get; }

        ///<summary> The tool ID. </summary> 
        [JsonProperty("id")]
        public string Id { get; }

        ///<summary> The metadata related to method, url, input_schema to used with the Tool. </summary> 
        [JsonProperty("meta")]
        public object Meta { get; }

        ///<summary> The name of the tool. </summary> 
        [JsonProperty("name")]
        public string Name { get; }

        ///<summary> The authentication requirement for the tool. </summary> 
        [JsonProperty("requires_auth")]
        public bool? RequiresAuth { get; }

        ///<summary> The type of the tool. ('WEBHOOK') </summary> 
        [JsonProperty("type")]
        public string Type { get; }

        ///<summary> The url of the tool resource. </summary> 
        [JsonProperty("url")]
        public string Url { get; private set; }

        ///<summary> The date and time in GMT when the Tool was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; }

        ///<summary> The date and time in GMT when the Tool was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; }

        ///<summary> The Policies associated with the tool. </summary> 
        [JsonProperty("policies")]
        public List<AssistantsV1ServicePolicy> Policies { get; private set; }



        private ToolResource() {

        }
    }
}

