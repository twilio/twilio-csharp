/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Assistants.V1.Assistant
{
    public class FeedbackResource : Resource
    {
    
        public class AssistantsV1ServiceCreateFeedbackRequest
        {
            [JsonProperty("message_id")]
            private string MessageId {get; set;}
            [JsonProperty("score")]
            private float Score {get; set;}
            [JsonProperty("session_id")]
            private string SessionId {get; set;}
            [JsonProperty("text")]
            private string Text {get; set;}
            public AssistantsV1ServiceCreateFeedbackRequest() { }
            public class Builder
            {
                private AssistantsV1ServiceCreateFeedbackRequest _assistantsV1ServiceCreateFeedbackRequest = new AssistantsV1ServiceCreateFeedbackRequest();
                public Builder()
                {
                }
                public Builder WithMessageId(string messageId)
                {
                    _assistantsV1ServiceCreateFeedbackRequest.MessageId= messageId;
                    return this;
                }
                public Builder WithScore(float score)
                {
                    _assistantsV1ServiceCreateFeedbackRequest.Score= score;
                    return this;
                }
                public Builder WithSessionId(string sessionId)
                {
                    _assistantsV1ServiceCreateFeedbackRequest.SessionId= sessionId;
                    return this;
                }
                public Builder WithText(string text)
                {
                    _assistantsV1ServiceCreateFeedbackRequest.Text= text;
                    return this;
                }
                public AssistantsV1ServiceCreateFeedbackRequest Build()
                {
                    return _assistantsV1ServiceCreateFeedbackRequest;
                }
            }
        }

    

        
        private static Request BuildCreateRequest(CreateFeedbackOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Assistants/{id}/Feedbacks";

            string PathId = options.PathId;
            path = path.Replace("{"+"Id"+"}", PathId);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Assistants,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Create feedback </summary>
        /// <param name="options"> Create Feedback parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Feedback </returns>
        public static FeedbackResource Create(CreateFeedbackOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create feedback </summary>
        /// <param name="options"> Create Feedback parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Feedback </returns>
        public static async System.Threading.Tasks.Task<FeedbackResource> CreateAsync(CreateFeedbackOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create feedback </summary>
        /// <param name="pathId"> The assistant ID. </param>
        /// <param name="assistantsV1ServiceCreateFeedbackRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Feedback </returns>
        public static FeedbackResource Create(
                                          string pathId,
                                          FeedbackResource.AssistantsV1ServiceCreateFeedbackRequest assistantsV1ServiceCreateFeedbackRequest,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateFeedbackOptions(pathId, assistantsV1ServiceCreateFeedbackRequest){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create feedback </summary>
        /// <param name="pathId"> The assistant ID. </param>
        /// <param name="assistantsV1ServiceCreateFeedbackRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Feedback </returns>
        public static async System.Threading.Tasks.Task<FeedbackResource> CreateAsync(
                                                                                  string pathId,
                                                                                  FeedbackResource.AssistantsV1ServiceCreateFeedbackRequest assistantsV1ServiceCreateFeedbackRequest,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateFeedbackOptions(pathId, assistantsV1ServiceCreateFeedbackRequest){  };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadFeedbackOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Assistants/{id}/Feedbacks";

            string PathId = options.PathId;
            path = path.Replace("{"+"Id"+"}", PathId);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Assistants,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> List feedbacks </summary>
        /// <param name="options"> Read Feedback parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Feedback </returns>
        public static ResourceSet<FeedbackResource> Read(ReadFeedbackOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<FeedbackResource>.FromJson("feedbacks", response.Content);
            return new ResourceSet<FeedbackResource>(page, options, client);
        }

        #if !NET35
        /// <summary> List feedbacks </summary>
        /// <param name="options"> Read Feedback parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Feedback </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<FeedbackResource>> ReadAsync(ReadFeedbackOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<FeedbackResource>.FromJson("feedbacks", response.Content);
            return new ResourceSet<FeedbackResource>(page, options, client);
        }
        #endif
        /// <summary> List feedbacks </summary>
        /// <param name="pathId"> The assistant ID. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Feedback </returns>
        public static ResourceSet<FeedbackResource> Read(
                                                     string pathId,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadFeedbackOptions(pathId){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> List feedbacks </summary>
        /// <param name="pathId"> The assistant ID. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Feedback </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<FeedbackResource>> ReadAsync(
                                                                                             string pathId,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadFeedbackOptions(pathId){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<FeedbackResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<FeedbackResource>.FromJson("feedbacks", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<FeedbackResource> NextPage(Page<FeedbackResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<FeedbackResource>.FromJson("feedbacks", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<FeedbackResource> PreviousPage(Page<FeedbackResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<FeedbackResource>.FromJson("feedbacks", response.Content);
        }

    
        /// <summary>
        /// Converts a JSON string into a FeedbackResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> FeedbackResource object represented by the provided JSON </returns>
        public static FeedbackResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<FeedbackResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The Assistant ID. </summary> 
        [JsonProperty("assistant_id")]
        public string AssistantId { get; }

        ///<summary> The Feedback ID. </summary> 
        [JsonProperty("id")]
        public string Id { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Feedback. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The SID of the User created the Feedback. </summary> 
        [JsonProperty("user_sid")]
        public string UserSid { get; private set; }

        ///<summary> The Message ID. </summary> 
        [JsonProperty("message_id")]
        public string MessageId { get; }

        ///<summary> The Score to provide as Feedback (0-1) </summary> 
        [JsonProperty("score")]
        public float Score { get; }

        ///<summary> The Session ID. </summary> 
        [JsonProperty("session_id")]
        public string SessionId { get; }

        ///<summary> The text to be given as feedback. </summary> 
        [JsonProperty("text")]
        public string Text { get; }

        ///<summary> The date and time in GMT when the Feedback was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; }

        ///<summary> The date and time in GMT when the Feedback was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; }



        private FeedbackResource() {

        }
    }
}

