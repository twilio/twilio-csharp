/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Assistants.V1.Assistant
{
    public class MessageResource : Resource
    {
    
        public class AssistantsV1ServiceAssistantSendMessageRequest
        {
            [JsonProperty("identity")]
            private string Identity {get; set;}
            [JsonProperty("session_id")]
            private string SessionId {get; set;}
            [JsonProperty("body")]
            private string Body {get; set;}
            [JsonProperty("webhook")]
            private string Webhook {get; set;}
            [JsonProperty("mode")]
            private string Mode {get; set;}
            public AssistantsV1ServiceAssistantSendMessageRequest() { }
            public class Builder
            {
                private AssistantsV1ServiceAssistantSendMessageRequest _assistantsV1ServiceAssistantSendMessageRequest = new AssistantsV1ServiceAssistantSendMessageRequest();
                public Builder()
                {
                }
                public Builder WithIdentity(string identity)
                {
                    _assistantsV1ServiceAssistantSendMessageRequest.Identity= identity;
                    return this;
                }
                public Builder WithSessionId(string sessionId)
                {
                    _assistantsV1ServiceAssistantSendMessageRequest.SessionId= sessionId;
                    return this;
                }
                public Builder WithBody(string body)
                {
                    _assistantsV1ServiceAssistantSendMessageRequest.Body= body;
                    return this;
                }
                public Builder WithWebhook(string webhook)
                {
                    _assistantsV1ServiceAssistantSendMessageRequest.Webhook= webhook;
                    return this;
                }
                public Builder WithMode(string mode)
                {
                    _assistantsV1ServiceAssistantSendMessageRequest.Mode= mode;
                    return this;
                }
                public AssistantsV1ServiceAssistantSendMessageRequest Build()
                {
                    return _assistantsV1ServiceAssistantSendMessageRequest;
                }
            }
        }

    

        
        private static Request BuildCreateRequest(CreateMessageOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Assistants/{id}/Messages";

            string PathId = options.PathId;
            path = path.Replace("{"+"Id"+"}", PathId);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Assistants,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> send a message </summary>
        /// <param name="options"> Create Message parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Message </returns>
        public static MessageResource Create(CreateMessageOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> send a message </summary>
        /// <param name="options"> Create Message parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
        public static async System.Threading.Tasks.Task<MessageResource> CreateAsync(CreateMessageOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> send a message </summary>
        /// <param name="pathId"> the Assistant ID. </param>
        /// <param name="assistantsV1ServiceAssistantSendMessageRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Message </returns>
        public static MessageResource Create(
                                          string pathId,
                                          MessageResource.AssistantsV1ServiceAssistantSendMessageRequest assistantsV1ServiceAssistantSendMessageRequest,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateMessageOptions(pathId, assistantsV1ServiceAssistantSendMessageRequest){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> send a message </summary>
        /// <param name="pathId"> the Assistant ID. </param>
        /// <param name="assistantsV1ServiceAssistantSendMessageRequest">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
        public static async System.Threading.Tasks.Task<MessageResource> CreateAsync(
                                                                                  string pathId,
                                                                                  MessageResource.AssistantsV1ServiceAssistantSendMessageRequest assistantsV1ServiceAssistantSendMessageRequest,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateMessageOptions(pathId, assistantsV1ServiceAssistantSendMessageRequest){  };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a MessageResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> MessageResource object represented by the provided JSON </returns>
        public static MessageResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<MessageResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> success or failure based on whether the request successfully generated a response. </summary> 
        [JsonProperty("status")]
        public string Status { get; }

        ///<summary> If successful, this property will denote whether the response was flagged or not. </summary> 
        [JsonProperty("flagged")]
        public bool? Flagged { get; private set; }

        ///<summary> This property will denote whether the request was aborted or not. </summary> 
        [JsonProperty("aborted")]
        public bool? Aborted { get; private set; }

        ///<summary> The unique name for the session. </summary> 
        [JsonProperty("session_id")]
        public string SessionId { get; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that sent the Message. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; }

        ///<summary> If successful, the body of the generated response </summary> 
        [JsonProperty("body")]
        public string Body { get; private set; }

        ///<summary> The error message if generation was not successful </summary> 
        [JsonProperty("error")]
        public string Error { get; private set; }



        private MessageResource() {

        }
    }
}

