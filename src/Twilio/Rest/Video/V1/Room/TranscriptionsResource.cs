/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Video.V1.Room
{
    public class TranscriptionsResource : Resource
    {
    

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }
            public static readonly StatusEnum Started = new StatusEnum("started");
            public static readonly StatusEnum Stopped = new StatusEnum("stopped");
            public static readonly StatusEnum Failed = new StatusEnum("failed");

        }

        
        private static Request BuildCreateRequest(CreateTranscriptionsOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Rooms/{RoomSid}/Transcriptions";

            string PathRoomSid = options.PathRoomSid;
            path = path.Replace("{"+"RoomSid"+"}", PathRoomSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Video,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> create </summary>
        /// <param name="options"> Create Transcriptions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Transcriptions </returns>
        public static TranscriptionsResource Create(CreateTranscriptionsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="options"> Create Transcriptions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Transcriptions </returns>
        public static async System.Threading.Tasks.Task<TranscriptionsResource> CreateAsync(CreateTranscriptionsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> create </summary>
        /// <param name="pathRoomSid"> The SID of the room new transcriptions resource to be created. </param>
        /// <param name="configuration"> A collection of properties that describe transcription behaviour. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Transcriptions </returns>
        public static TranscriptionsResource Create(
                                          string pathRoomSid,
                                          object configuration = null,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateTranscriptionsOptions(pathRoomSid){  Configuration = configuration };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> create </summary>
        /// <param name="pathRoomSid"> The SID of the room new transcriptions resource to be created. </param>
        /// <param name="configuration"> A collection of properties that describe transcription behaviour. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Transcriptions </returns>
        public static async System.Threading.Tasks.Task<TranscriptionsResource> CreateAsync(
                                                                                  string pathRoomSid,
                                                                                  object configuration = null,
                                                                                    ITwilioRestClient client = null)
        {
        var options = new CreateTranscriptionsOptions(pathRoomSid){  Configuration = configuration };
            return await CreateAsync(options, client);
        }
        #endif

        
        private static Request BuildFetchRequest(FetchTranscriptionsOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Rooms/{RoomSid}/Transcriptions/{Ttid}";

            string PathRoomSid = options.PathRoomSid;
            path = path.Replace("{"+"RoomSid"+"}", PathRoomSid);
            string PathTtid = options.PathTtid;
            path = path.Replace("{"+"Ttid"+"}", PathTtid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Video,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> fetch </summary>
        /// <param name="options"> Fetch Transcriptions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Transcriptions </returns>
        public static TranscriptionsResource Fetch(FetchTranscriptionsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="options"> Fetch Transcriptions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Transcriptions </returns>
        public static async System.Threading.Tasks.Task<TranscriptionsResource> FetchAsync(FetchTranscriptionsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> fetch </summary>
        /// <param name="pathRoomSid"> The SID of the room with the transcriptions resource to fetch. </param>
        /// <param name="pathTtid"> The Twilio type id of the transcriptions resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Transcriptions </returns>
        public static TranscriptionsResource Fetch(
                                         string pathRoomSid, 
                                         string pathTtid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchTranscriptionsOptions(pathRoomSid, pathTtid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="pathRoomSid"> The SID of the room with the transcriptions resource to fetch. </param>
        /// <param name="pathTtid"> The Twilio type id of the transcriptions resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Transcriptions </returns>
        public static async System.Threading.Tasks.Task<TranscriptionsResource> FetchAsync(string pathRoomSid, string pathTtid, ITwilioRestClient client = null)
        {
            var options = new FetchTranscriptionsOptions(pathRoomSid, pathTtid){  };
            return await FetchAsync(options, client);
        }
        #endif
        
        private static Request BuildReadRequest(ReadTranscriptionsOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Rooms/{RoomSid}/Transcriptions";

            string PathRoomSid = options.PathRoomSid;
            path = path.Replace("{"+"RoomSid"+"}", PathRoomSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Video,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> read </summary>
        /// <param name="options"> Read Transcriptions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Transcriptions </returns>
        public static ResourceSet<TranscriptionsResource> Read(ReadTranscriptionsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<TranscriptionsResource>.FromJson("transcriptions", response.Content);
            return new ResourceSet<TranscriptionsResource>(page, options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="options"> Read Transcriptions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Transcriptions </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<TranscriptionsResource>> ReadAsync(ReadTranscriptionsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<TranscriptionsResource>.FromJson("transcriptions", response.Content);
            return new ResourceSet<TranscriptionsResource>(page, options, client);
        }
        #endif
        /// <summary> read </summary>
        /// <param name="pathRoomSid"> The SID of the room with the transcriptions resources to read. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Transcriptions </returns>
        public static ResourceSet<TranscriptionsResource> Read(
                                                     string pathRoomSid,
                                                     long? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadTranscriptionsOptions(pathRoomSid){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="pathRoomSid"> The SID of the room with the transcriptions resources to read. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Transcriptions </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<TranscriptionsResource>> ReadAsync(
                                                                                             string pathRoomSid,
                                                                                             long? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null)
        {
            var options = new ReadTranscriptionsOptions(pathRoomSid){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<TranscriptionsResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<TranscriptionsResource>.FromJson("transcriptions", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<TranscriptionsResource> NextPage(Page<TranscriptionsResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<TranscriptionsResource>.FromJson("transcriptions", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<TranscriptionsResource> PreviousPage(Page<TranscriptionsResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<TranscriptionsResource>.FromJson("transcriptions", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateTranscriptionsOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Rooms/{RoomSid}/Transcriptions/{Ttid}";

            string PathRoomSid = options.PathRoomSid;
            path = path.Replace("{"+"RoomSid"+"}", PathRoomSid);
            string PathTtid = options.PathTtid;
            path = path.Replace("{"+"Ttid"+"}", PathTtid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Video,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> update </summary>
        /// <param name="options"> Update Transcriptions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Transcriptions </returns>
        public static TranscriptionsResource Update(UpdateTranscriptionsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> update </summary>
        /// <param name="options"> Update Transcriptions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Transcriptions </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<TranscriptionsResource> UpdateAsync(UpdateTranscriptionsOptions options,
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> update </summary>
        /// <param name="pathRoomSid"> The SID of the room with the transcriptions resource to update. </param>
        /// <param name="pathTtid"> The Twilio type id of the transcriptions resource to update. </param>
        /// <param name="status">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Transcriptions </returns>
        public static TranscriptionsResource Update(
                                          string pathRoomSid,
                                          string pathTtid,
                                          TranscriptionsResource.StatusEnum status = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateTranscriptionsOptions(pathRoomSid, pathTtid){ Status = status };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> update </summary>
        /// <param name="pathRoomSid"> The SID of the room with the transcriptions resource to update. </param>
        /// <param name="pathTtid"> The Twilio type id of the transcriptions resource to update. </param>
        /// <param name="status">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Transcriptions </returns>
        public static async System.Threading.Tasks.Task<TranscriptionsResource> UpdateAsync(
                                                                              string pathRoomSid,
                                                                              string pathTtid,
                                                                              TranscriptionsResource.StatusEnum status = null,
                                                                                ITwilioRestClient client = null)
        {
            var options = new UpdateTranscriptionsOptions(pathRoomSid, pathTtid){ Status = status };
            return await UpdateAsync(options, client);
        }
        #endif

    
        /// <summary>
        /// Converts a JSON string into a TranscriptionsResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> TranscriptionsResource object represented by the provided JSON </returns>
        public static TranscriptionsResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<TranscriptionsResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The unique string that we created to identify the transcriptions resource. </summary> 
        [JsonProperty("ttid")]
        public string Ttid { get; private set; }

        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Room resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The SID of the transcriptions's room. </summary> 
        [JsonProperty("room_sid")]
        public string RoomSid { get; private set; }

        
        [JsonProperty("status")]
        public TranscriptionsResource.StatusEnum Status { get; private set; }

        ///<summary> The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The time of transcriptions connected to the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format. </summary> 
        [JsonProperty("start_time")]
        public DateTime? StartTime { get; private set; }

        ///<summary> The time when the transcriptions disconnected from the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format. </summary> 
        [JsonProperty("end_time")]
        public DateTime? EndTime { get; private set; }

        ///<summary> The duration in seconds that the transcriptions were `connected`. Populated only after the transcriptions is `stopped`. </summary> 
        [JsonProperty("duration")]
        public int? Duration { get; private set; }

        ///<summary> The absolute URL of the resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> An JSON object that describes the video layout of the composition in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info. </summary> 
        [JsonProperty("configuration")]
        public object Configuration { get; private set; }



        private TranscriptionsResource() {

        }
    }
}

