/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;
using System.Linq;



namespace Twilio.Rest.Video.V1
{
    /// <summary> Delete a Recording resource identified by a Recording SID. </summary>
    public class DeleteRecordingOptions : IOptions<RecordingResource>
    {
        
        ///<summary> The SID of the Recording resource to delete. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteRecordingOptions </summary>
        /// <param name="pathSid"> The SID of the Recording resource to delete. </param>
        public DeleteRecordingOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Returns a single Recording resource identified by a Recording SID. </summary>
    public class FetchRecordingOptions : IOptions<RecordingResource>
    {
    
        ///<summary> The SID of the Recording resource to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchRecordingOptions </summary>
        /// <param name="pathSid"> The SID of the Recording resource to fetch. </param>
        public FetchRecordingOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> List of all Track recordings. </summary>
    public class ReadRecordingOptions : ReadOptions<RecordingResource>
    {
    
        ///<summary> Read only the recordings that have this status. Can be: `processing`, `completed`, or `deleted`. </summary> 
        public RecordingResource.StatusEnum Status { get; set; }

        ///<summary> Read only the recordings that have this `source_sid`. </summary> 
        public string SourceSid { get; set; }

        ///<summary> Read only recordings with this `grouping_sid`, which may include a `participant_sid` and/or a `room_sid`. </summary> 
        public List<string> GroupingSid { get; set; }

        ///<summary> Read only recordings that started on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with time zone. </summary> 
        public DateTime? DateCreatedAfter { get; set; }

        ///<summary> Read only recordings that started before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with time zone, given as `YYYY-MM-DDThh:mm:ss+|-hh:mm` or `YYYY-MM-DDThh:mm:ssZ`. </summary> 
        public DateTime? DateCreatedBefore { get; set; }

        ///<summary> Read only recordings that have this media type. Can be either `audio` or `video`. </summary> 
        public RecordingResource.TypeEnum MediaType { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }
            if (SourceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("SourceSid", SourceSid));
            }
            if (GroupingSid != null)
            {
                p.AddRange(GroupingSid.Select(GroupingSid => new KeyValuePair<string, string>("GroupingSid", GroupingSid)));
            }
            if (DateCreatedAfter != null)
            {
                p.Add(new KeyValuePair<string, string>("DateCreatedAfter", Serializers.DateTimeIso8601(DateCreatedAfter)));
            }
            if (DateCreatedBefore != null)
            {
                p.Add(new KeyValuePair<string, string>("DateCreatedBefore", Serializers.DateTimeIso8601(DateCreatedBefore)));
            }
            if (MediaType != null)
            {
                p.Add(new KeyValuePair<string, string>("MediaType", MediaType.ToString()));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

}

