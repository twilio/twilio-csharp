/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Messaging.V2
{
    public class ChannelsSenderResource : Resource
    {
    
        public class MessagingV2ChannelsSenderConfiguration
        {
            [JsonProperty("waba_id")]
            private string WabaId {get; set;}
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("verification_method")]
            private ChannelsSenderResource.VerificationMethodEnum VerificationMethod {get; set;}
            [JsonProperty("verification_code")]
            private string VerificationCode {get; set;}
            [JsonProperty("voice_application_sid")]
            private string VoiceApplicationSid {get; set;}
            public MessagingV2ChannelsSenderConfiguration() { }
            public class Builder
            {
                private MessagingV2ChannelsSenderConfiguration _messagingV2ChannelsSenderConfiguration = new MessagingV2ChannelsSenderConfiguration();
                public Builder()
                {
                }
                public Builder WithWabaId(string wabaId)
                {
                    _messagingV2ChannelsSenderConfiguration.WabaId= wabaId;
                    return this;
                }
                public Builder WithVerificationMethod(ChannelsSenderResource.VerificationMethodEnum verificationMethod)
                {
                    _messagingV2ChannelsSenderConfiguration.VerificationMethod= verificationMethod;
                    return this;
                }
                public Builder WithVerificationCode(string verificationCode)
                {
                    _messagingV2ChannelsSenderConfiguration.VerificationCode= verificationCode;
                    return this;
                }
                public Builder WithVoiceApplicationSid(string voiceApplicationSid)
                {
                    _messagingV2ChannelsSenderConfiguration.VoiceApplicationSid= voiceApplicationSid;
                    return this;
                }
                public MessagingV2ChannelsSenderConfiguration Build()
                {
                    return _messagingV2ChannelsSenderConfiguration;
                }
            }
        }
        public class MessagingV2ChannelsSenderWebhook
        {
            [JsonProperty("callback_url")]
            private string CallbackUrl {get; set;}
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("callback_method")]
            private ChannelsSenderResource.CallbackMethodEnum CallbackMethod {get; set;}
            [JsonProperty("fallback_url")]
            private string FallbackUrl {get; set;}
            [JsonConverter(typeof(StringEnumConverter))]
            [JsonProperty("fallback_method")]
            private ChannelsSenderResource.FallbackMethodEnum FallbackMethod {get; set;}
            [JsonProperty("status_callback_url")]
            private string StatusCallbackUrl {get; set;}
            [JsonProperty("status_callback_method")]
            private string StatusCallbackMethod {get; set;}
            public MessagingV2ChannelsSenderWebhook() { }
            public class Builder
            {
                private MessagingV2ChannelsSenderWebhook _messagingV2ChannelsSenderWebhook = new MessagingV2ChannelsSenderWebhook();
                public Builder()
                {
                }
                public Builder WithCallbackUrl(string callbackUrl)
                {
                    _messagingV2ChannelsSenderWebhook.CallbackUrl= callbackUrl;
                    return this;
                }
                public Builder WithCallbackMethod(ChannelsSenderResource.CallbackMethodEnum callbackMethod)
                {
                    _messagingV2ChannelsSenderWebhook.CallbackMethod= callbackMethod;
                    return this;
                }
                public Builder WithFallbackUrl(string fallbackUrl)
                {
                    _messagingV2ChannelsSenderWebhook.FallbackUrl= fallbackUrl;
                    return this;
                }
                public Builder WithFallbackMethod(ChannelsSenderResource.FallbackMethodEnum fallbackMethod)
                {
                    _messagingV2ChannelsSenderWebhook.FallbackMethod= fallbackMethod;
                    return this;
                }
                public Builder WithStatusCallbackUrl(string statusCallbackUrl)
                {
                    _messagingV2ChannelsSenderWebhook.StatusCallbackUrl= statusCallbackUrl;
                    return this;
                }
                public Builder WithStatusCallbackMethod(string statusCallbackMethod)
                {
                    _messagingV2ChannelsSenderWebhook.StatusCallbackMethod= statusCallbackMethod;
                    return this;
                }
                public MessagingV2ChannelsSenderWebhook Build()
                {
                    return _messagingV2ChannelsSenderWebhook;
                }
            }
        }
        public class MessagingV2ChannelsSenderProfileEmails
        {
            [JsonProperty("email")]
            private string Email {get; set;}
            [JsonProperty("label")]
            private string Label {get; set;}
            public MessagingV2ChannelsSenderProfileEmails() { }
            public class Builder
            {
                private MessagingV2ChannelsSenderProfileEmails _messagingV2ChannelsSenderProfileEmails = new MessagingV2ChannelsSenderProfileEmails();
                public Builder()
                {
                }
                public Builder WithEmail(string email)
                {
                    _messagingV2ChannelsSenderProfileEmails.Email= email;
                    return this;
                }
                public Builder WithLabel(string label)
                {
                    _messagingV2ChannelsSenderProfileEmails.Label= label;
                    return this;
                }
                public MessagingV2ChannelsSenderProfileEmails Build()
                {
                    return _messagingV2ChannelsSenderProfileEmails;
                }
            }
        }
        public class MessagingV2ChannelsSenderProfileWebsites
        {
            [JsonProperty("label")]
            private string Label {get; set;}
            [JsonProperty("website")]
            private string Website {get; set;}
            public MessagingV2ChannelsSenderProfileWebsites() { }
            public class Builder
            {
                private MessagingV2ChannelsSenderProfileWebsites _messagingV2ChannelsSenderProfileWebsites = new MessagingV2ChannelsSenderProfileWebsites();
                public Builder()
                {
                }
                public Builder WithLabel(string label)
                {
                    _messagingV2ChannelsSenderProfileWebsites.Label= label;
                    return this;
                }
                public Builder WithWebsite(string website)
                {
                    _messagingV2ChannelsSenderProfileWebsites.Website= website;
                    return this;
                }
                public MessagingV2ChannelsSenderProfileWebsites Build()
                {
                    return _messagingV2ChannelsSenderProfileWebsites;
                }
            }
        }
        public class MessagingV2ChannelsSenderProfile
        {
            [JsonProperty("name")]
            private string Name {get; set;}
            [JsonProperty("about")]
            private string About {get; set;}
            [JsonProperty("address")]
            private string Address {get; set;}
            [JsonProperty("description")]
            private string Description {get; set;}
            [JsonProperty("emails")]
            private List<MessagingV2ChannelsSenderProfileEmails> Emails {get; set;}
            [JsonProperty("logo_url")]
            private string LogoUrl {get; set;}
            [JsonProperty("vertical")]
            private string Vertical {get; set;}
            [JsonProperty("websites")]
            private List<MessagingV2ChannelsSenderProfileWebsites> Websites {get; set;}
            public MessagingV2ChannelsSenderProfile() { }
            public class Builder
            {
                private MessagingV2ChannelsSenderProfile _messagingV2ChannelsSenderProfile = new MessagingV2ChannelsSenderProfile();
                public Builder()
                {
                }
                public Builder WithName(string name)
                {
                    _messagingV2ChannelsSenderProfile.Name= name;
                    return this;
                }
                public Builder WithAbout(string about)
                {
                    _messagingV2ChannelsSenderProfile.About= about;
                    return this;
                }
                public Builder WithAddress(string address)
                {
                    _messagingV2ChannelsSenderProfile.Address= address;
                    return this;
                }
                public Builder WithDescription(string description)
                {
                    _messagingV2ChannelsSenderProfile.Description= description;
                    return this;
                }
                public Builder WithEmails(List<MessagingV2ChannelsSenderProfileEmails> emails)
                {
                    _messagingV2ChannelsSenderProfile.Emails= emails;
                    return this;
                }
                public Builder WithLogoUrl(string logoUrl)
                {
                    _messagingV2ChannelsSenderProfile.LogoUrl= logoUrl;
                    return this;
                }
                public Builder WithVertical(string vertical)
                {
                    _messagingV2ChannelsSenderProfile.Vertical= vertical;
                    return this;
                }
                public Builder WithWebsites(List<MessagingV2ChannelsSenderProfileWebsites> websites)
                {
                    _messagingV2ChannelsSenderProfile.Websites= websites;
                    return this;
                }
                public MessagingV2ChannelsSenderProfile Build()
                {
                    return _messagingV2ChannelsSenderProfile;
                }
            }
        }
        public class MessagingV2ChannelsSenderRequestsCreate
        {
            [JsonProperty("sender_id")]
            private string SenderId {get; set;}
            [JsonProperty("configuration")]
            private MessagingV2ChannelsSenderConfiguration Configuration {get; set;}
            [JsonProperty("webhook")]
            private MessagingV2ChannelsSenderWebhook Webhook {get; set;}
            [JsonProperty("profile")]
            private MessagingV2ChannelsSenderProfile Profile {get; set;}
            public MessagingV2ChannelsSenderRequestsCreate() { }
            public class Builder
            {
                private MessagingV2ChannelsSenderRequestsCreate _messagingV2ChannelsSenderRequestsCreate = new MessagingV2ChannelsSenderRequestsCreate();
                public Builder()
                {
                }
                public Builder WithSenderId(string senderId)
                {
                    _messagingV2ChannelsSenderRequestsCreate.SenderId= senderId;
                    return this;
                }
                public Builder WithConfiguration(MessagingV2ChannelsSenderConfiguration configuration)
                {
                    _messagingV2ChannelsSenderRequestsCreate.Configuration= configuration;
                    return this;
                }
                public Builder WithWebhook(MessagingV2ChannelsSenderWebhook webhook)
                {
                    _messagingV2ChannelsSenderRequestsCreate.Webhook= webhook;
                    return this;
                }
                public Builder WithProfile(MessagingV2ChannelsSenderProfile profile)
                {
                    _messagingV2ChannelsSenderRequestsCreate.Profile= profile;
                    return this;
                }
                public MessagingV2ChannelsSenderRequestsCreate Build()
                {
                    return _messagingV2ChannelsSenderRequestsCreate;
                }
            }
        }
        public class MessagingV2ChannelsSenderRequestsUpdate
        {
            [JsonProperty("configuration")]
            private MessagingV2ChannelsSenderConfiguration Configuration {get; set;}
            [JsonProperty("webhook")]
            private MessagingV2ChannelsSenderWebhook Webhook {get; set;}
            [JsonProperty("profile")]
            private MessagingV2ChannelsSenderProfile Profile {get; set;}
            public MessagingV2ChannelsSenderRequestsUpdate() { }
            public class Builder
            {
                private MessagingV2ChannelsSenderRequestsUpdate _messagingV2ChannelsSenderRequestsUpdate = new MessagingV2ChannelsSenderRequestsUpdate();
                public Builder()
                {
                }
                public Builder WithConfiguration(MessagingV2ChannelsSenderConfiguration configuration)
                {
                    _messagingV2ChannelsSenderRequestsUpdate.Configuration= configuration;
                    return this;
                }
                public Builder WithWebhook(MessagingV2ChannelsSenderWebhook webhook)
                {
                    _messagingV2ChannelsSenderRequestsUpdate.Webhook= webhook;
                    return this;
                }
                public Builder WithProfile(MessagingV2ChannelsSenderProfile profile)
                {
                    _messagingV2ChannelsSenderRequestsUpdate.Profile= profile;
                    return this;
                }
                public MessagingV2ChannelsSenderRequestsUpdate Build()
                {
                    return _messagingV2ChannelsSenderRequestsUpdate;
                }
            }
        }
        public class MessagingV2ChannelsSenderProperties
        {
            [JsonProperty("quality_rating")]
            private string QualityRating {get; set;}
            [JsonProperty("messaging_limit")]
            private string MessagingLimit {get; set;}
            public MessagingV2ChannelsSenderProperties() { }
            public class Builder
            {
                private MessagingV2ChannelsSenderProperties _messagingV2ChannelsSenderProperties = new MessagingV2ChannelsSenderProperties();
                public Builder()
                {
                }
                public Builder WithQualityRating(string qualityRating)
                {
                    _messagingV2ChannelsSenderProperties.QualityRating= qualityRating;
                    return this;
                }
                public Builder WithMessagingLimit(string messagingLimit)
                {
                    _messagingV2ChannelsSenderProperties.MessagingLimit= messagingLimit;
                    return this;
                }
                public MessagingV2ChannelsSenderProperties Build()
                {
                    return _messagingV2ChannelsSenderProperties;
                }
            }
        }
        public class MessagingV2ChannelsSenderOfflineReasonsItems
        {
            [JsonProperty("code")]
            private string Code {get; set;}
            [JsonProperty("message")]
            private string Message {get; set;}
            [JsonProperty("more_info")]
            private Uri MoreInfo {get; set;}
            public MessagingV2ChannelsSenderOfflineReasonsItems() { }
            public class Builder
            {
                private MessagingV2ChannelsSenderOfflineReasonsItems _messagingV2ChannelsSenderOfflineReasonsItems = new MessagingV2ChannelsSenderOfflineReasonsItems();
                public Builder()
                {
                }
                public Builder WithCode(string code)
                {
                    _messagingV2ChannelsSenderOfflineReasonsItems.Code= code;
                    return this;
                }
                public Builder WithMessage(string message)
                {
                    _messagingV2ChannelsSenderOfflineReasonsItems.Message= message;
                    return this;
                }
                public Builder WithMoreInfo(Uri moreInfo)
                {
                    _messagingV2ChannelsSenderOfflineReasonsItems.MoreInfo= moreInfo;
                    return this;
                }
                public MessagingV2ChannelsSenderOfflineReasonsItems Build()
                {
                    return _messagingV2ChannelsSenderOfflineReasonsItems;
                }
            }
        }

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class VerificationMethodEnum : StringEnum
        {
            private VerificationMethodEnum(string value) : base(value) {}
            public VerificationMethodEnum() {}
            public static implicit operator VerificationMethodEnum(string value)
            {
                return new VerificationMethodEnum(value);
            }
            public static readonly VerificationMethodEnum Sms = new VerificationMethodEnum("sms");
            public static readonly VerificationMethodEnum Voice = new VerificationMethodEnum("voice");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }
            public static readonly StatusEnum Creating = new StatusEnum("CREATING");
            public static readonly StatusEnum Online = new StatusEnum("ONLINE");
            public static readonly StatusEnum Offline = new StatusEnum("OFFLINE");
            public static readonly StatusEnum PendingVerification = new StatusEnum("PENDING_VERIFICATION");
            public static readonly StatusEnum Verifying = new StatusEnum("VERIFYING");
            public static readonly StatusEnum OnlineUpdating = new StatusEnum("ONLINE:UPDATING");
            public static readonly StatusEnum Stubbed = new StatusEnum("STUBBED");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class FallbackMethodEnum : StringEnum
        {
            private FallbackMethodEnum(string value) : base(value) {}
            public FallbackMethodEnum() {}
            public static implicit operator FallbackMethodEnum(string value)
            {
                return new FallbackMethodEnum(value);
            }
            public static readonly FallbackMethodEnum Post = new FallbackMethodEnum("POST");
            public static readonly FallbackMethodEnum Put = new FallbackMethodEnum("PUT");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class CallbackMethodEnum : StringEnum
        {
            private CallbackMethodEnum(string value) : base(value) {}
            public CallbackMethodEnum() {}
            public static implicit operator CallbackMethodEnum(string value)
            {
                return new CallbackMethodEnum(value);
            }
            public static readonly CallbackMethodEnum Post = new CallbackMethodEnum("POST");
            public static readonly CallbackMethodEnum Put = new CallbackMethodEnum("PUT");

        }

        
        private static Request BuildCreateRequest(CreateChannelsSenderOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Channels/Senders";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Messaging,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Create a new sender of WhatsApp. </summary>
        /// <param name="options"> Create ChannelsSender parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ChannelsSender </returns>
        public static ChannelsSenderResource Create(CreateChannelsSenderOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a new sender of WhatsApp. </summary>
        /// <param name="options"> Create ChannelsSender parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ChannelsSender </returns>
        public static async System.Threading.Tasks.Task<ChannelsSenderResource> CreateAsync(CreateChannelsSenderOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a new sender of WhatsApp. </summary>
        /// <param name="messagingV2ChannelsSenderRequestsCreate">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ChannelsSender </returns>
        public static ChannelsSenderResource Create(
                                          ChannelsSenderResource.MessagingV2ChannelsSenderRequestsCreate messagingV2ChannelsSenderRequestsCreate,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateChannelsSenderOptions(messagingV2ChannelsSenderRequestsCreate){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a new sender of WhatsApp. </summary>
        /// <param name="messagingV2ChannelsSenderRequestsCreate">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ChannelsSender </returns>
        public static async System.Threading.Tasks.Task<ChannelsSenderResource> CreateAsync(
                                                                                  ChannelsSenderResource.MessagingV2ChannelsSenderRequestsCreate messagingV2ChannelsSenderRequestsCreate,
                                                                                    ITwilioRestClient client = null)
        {
        var options = new CreateChannelsSenderOptions(messagingV2ChannelsSenderRequestsCreate){  };
            return await CreateAsync(options, client);
        }
        #endif
        
        /// <summary> Delete a specific sender by its unique identifier. </summary>
        /// <param name="options"> Delete ChannelsSender parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ChannelsSender </returns>
        private static Request BuildDeleteRequest(DeleteChannelsSenderOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Channels/Senders/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Messaging,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Delete a specific sender by its unique identifier. </summary>
        /// <param name="options"> Delete ChannelsSender parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ChannelsSender </returns>
        public static bool Delete(DeleteChannelsSenderOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> Delete a specific sender by its unique identifier. </summary>
        /// <param name="options"> Delete ChannelsSender parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ChannelsSender </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteChannelsSenderOptions options,
                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> Delete a specific sender by its unique identifier. </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Sender. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ChannelsSender </returns>
        public static bool Delete(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteChannelsSenderOptions(pathSid)     ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> Delete a specific sender by its unique identifier. </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Sender. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ChannelsSender </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteChannelsSenderOptions(pathSid) ;
            return await DeleteAsync(options, client);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchChannelsSenderOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Channels/Senders/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Messaging,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Retrieve details of a specific sender by its unique identifier. </summary>
        /// <param name="options"> Fetch ChannelsSender parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ChannelsSender </returns>
        public static ChannelsSenderResource Fetch(FetchChannelsSenderOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Retrieve details of a specific sender by its unique identifier. </summary>
        /// <param name="options"> Fetch ChannelsSender parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ChannelsSender </returns>
        public static async System.Threading.Tasks.Task<ChannelsSenderResource> FetchAsync(FetchChannelsSenderOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Retrieve details of a specific sender by its unique identifier. </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Sender. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ChannelsSender </returns>
        public static ChannelsSenderResource Fetch(
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchChannelsSenderOptions(pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Retrieve details of a specific sender by its unique identifier. </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Sender. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ChannelsSender </returns>
        public static async System.Threading.Tasks.Task<ChannelsSenderResource> FetchAsync(string pathSid, ITwilioRestClient client = null)
        {
            var options = new FetchChannelsSenderOptions(pathSid){  };
            return await FetchAsync(options, client);
        }
        #endif
        
        private static Request BuildReadRequest(ReadChannelsSenderOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Channels/Senders";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Messaging,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> Get a list of Senders for an account. </summary>
        /// <param name="options"> Read ChannelsSender parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ChannelsSender </returns>
        public static ResourceSet<ChannelsSenderResource> Read(ReadChannelsSenderOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<ChannelsSenderResource>.FromJson("senders", response.Content);
            return new ResourceSet<ChannelsSenderResource>(page, options, client);
        }

        #if !NET35
        /// <summary> Get a list of Senders for an account. </summary>
        /// <param name="options"> Read ChannelsSender parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ChannelsSender </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ChannelsSenderResource>> ReadAsync(ReadChannelsSenderOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<ChannelsSenderResource>.FromJson("senders", response.Content);
            return new ResourceSet<ChannelsSenderResource>(page, options, client);
        }
        #endif
        /// <summary> Get a list of Senders for an account. </summary>
        /// <param name="channel">  </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ChannelsSender </returns>
        public static ResourceSet<ChannelsSenderResource> Read(
                                                     string channel,
                                                     long? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadChannelsSenderOptions(channel){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> Get a list of Senders for an account. </summary>
        /// <param name="channel">  </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ChannelsSender </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ChannelsSenderResource>> ReadAsync(
                                                                                             string channel,
                                                                                             long? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null)
        {
            var options = new ReadChannelsSenderOptions(channel){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<ChannelsSenderResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<ChannelsSenderResource>.FromJson("senders", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<ChannelsSenderResource> NextPage(Page<ChannelsSenderResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ChannelsSenderResource>.FromJson("senders", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<ChannelsSenderResource> PreviousPage(Page<ChannelsSenderResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ChannelsSenderResource>.FromJson("senders", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateChannelsSenderOptions options, ITwilioRestClient client)
        {
            
            string path = "/v2/Channels/Senders/{Sid}";

            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Messaging,
                path,

                contentType: EnumConstants.ContentTypeEnum.JSON,
                body: options.GetBody(),
                headerParams: null
            );
        }

        /// <summary> Update a specific sender information like OTP Code, Webhook, Profile information. </summary>
        /// <param name="options"> Update ChannelsSender parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ChannelsSender </returns>
        public static ChannelsSenderResource Update(UpdateChannelsSenderOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update a specific sender information like OTP Code, Webhook, Profile information. </summary>
        /// <param name="options"> Update ChannelsSender parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ChannelsSender </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<ChannelsSenderResource> UpdateAsync(UpdateChannelsSenderOptions options,
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Update a specific sender information like OTP Code, Webhook, Profile information. </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Sender. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ChannelsSender </returns>
        public static ChannelsSenderResource Update(
                                          string pathSid,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateChannelsSenderOptions(pathSid){  };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Update a specific sender information like OTP Code, Webhook, Profile information. </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Sender. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ChannelsSender </returns>
        public static async System.Threading.Tasks.Task<ChannelsSenderResource> UpdateAsync(
                                                                              string pathSid,
                                                                                ITwilioRestClient client = null)
        {
            var options = new UpdateChannelsSenderOptions(pathSid){  };
            return await UpdateAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ChannelsSenderResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ChannelsSenderResource object represented by the provided JSON </returns>
        public static ChannelsSenderResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ChannelsSenderResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> A 34 character string that uniquely identifies this Sender. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        
        [JsonProperty("status")]
        public ChannelsSenderResource.StatusEnum Status { get; private set; }

        ///<summary> The ID of this Sender prefixed with the channel, e.g., `whatsapp:E.164` </summary> 
        [JsonProperty("sender_id")]
        public string SenderId { get; private set; }

        ///<summary> The configuration </summary> 
        [JsonProperty("configuration")]
        public MessagingV2ChannelsSenderConfiguration Configuration { get; private set; }

        ///<summary> The webhook </summary> 
        [JsonProperty("webhook")]
        public MessagingV2ChannelsSenderWebhook Webhook { get; private set; }

        ///<summary> The profile </summary> 
        [JsonProperty("profile")]
        public MessagingV2ChannelsSenderProfile Profile { get; private set; }

        ///<summary> The properties </summary> 
        [JsonProperty("properties")]
        public MessagingV2ChannelsSenderProperties Properties { get; private set; }

        ///<summary> Reasons why the sender is offline., e.g., [{\"code\": \"21211400\", \"message\": \"Whatsapp business account is banned by provider {provider_name} | Credit line is assigned to another BSP\", \"more_info\": \"https://www.twilio.com/docs/errors/21211400\"}] </summary> 
        [JsonProperty("offline_reasons")]
        public List<MessagingV2ChannelsSenderOfflineReasonsItems> OfflineReasons { get; private set; }

        ///<summary> The URL of this resource, relative to `https://messaging.twilio.com`. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private ChannelsSenderResource() {

        }
    }
}

