/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Conversations.V1.Service.Configuration
{
    /// <summary> Fetch push notification service settings </summary>
    public class FetchNotificationOptions : IOptions<NotificationResource>
    {
    
        ///<summary> The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. </summary> 
        public string PathChatServiceSid { get; }



        /// <summary> Construct a new FetchServiceNotificationOptions </summary>
        /// <param name="pathChatServiceSid"> The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. </param>
        public FetchNotificationOptions(string pathChatServiceSid)
        {
            PathChatServiceSid = pathChatServiceSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Update push notification service settings </summary>
    public class UpdateNotificationOptions : IOptions<NotificationResource>
    {
    
        ///<summary> The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. </summary> 
        public string PathChatServiceSid { get; }

        ///<summary> Weather the notification logging is enabled. </summary> 
        public bool? LogEnabled { get; set; }

        ///<summary> Whether to send a notification when a new message is added to a conversation. The default is `false`. </summary> 
        public bool? NewMessageEnabled { get; set; }

        ///<summary> The template to use to create the notification text displayed when a new message is added to a conversation and `new_message.enabled` is `true`. </summary> 
        public string NewMessageTemplate { get; set; }

        ///<summary> The name of the sound to play when a new message is added to a conversation and `new_message.enabled` is `true`. </summary> 
        public string NewMessageSound { get; set; }

        ///<summary> Whether the new message badge is enabled. The default is `false`. </summary> 
        public bool? NewMessageBadgeCountEnabled { get; set; }

        ///<summary> Whether to send a notification when a participant is added to a conversation. The default is `false`. </summary> 
        public bool? AddedToConversationEnabled { get; set; }

        ///<summary> The template to use to create the notification text displayed when a participant is added to a conversation and `added_to_conversation.enabled` is `true`. </summary> 
        public string AddedToConversationTemplate { get; set; }

        ///<summary> The name of the sound to play when a participant is added to a conversation and `added_to_conversation.enabled` is `true`. </summary> 
        public string AddedToConversationSound { get; set; }

        ///<summary> Whether to send a notification to a user when they are removed from a conversation. The default is `false`. </summary> 
        public bool? RemovedFromConversationEnabled { get; set; }

        ///<summary> The template to use to create the notification text displayed to a user when they are removed from a conversation and `removed_from_conversation.enabled` is `true`. </summary> 
        public string RemovedFromConversationTemplate { get; set; }

        ///<summary> The name of the sound to play to a user when they are removed from a conversation and `removed_from_conversation.enabled` is `true`. </summary> 
        public string RemovedFromConversationSound { get; set; }

        ///<summary> Whether to send a notification when a new message with media/file attachments is added to a conversation. The default is `false`. </summary> 
        public bool? NewMessageWithMediaEnabled { get; set; }

        ///<summary> The template to use to create the notification text displayed when a new message with media/file attachments is added to a conversation and `new_message.attachments.enabled` is `true`. </summary> 
        public string NewMessageWithMediaTemplate { get; set; }



        /// <summary> Construct a new UpdateServiceNotificationOptions </summary>
        /// <param name="pathChatServiceSid"> The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. </param>
        public UpdateNotificationOptions(string pathChatServiceSid)
        {
            PathChatServiceSid = pathChatServiceSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (LogEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("LogEnabled", LogEnabled.Value.ToString().ToLower()));
            }
            if (NewMessageEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("NewMessage.Enabled", NewMessageEnabled.Value.ToString().ToLower()));
            }
            if (NewMessageTemplate != null)
            {
                p.Add(new KeyValuePair<string, string>("NewMessage.Template", NewMessageTemplate));
            }
            if (NewMessageSound != null)
            {
                p.Add(new KeyValuePair<string, string>("NewMessage.Sound", NewMessageSound));
            }
            if (NewMessageBadgeCountEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("NewMessage.BadgeCountEnabled", NewMessageBadgeCountEnabled.Value.ToString().ToLower()));
            }
            if (AddedToConversationEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("AddedToConversation.Enabled", AddedToConversationEnabled.Value.ToString().ToLower()));
            }
            if (AddedToConversationTemplate != null)
            {
                p.Add(new KeyValuePair<string, string>("AddedToConversation.Template", AddedToConversationTemplate));
            }
            if (AddedToConversationSound != null)
            {
                p.Add(new KeyValuePair<string, string>("AddedToConversation.Sound", AddedToConversationSound));
            }
            if (RemovedFromConversationEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("RemovedFromConversation.Enabled", RemovedFromConversationEnabled.Value.ToString().ToLower()));
            }
            if (RemovedFromConversationTemplate != null)
            {
                p.Add(new KeyValuePair<string, string>("RemovedFromConversation.Template", RemovedFromConversationTemplate));
            }
            if (RemovedFromConversationSound != null)
            {
                p.Add(new KeyValuePair<string, string>("RemovedFromConversation.Sound", RemovedFromConversationSound));
            }
            if (NewMessageWithMediaEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("NewMessage.WithMedia.Enabled", NewMessageWithMediaEnabled.Value.ToString().ToLower()));
            }
            if (NewMessageWithMediaTemplate != null)
            {
                p.Add(new KeyValuePair<string, string>("NewMessage.WithMedia.Template", NewMessageWithMediaTemplate));
            }
            return p;
        }

        

    }


}

