/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Taskrouter.V1.Workspace.Task
{
    public class ReservationResource : Resource
    {
    

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }
            public static readonly StatusEnum Pending = new StatusEnum("pending");
            public static readonly StatusEnum Accepted = new StatusEnum("accepted");
            public static readonly StatusEnum Rejected = new StatusEnum("rejected");
            public static readonly StatusEnum Timeout = new StatusEnum("timeout");
            public static readonly StatusEnum Canceled = new StatusEnum("canceled");
            public static readonly StatusEnum Rescinded = new StatusEnum("rescinded");
            public static readonly StatusEnum Wrapping = new StatusEnum("wrapping");
            public static readonly StatusEnum Completed = new StatusEnum("completed");

        }
        public sealed class CallStatusEnum : StringEnum
        {
            private CallStatusEnum(string value) : base(value) {}
            public CallStatusEnum() {}
            public static implicit operator CallStatusEnum(string value)
            {
                return new CallStatusEnum(value);
            }

            public static readonly CallStatusEnum Initiated = new CallStatusEnum("initiated");
            public static readonly CallStatusEnum Ringing = new CallStatusEnum("ringing");
            public static readonly CallStatusEnum Answered = new CallStatusEnum("answered");
            public static readonly CallStatusEnum Completed = new CallStatusEnum("completed");
        }
        public sealed class ConferenceEventEnum : StringEnum
        {
            private ConferenceEventEnum(string value) : base(value) {}
            public ConferenceEventEnum() {}
            public static implicit operator ConferenceEventEnum(string value)
            {
                return new ConferenceEventEnum(value);
            }

            public static readonly ConferenceEventEnum Start = new ConferenceEventEnum("start");
            public static readonly ConferenceEventEnum End = new ConferenceEventEnum("end");
            public static readonly ConferenceEventEnum Join = new ConferenceEventEnum("join");
            public static readonly ConferenceEventEnum Leave = new ConferenceEventEnum("leave");
            public static readonly ConferenceEventEnum Mute = new ConferenceEventEnum("mute");
            public static readonly ConferenceEventEnum Hold = new ConferenceEventEnum("hold");
            public static readonly ConferenceEventEnum Speaker = new ConferenceEventEnum("speaker");
        }
        public sealed class SupervisorModeEnum : StringEnum
        {
            private SupervisorModeEnum(string value) : base(value) {}
            public SupervisorModeEnum() {}
            public static implicit operator SupervisorModeEnum(string value)
            {
                return new SupervisorModeEnum(value);
            }
            public static readonly SupervisorModeEnum Monitor = new SupervisorModeEnum("monitor");
            public static readonly SupervisorModeEnum Whisper = new SupervisorModeEnum("whisper");
            public static readonly SupervisorModeEnum Barge = new SupervisorModeEnum("barge");

        }

        
        private static Request BuildFetchRequest(FetchReservationOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}";

            string PathWorkspaceSid = options.PathWorkspaceSid;
            path = path.Replace("{"+"WorkspaceSid"+"}", PathWorkspaceSid);
            string PathTaskSid = options.PathTaskSid;
            path = path.Replace("{"+"TaskSid"+"}", PathTaskSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Taskrouter,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> fetch </summary>
        /// <param name="options"> Fetch Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns>
        public static ReservationResource Fetch(FetchReservationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="options"> Fetch Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns>
        public static async System.Threading.Tasks.Task<ReservationResource> FetchAsync(FetchReservationOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> fetch </summary>
        /// <param name="pathWorkspaceSid"> The SID of the Workspace with the TaskReservation resource to fetch. </param>
        /// <param name="pathTaskSid"> The SID of the reserved Task resource with the TaskReservation resource to fetch. </param>
        /// <param name="pathSid"> The SID of the TaskReservation resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns>
        public static ReservationResource Fetch(
                                         string pathWorkspaceSid, 
                                         string pathTaskSid, 
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchReservationOptions(pathWorkspaceSid, pathTaskSid, pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="pathWorkspaceSid"> The SID of the Workspace with the TaskReservation resource to fetch. </param>
        /// <param name="pathTaskSid"> The SID of the reserved Task resource with the TaskReservation resource to fetch. </param>
        /// <param name="pathSid"> The SID of the TaskReservation resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns>
        public static async System.Threading.Tasks.Task<ReservationResource> FetchAsync(string pathWorkspaceSid, string pathTaskSid, string pathSid, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchReservationOptions(pathWorkspaceSid, pathTaskSid, pathSid){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadReservationOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations";

            string PathWorkspaceSid = options.PathWorkspaceSid;
            path = path.Replace("{"+"WorkspaceSid"+"}", PathWorkspaceSid);
            string PathTaskSid = options.PathTaskSid;
            path = path.Replace("{"+"TaskSid"+"}", PathTaskSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Taskrouter,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> read </summary>
        /// <param name="options"> Read Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns>
        public static ResourceSet<ReservationResource> Read(ReadReservationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<ReservationResource>.FromJson("reservations", response.Content);
            return new ResourceSet<ReservationResource>(page, options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="options"> Read Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ReservationResource>> ReadAsync(ReadReservationOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<ReservationResource>.FromJson("reservations", response.Content);
            return new ResourceSet<ReservationResource>(page, options, client);
        }
        #endif
        /// <summary> read </summary>
        /// <param name="pathWorkspaceSid"> The SID of the Workspace with the TaskReservation resources to read. </param>
        /// <param name="pathTaskSid"> The SID of the reserved Task resource with the TaskReservation resources to read. </param>
        /// <param name="reservationStatus"> Returns the list of reservations for a task with a specified ReservationStatus.  Can be: `pending`, `accepted`, `rejected`, or `timeout`. </param>
        /// <param name="workerSid"> The SID of the reserved Worker resource to read. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns>
        public static ResourceSet<ReservationResource> Read(
                                                     string pathWorkspaceSid,
                                                     string pathTaskSid,
                                                     ReservationResource.StatusEnum reservationStatus = null,
                                                     string workerSid = null,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadReservationOptions(pathWorkspaceSid, pathTaskSid){ ReservationStatus = reservationStatus, WorkerSid = workerSid, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> read </summary>
        /// <param name="pathWorkspaceSid"> The SID of the Workspace with the TaskReservation resources to read. </param>
        /// <param name="pathTaskSid"> The SID of the reserved Task resource with the TaskReservation resources to read. </param>
        /// <param name="reservationStatus"> Returns the list of reservations for a task with a specified ReservationStatus.  Can be: `pending`, `accepted`, `rejected`, or `timeout`. </param>
        /// <param name="workerSid"> The SID of the reserved Worker resource to read. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ReservationResource>> ReadAsync(
                                                                                             string pathWorkspaceSid,
                                                                                             string pathTaskSid,
                                                                                             ReservationResource.StatusEnum reservationStatus = null,
                                                                                             string workerSid = null,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadReservationOptions(pathWorkspaceSid, pathTaskSid){ ReservationStatus = reservationStatus, WorkerSid = workerSid, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<ReservationResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<ReservationResource>.FromJson("reservations", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<ReservationResource> NextPage(Page<ReservationResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ReservationResource>.FromJson("reservations", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<ReservationResource> PreviousPage(Page<ReservationResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<ReservationResource>.FromJson("reservations", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateReservationOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}";

            string PathWorkspaceSid = options.PathWorkspaceSid;
            path = path.Replace("{"+"WorkspaceSid"+"}", PathWorkspaceSid);
            string PathTaskSid = options.PathTaskSid;
            path = path.Replace("{"+"TaskSid"+"}", PathTaskSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Taskrouter,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: options.GetHeaderParams()
            );
        }

        /// <summary> update </summary>
        /// <param name="options"> Update Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns>
        public static ReservationResource Update(UpdateReservationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> update </summary>
        /// <param name="options"> Update Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<ReservationResource> UpdateAsync(UpdateReservationOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> update </summary>
        /// <param name="pathWorkspaceSid"> The SID of the Workspace with the TaskReservation resources to update. </param>
        /// <param name="pathTaskSid"> The SID of the reserved Task resource with the TaskReservation resources to update. </param>
        /// <param name="pathSid"> The SID of the TaskReservation resource to update. </param>
        /// <param name="reservationStatus">  </param>
        /// <param name="workerActivitySid"> The new worker activity SID if rejecting a reservation. </param>
        /// <param name="instruction"> The assignment instruction for reservation. </param>
        /// <param name="dequeuePostWorkActivitySid"> The SID of the Activity resource to start after executing a Dequeue instruction. </param>
        /// <param name="dequeueFrom"> The Caller ID of the call to the worker when executing a Dequeue instruction. </param>
        /// <param name="dequeueRecord"> Whether to record both legs of a call when executing a Dequeue instruction or which leg to record. </param>
        /// <param name="dequeueTimeout"> Timeout for call when executing a Dequeue instruction. </param>
        /// <param name="dequeueTo"> The Contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. </param>
        /// <param name="dequeueStatusCallbackUrl"> The Callback URL for completed call event when executing a Dequeue instruction. </param>
        /// <param name="callFrom"> The Caller ID of the outbound call when executing a Call instruction. </param>
        /// <param name="callRecord"> Whether to record both legs of a call when executing a Call instruction or which leg to record. </param>
        /// <param name="callTimeout"> Timeout for call when executing a Call instruction. </param>
        /// <param name="callTo"> The Contact URI of the worker when executing a Call instruction.  Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. </param>
        /// <param name="callUrl"> TwiML URI executed on answering the worker's leg as a result of the Call instruction. </param>
        /// <param name="callStatusCallbackUrl"> The URL to call  for the completed call event when executing a Call instruction. </param>
        /// <param name="callAccept"> Whether to accept a reservation when executing a Call instruction. </param>
        /// <param name="redirectCallSid"> The Call SID of the call parked in the queue when executing a Redirect instruction. </param>
        /// <param name="redirectAccept"> Whether the reservation should be accepted when executing a Redirect instruction. </param>
        /// <param name="redirectUrl"> TwiML URI to redirect the call to when executing the Redirect instruction. </param>
        /// <param name="to"> The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. </param>
        /// <param name="from"> The Caller ID of the call to the worker when executing a Conference instruction. </param>
        /// <param name="statusCallback"> The URL we should call using the `status_callback_method` to send status information to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`. </param>
        /// <param name="statusCallbackEvent"> The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`. </param>
        /// <param name="timeout"> Timeout for call when executing a Conference instruction. </param>
        /// <param name="record"> Whether to record the participant and their conferences, including the time between conferences. The default is `false`. </param>
        /// <param name="muted"> Whether the agent is muted in the conference. The default is `false`. </param>
        /// <param name="beep"> Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`. </param>
        /// <param name="startConferenceOnEnter"> Whether to start the conference when the participant joins, if it has not already started. The default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference. </param>
        /// <param name="endConferenceOnExit"> Whether to end the conference when the agent leaves. </param>
        /// <param name="waitUrl"> The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). </param>
        /// <param name="waitMethod"> The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file. </param>
        /// <param name="earlyMedia"> Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`. </param>
        /// <param name="maxParticipants"> The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`. </param>
        /// <param name="conferenceStatusCallback"> The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored. </param>
        /// <param name="conferenceStatusCallbackMethod"> The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="conferenceStatusCallbackEvent"> The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`. </param>
        /// <param name="conferenceRecord"> Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`. </param>
        /// <param name="conferenceTrim"> How to trim the leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`. </param>
        /// <param name="recordingChannels"> The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`. </param>
        /// <param name="recordingStatusCallback"> The URL that we should call using the `recording_status_callback_method` when the recording status changes. </param>
        /// <param name="recordingStatusCallbackMethod"> The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="conferenceRecordingStatusCallback"> The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available. </param>
        /// <param name="conferenceRecordingStatusCallbackMethod"> The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="region"> The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`. </param>
        /// <param name="sipAuthUsername"> The SIP username used for authentication. </param>
        /// <param name="sipAuthPassword"> The SIP password for authentication. </param>
        /// <param name="dequeueStatusCallbackEvent"> The Call progress events sent via webhooks as a result of a Dequeue instruction. </param>
        /// <param name="postWorkActivitySid"> The new worker activity SID after executing a Conference instruction. </param>
        /// <param name="supervisorMode">  </param>
        /// <param name="supervisor"> The Supervisor SID/URI when executing the Supervise instruction. </param>
        /// <param name="endConferenceOnCustomerExit"> Whether to end the conference when the customer leaves. </param>
        /// <param name="beepOnCustomerEntrance"> Whether to play a notification beep when the customer joins. </param>
        /// <param name="jitterBufferSize"> The jitter buffer size for conference. Can be: `small`, `medium`, `large`, `off`. </param>
        /// <param name="ifMatch"> The If-Match HTTP request header </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns>
        public static ReservationResource Update(
                                          string pathWorkspaceSid,
                                          string pathTaskSid,
                                          string pathSid,
                                          ReservationResource.StatusEnum reservationStatus = null,
                                          string workerActivitySid = null,
                                          string instruction = null,
                                          string dequeuePostWorkActivitySid = null,
                                          string dequeueFrom = null,
                                          string dequeueRecord = null,
                                          int? dequeueTimeout = null,
                                          string dequeueTo = null,
                                          Uri dequeueStatusCallbackUrl = null,
                                          string callFrom = null,
                                          string callRecord = null,
                                          int? callTimeout = null,
                                          string callTo = null,
                                          Uri callUrl = null,
                                          Uri callStatusCallbackUrl = null,
                                          bool? callAccept = null,
                                          string redirectCallSid = null,
                                          bool? redirectAccept = null,
                                          Uri redirectUrl = null,
                                          string to = null,
                                          string from = null,
                                          Uri statusCallback = null,
                                          Twilio.Http.HttpMethod statusCallbackMethod = null,
                                          List<ReservationResource.CallStatusEnum> statusCallbackEvent = null,
                                          int? timeout = null,
                                          bool? record = null,
                                          bool? muted = null,
                                          string beep = null,
                                          bool? startConferenceOnEnter = null,
                                          bool? endConferenceOnExit = null,
                                          Uri waitUrl = null,
                                          Twilio.Http.HttpMethod waitMethod = null,
                                          bool? earlyMedia = null,
                                          int? maxParticipants = null,
                                          Uri conferenceStatusCallback = null,
                                          Twilio.Http.HttpMethod conferenceStatusCallbackMethod = null,
                                          List<ReservationResource.ConferenceEventEnum> conferenceStatusCallbackEvent = null,
                                          string conferenceRecord = null,
                                          string conferenceTrim = null,
                                          string recordingChannels = null,
                                          Uri recordingStatusCallback = null,
                                          Twilio.Http.HttpMethod recordingStatusCallbackMethod = null,
                                          Uri conferenceRecordingStatusCallback = null,
                                          Twilio.Http.HttpMethod conferenceRecordingStatusCallbackMethod = null,
                                          string region = null,
                                          string sipAuthUsername = null,
                                          string sipAuthPassword = null,
                                          List<string> dequeueStatusCallbackEvent = null,
                                          string postWorkActivitySid = null,
                                          ReservationResource.SupervisorModeEnum supervisorMode = null,
                                          string supervisor = null,
                                          bool? endConferenceOnCustomerExit = null,
                                          bool? beepOnCustomerEntrance = null,
                                          string jitterBufferSize = null,
                                          string ifMatch = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateReservationOptions(pathWorkspaceSid, pathTaskSid, pathSid){ ReservationStatus = reservationStatus, WorkerActivitySid = workerActivitySid, Instruction = instruction, DequeuePostWorkActivitySid = dequeuePostWorkActivitySid, DequeueFrom = dequeueFrom, DequeueRecord = dequeueRecord, DequeueTimeout = dequeueTimeout, DequeueTo = dequeueTo, DequeueStatusCallbackUrl = dequeueStatusCallbackUrl, CallFrom = callFrom, CallRecord = callRecord, CallTimeout = callTimeout, CallTo = callTo, CallUrl = callUrl, CallStatusCallbackUrl = callStatusCallbackUrl, CallAccept = callAccept, RedirectCallSid = redirectCallSid, RedirectAccept = redirectAccept, RedirectUrl = redirectUrl, To = to, From = from, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, StatusCallbackEvent = statusCallbackEvent, Timeout = timeout, Record = record, Muted = muted, Beep = beep, StartConferenceOnEnter = startConferenceOnEnter, EndConferenceOnExit = endConferenceOnExit, WaitUrl = waitUrl, WaitMethod = waitMethod, EarlyMedia = earlyMedia, MaxParticipants = maxParticipants, ConferenceStatusCallback = conferenceStatusCallback, ConferenceStatusCallbackMethod = conferenceStatusCallbackMethod, ConferenceStatusCallbackEvent = conferenceStatusCallbackEvent, ConferenceRecord = conferenceRecord, ConferenceTrim = conferenceTrim, RecordingChannels = recordingChannels, RecordingStatusCallback = recordingStatusCallback, RecordingStatusCallbackMethod = recordingStatusCallbackMethod, ConferenceRecordingStatusCallback = conferenceRecordingStatusCallback, ConferenceRecordingStatusCallbackMethod = conferenceRecordingStatusCallbackMethod, Region = region, SipAuthUsername = sipAuthUsername, SipAuthPassword = sipAuthPassword, DequeueStatusCallbackEvent = dequeueStatusCallbackEvent, PostWorkActivitySid = postWorkActivitySid, SupervisorMode = supervisorMode, Supervisor = supervisor, EndConferenceOnCustomerExit = endConferenceOnCustomerExit, BeepOnCustomerEntrance = beepOnCustomerEntrance, JitterBufferSize = jitterBufferSize, IfMatch = ifMatch };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> update </summary>
        /// <param name="pathWorkspaceSid"> The SID of the Workspace with the TaskReservation resources to update. </param>
        /// <param name="pathTaskSid"> The SID of the reserved Task resource with the TaskReservation resources to update. </param>
        /// <param name="pathSid"> The SID of the TaskReservation resource to update. </param>
        /// <param name="reservationStatus">  </param>
        /// <param name="workerActivitySid"> The new worker activity SID if rejecting a reservation. </param>
        /// <param name="instruction"> The assignment instruction for reservation. </param>
        /// <param name="dequeuePostWorkActivitySid"> The SID of the Activity resource to start after executing a Dequeue instruction. </param>
        /// <param name="dequeueFrom"> The Caller ID of the call to the worker when executing a Dequeue instruction. </param>
        /// <param name="dequeueRecord"> Whether to record both legs of a call when executing a Dequeue instruction or which leg to record. </param>
        /// <param name="dequeueTimeout"> Timeout for call when executing a Dequeue instruction. </param>
        /// <param name="dequeueTo"> The Contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. </param>
        /// <param name="dequeueStatusCallbackUrl"> The Callback URL for completed call event when executing a Dequeue instruction. </param>
        /// <param name="callFrom"> The Caller ID of the outbound call when executing a Call instruction. </param>
        /// <param name="callRecord"> Whether to record both legs of a call when executing a Call instruction or which leg to record. </param>
        /// <param name="callTimeout"> Timeout for call when executing a Call instruction. </param>
        /// <param name="callTo"> The Contact URI of the worker when executing a Call instruction.  Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. </param>
        /// <param name="callUrl"> TwiML URI executed on answering the worker's leg as a result of the Call instruction. </param>
        /// <param name="callStatusCallbackUrl"> The URL to call  for the completed call event when executing a Call instruction. </param>
        /// <param name="callAccept"> Whether to accept a reservation when executing a Call instruction. </param>
        /// <param name="redirectCallSid"> The Call SID of the call parked in the queue when executing a Redirect instruction. </param>
        /// <param name="redirectAccept"> Whether the reservation should be accepted when executing a Redirect instruction. </param>
        /// <param name="redirectUrl"> TwiML URI to redirect the call to when executing the Redirect instruction. </param>
        /// <param name="to"> The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. </param>
        /// <param name="from"> The Caller ID of the call to the worker when executing a Conference instruction. </param>
        /// <param name="statusCallback"> The URL we should call using the `status_callback_method` to send status information to your application. </param>
        /// <param name="statusCallbackMethod"> The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`. </param>
        /// <param name="statusCallbackEvent"> The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`. </param>
        /// <param name="timeout"> Timeout for call when executing a Conference instruction. </param>
        /// <param name="record"> Whether to record the participant and their conferences, including the time between conferences. The default is `false`. </param>
        /// <param name="muted"> Whether the agent is muted in the conference. The default is `false`. </param>
        /// <param name="beep"> Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`. </param>
        /// <param name="startConferenceOnEnter"> Whether to start the conference when the participant joins, if it has not already started. The default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference. </param>
        /// <param name="endConferenceOnExit"> Whether to end the conference when the agent leaves. </param>
        /// <param name="waitUrl"> The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). </param>
        /// <param name="waitMethod"> The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file. </param>
        /// <param name="earlyMedia"> Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`. </param>
        /// <param name="maxParticipants"> The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`. </param>
        /// <param name="conferenceStatusCallback"> The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored. </param>
        /// <param name="conferenceStatusCallbackMethod"> The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="conferenceStatusCallbackEvent"> The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`. </param>
        /// <param name="conferenceRecord"> Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`. </param>
        /// <param name="conferenceTrim"> How to trim the leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`. </param>
        /// <param name="recordingChannels"> The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`. </param>
        /// <param name="recordingStatusCallback"> The URL that we should call using the `recording_status_callback_method` when the recording status changes. </param>
        /// <param name="recordingStatusCallbackMethod"> The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="conferenceRecordingStatusCallback"> The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available. </param>
        /// <param name="conferenceRecordingStatusCallbackMethod"> The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`. </param>
        /// <param name="region"> The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`. </param>
        /// <param name="sipAuthUsername"> The SIP username used for authentication. </param>
        /// <param name="sipAuthPassword"> The SIP password for authentication. </param>
        /// <param name="dequeueStatusCallbackEvent"> The Call progress events sent via webhooks as a result of a Dequeue instruction. </param>
        /// <param name="postWorkActivitySid"> The new worker activity SID after executing a Conference instruction. </param>
        /// <param name="supervisorMode">  </param>
        /// <param name="supervisor"> The Supervisor SID/URI when executing the Supervise instruction. </param>
        /// <param name="endConferenceOnCustomerExit"> Whether to end the conference when the customer leaves. </param>
        /// <param name="beepOnCustomerEntrance"> Whether to play a notification beep when the customer joins. </param>
        /// <param name="jitterBufferSize"> The jitter buffer size for conference. Can be: `small`, `medium`, `large`, `off`. </param>
        /// <param name="ifMatch"> The If-Match HTTP request header </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns>
        public static async System.Threading.Tasks.Task<ReservationResource> UpdateAsync(
                                                                              string pathWorkspaceSid,
                                                                              string pathTaskSid,
                                                                              string pathSid,
                                                                              ReservationResource.StatusEnum reservationStatus = null,
                                                                              string workerActivitySid = null,
                                                                              string instruction = null,
                                                                              string dequeuePostWorkActivitySid = null,
                                                                              string dequeueFrom = null,
                                                                              string dequeueRecord = null,
                                                                              int? dequeueTimeout = null,
                                                                              string dequeueTo = null,
                                                                              Uri dequeueStatusCallbackUrl = null,
                                                                              string callFrom = null,
                                                                              string callRecord = null,
                                                                              int? callTimeout = null,
                                                                              string callTo = null,
                                                                              Uri callUrl = null,
                                                                              Uri callStatusCallbackUrl = null,
                                                                              bool? callAccept = null,
                                                                              string redirectCallSid = null,
                                                                              bool? redirectAccept = null,
                                                                              Uri redirectUrl = null,
                                                                              string to = null,
                                                                              string from = null,
                                                                              Uri statusCallback = null,
                                                                              Twilio.Http.HttpMethod statusCallbackMethod = null,
                                                                              List<ReservationResource.CallStatusEnum> statusCallbackEvent = null,
                                                                              int? timeout = null,
                                                                              bool? record = null,
                                                                              bool? muted = null,
                                                                              string beep = null,
                                                                              bool? startConferenceOnEnter = null,
                                                                              bool? endConferenceOnExit = null,
                                                                              Uri waitUrl = null,
                                                                              Twilio.Http.HttpMethod waitMethod = null,
                                                                              bool? earlyMedia = null,
                                                                              int? maxParticipants = null,
                                                                              Uri conferenceStatusCallback = null,
                                                                              Twilio.Http.HttpMethod conferenceStatusCallbackMethod = null,
                                                                              List<ReservationResource.ConferenceEventEnum> conferenceStatusCallbackEvent = null,
                                                                              string conferenceRecord = null,
                                                                              string conferenceTrim = null,
                                                                              string recordingChannels = null,
                                                                              Uri recordingStatusCallback = null,
                                                                              Twilio.Http.HttpMethod recordingStatusCallbackMethod = null,
                                                                              Uri conferenceRecordingStatusCallback = null,
                                                                              Twilio.Http.HttpMethod conferenceRecordingStatusCallbackMethod = null,
                                                                              string region = null,
                                                                              string sipAuthUsername = null,
                                                                              string sipAuthPassword = null,
                                                                              List<string> dequeueStatusCallbackEvent = null,
                                                                              string postWorkActivitySid = null,
                                                                              ReservationResource.SupervisorModeEnum supervisorMode = null,
                                                                              string supervisor = null,
                                                                              bool? endConferenceOnCustomerExit = null,
                                                                              bool? beepOnCustomerEntrance = null,
                                                                              string jitterBufferSize = null,
                                                                              string ifMatch = null,
                                                                                ITwilioRestClient client = null, System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateReservationOptions(pathWorkspaceSid, pathTaskSid, pathSid){ ReservationStatus = reservationStatus, WorkerActivitySid = workerActivitySid, Instruction = instruction, DequeuePostWorkActivitySid = dequeuePostWorkActivitySid, DequeueFrom = dequeueFrom, DequeueRecord = dequeueRecord, DequeueTimeout = dequeueTimeout, DequeueTo = dequeueTo, DequeueStatusCallbackUrl = dequeueStatusCallbackUrl, CallFrom = callFrom, CallRecord = callRecord, CallTimeout = callTimeout, CallTo = callTo, CallUrl = callUrl, CallStatusCallbackUrl = callStatusCallbackUrl, CallAccept = callAccept, RedirectCallSid = redirectCallSid, RedirectAccept = redirectAccept, RedirectUrl = redirectUrl, To = to, From = from, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, StatusCallbackEvent = statusCallbackEvent, Timeout = timeout, Record = record, Muted = muted, Beep = beep, StartConferenceOnEnter = startConferenceOnEnter, EndConferenceOnExit = endConferenceOnExit, WaitUrl = waitUrl, WaitMethod = waitMethod, EarlyMedia = earlyMedia, MaxParticipants = maxParticipants, ConferenceStatusCallback = conferenceStatusCallback, ConferenceStatusCallbackMethod = conferenceStatusCallbackMethod, ConferenceStatusCallbackEvent = conferenceStatusCallbackEvent, ConferenceRecord = conferenceRecord, ConferenceTrim = conferenceTrim, RecordingChannels = recordingChannels, RecordingStatusCallback = recordingStatusCallback, RecordingStatusCallbackMethod = recordingStatusCallbackMethod, ConferenceRecordingStatusCallback = conferenceRecordingStatusCallback, ConferenceRecordingStatusCallbackMethod = conferenceRecordingStatusCallbackMethod, Region = region, SipAuthUsername = sipAuthUsername, SipAuthPassword = sipAuthPassword, DequeueStatusCallbackEvent = dequeueStatusCallbackEvent, PostWorkActivitySid = postWorkActivitySid, SupervisorMode = supervisorMode, Supervisor = supervisor, EndConferenceOnCustomerExit = endConferenceOnCustomerExit, BeepOnCustomerEntrance = beepOnCustomerEntrance, JitterBufferSize = jitterBufferSize, IfMatch = ifMatch };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ReservationResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ReservationResource object represented by the provided JSON </returns>
        public static ReservationResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ReservationResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskReservation resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        
        [JsonProperty("reservation_status")]
        public ReservationResource.StatusEnum ReservationStatus { get; private set; }

        ///<summary> The unique string that we created to identify the TaskReservation resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The SID of the reserved Task resource. </summary> 
        [JsonProperty("task_sid")]
        public string TaskSid { get; private set; }

        ///<summary> The `friendly_name` of the Worker that is reserved. </summary> 
        [JsonProperty("worker_name")]
        public string WorkerName { get; private set; }

        ///<summary> The SID of the reserved Worker resource. </summary> 
        [JsonProperty("worker_sid")]
        public string WorkerSid { get; private set; }

        ///<summary> The SID of the Workspace that this task is contained within. </summary> 
        [JsonProperty("workspace_sid")]
        public string WorkspaceSid { get; private set; }

        ///<summary> The absolute URL of the TaskReservation reservation. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> The URLs of related resources. </summary> 
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }



        private ReservationResource() {

        }
    }
}

