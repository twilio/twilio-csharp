/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Taskrouter.V1.Workspace.Worker
{
    /// <summary> fetch </summary>
    public class FetchWorkerChannelOptions : IOptions<WorkerChannelResource>
    {
    
        ///<summary> The SID of the Workspace with the WorkerChannel to fetch. </summary> 
        public string PathWorkspaceSid { get; }

        ///<summary> The SID of the Worker with the WorkerChannel to fetch. </summary> 
        public string PathWorkerSid { get; }

        ///<summary> The SID of the WorkerChannel to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchWorkerChannelOptions </summary>
        /// <param name="pathWorkspaceSid"> The SID of the Workspace with the WorkerChannel to fetch. </param>
        /// <param name="pathWorkerSid"> The SID of the Worker with the WorkerChannel to fetch. </param>
        /// <param name="pathSid"> The SID of the WorkerChannel to fetch. </param>
        public FetchWorkerChannelOptions(string pathWorkspaceSid, string pathWorkerSid, string pathSid)
        {
            PathWorkspaceSid = pathWorkspaceSid;
            PathWorkerSid = pathWorkerSid;
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> read </summary>
    public class ReadWorkerChannelOptions : ReadOptions<WorkerChannelResource>
    {
    
        ///<summary> The SID of the Workspace with the WorkerChannels to read. </summary> 
        public string PathWorkspaceSid { get; }

        ///<summary> The SID of the Worker with the WorkerChannels to read. </summary> 
        public string PathWorkerSid { get; }



        /// <summary> Construct a new ListWorkerChannelOptions </summary>
        /// <param name="pathWorkspaceSid"> The SID of the Workspace with the WorkerChannels to read. </param>
        /// <param name="pathWorkerSid"> The SID of the Worker with the WorkerChannels to read. </param>
        public ReadWorkerChannelOptions(string pathWorkspaceSid, string pathWorkerSid)
        {
            PathWorkspaceSid = pathWorkspaceSid;
            PathWorkerSid = pathWorkerSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> update </summary>
    public class UpdateWorkerChannelOptions : IOptions<WorkerChannelResource>
    {
    
        ///<summary> The SID of the Workspace with the WorkerChannel to update. </summary> 
        public string PathWorkspaceSid { get; }

        ///<summary> The SID of the Worker with the WorkerChannel to update. </summary> 
        public string PathWorkerSid { get; }

        ///<summary> The SID of the WorkerChannel to update. </summary> 
        public string PathSid { get; }

        ///<summary> The total number of Tasks that the Worker should handle for the TaskChannel type. TaskRouter creates reservations for Tasks of this TaskChannel type up to the specified capacity. If the capacity is 0, no new reservations will be created. </summary> 
        public int? Capacity { get; set; }

        ///<summary> Whether the WorkerChannel is available. Set to `false` to prevent the Worker from receiving any new Tasks of this TaskChannel type. </summary> 
        public bool? Available { get; set; }



        /// <summary> Construct a new UpdateWorkerChannelOptions </summary>
        /// <param name="pathWorkspaceSid"> The SID of the Workspace with the WorkerChannel to update. </param>
        /// <param name="pathWorkerSid"> The SID of the Worker with the WorkerChannel to update. </param>
        /// <param name="pathSid"> The SID of the WorkerChannel to update. </param>
        public UpdateWorkerChannelOptions(string pathWorkspaceSid, string pathWorkerSid, string pathSid)
        {
            PathWorkspaceSid = pathWorkspaceSid;
            PathWorkerSid = pathWorkerSid;
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Capacity != null)
            {
                p.Add(new KeyValuePair<string, string>("Capacity", Capacity.ToString()));
            }
            if (Available != null)
            {
                p.Add(new KeyValuePair<string, string>("Available", Available.Value.ToString().ToLower()));
            }
            return p;
        }

        

    }


}

