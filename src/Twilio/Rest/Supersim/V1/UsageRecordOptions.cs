/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Supersim.V1
{
    /// <summary> List UsageRecords </summary>
    public class ReadUsageRecordOptions : ReadOptions<UsageRecordResource>
    {
    
        ///<summary> SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM. </summary> 
        public string Sim { get; set; }

        ///<summary> SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred. </summary> 
        public string Fleet { get; set; }

        ///<summary> SID of a Network resource. Only show UsageRecords representing usage on this network. </summary> 
        public string Network { get; set; }

        ///<summary> Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country. </summary> 
        public string IsoCountry { get; set; }

        ///<summary> Dimension over which to aggregate usage records. Can be: `sim`, `fleet`, `network`, `isoCountry`. Default is to not aggregate across any of these dimensions, UsageRecords will be aggregated into the time buckets described by the `Granularity` parameter. </summary> 
        public UsageRecordResource.GroupEnum Group { get; set; }

        ///<summary> Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or `all`. Default is `all`. `all` returns one UsageRecord that describes the usage for the entire period. </summary> 
        public UsageRecordResource.GranularityEnum Granularity { get; set; }

        ///<summary> Only include usage that occurred at or after this time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is one month before the `end_time`. </summary> 
        public DateTime? StartTime { get; set; }

        ///<summary> Only include usage that occurred before this time (exclusive), specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is the current time. </summary> 
        public DateTime? EndTime { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Sim != null)
            {
                p.Add(new KeyValuePair<string, string>("Sim", Sim));
            }
            if (Fleet != null)
            {
                p.Add(new KeyValuePair<string, string>("Fleet", Fleet));
            }
            if (Network != null)
            {
                p.Add(new KeyValuePair<string, string>("Network", Network));
            }
            if (IsoCountry != null)
            {
                p.Add(new KeyValuePair<string, string>("IsoCountry", IsoCountry.ToString()));
            }
            if (Group != null)
            {
                p.Add(new KeyValuePair<string, string>("Group", Group.ToString()));
            }
            if (Granularity != null)
            {
                p.Add(new KeyValuePair<string, string>("Granularity", Granularity.ToString()));
            }
            if (StartTime != null)
            {
                p.Add(new KeyValuePair<string, string>("StartTime", Serializers.DateTimeIso8601(StartTime)));
            }
            if (EndTime != null)
            {
                p.Add(new KeyValuePair<string, string>("EndTime", Serializers.DateTimeIso8601(EndTime)));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

}

