/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Supersim.V1
{

    /// <summary> Create a Fleet </summary>
    public class CreateFleetOptions : IOptions<FleetResource>
    {
        
        ///<summary> The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet's SIMs can connect to. </summary> 
        public string NetworkAccessProfile { get; }

        ///<summary> An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource. </summary> 
        public string UniqueName { get; set; }

        ///<summary> Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to `true`. </summary> 
        public bool? DataEnabled { get; set; }

        ///<summary> The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). </summary> 
        public int? DataLimit { get; set; }

        ///<summary> The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. </summary> 
        public Uri IpCommandsUrl { get; set; }

        ///<summary> A string representing the HTTP method to use when making a request to `ip_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`. </summary> 
        public Twilio.Http.HttpMethod IpCommandsMethod { get; set; }

        ///<summary> Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to `true`. </summary> 
        public bool? SmsCommandsEnabled { get; set; }

        ///<summary> The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. </summary> 
        public Uri SmsCommandsUrl { get; set; }

        ///<summary> A string representing the HTTP method to use when making a request to `sms_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`. </summary> 
        public Twilio.Http.HttpMethod SmsCommandsMethod { get; set; }


        /// <summary> Construct a new CreateFleetOptions </summary>
        /// <param name="networkAccessProfile"> The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet's SIMs can connect to. </param>
        public CreateFleetOptions(string networkAccessProfile)
        {
            NetworkAccessProfile = networkAccessProfile;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (NetworkAccessProfile != null)
            {
                p.Add(new KeyValuePair<string, string>("NetworkAccessProfile", NetworkAccessProfile));
            }
            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }
            if (DataEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("DataEnabled", DataEnabled.Value.ToString().ToLower()));
            }
            if (DataLimit != null)
            {
                p.Add(new KeyValuePair<string, string>("DataLimit", DataLimit.ToString()));
            }
            if (IpCommandsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("IpCommandsUrl", Serializers.Url(IpCommandsUrl)));
            }
            if (IpCommandsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("IpCommandsMethod", IpCommandsMethod.ToString()));
            }
            if (SmsCommandsEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCommandsEnabled", SmsCommandsEnabled.Value.ToString().ToLower()));
            }
            if (SmsCommandsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCommandsUrl", Serializers.Url(SmsCommandsUrl)));
            }
            if (SmsCommandsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCommandsMethod", SmsCommandsMethod.ToString()));
            }
            return p;
        }

        

    }
    /// <summary> Fetch a Fleet instance from your account. </summary>
    public class FetchFleetOptions : IOptions<FleetResource>
    {
    
        ///<summary> The SID of the Fleet resource to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchFleetOptions </summary>
        /// <param name="pathSid"> The SID of the Fleet resource to fetch. </param>
        public FetchFleetOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a list of Fleets from your account. </summary>
    public class ReadFleetOptions : ReadOptions<FleetResource>
    {
    
        ///<summary> The SID or unique name of the Network Access Profile that controls which cellular networks the Fleet's SIMs can connect to. </summary> 
        public string NetworkAccessProfile { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (NetworkAccessProfile != null)
            {
                p.Add(new KeyValuePair<string, string>("NetworkAccessProfile", NetworkAccessProfile));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> Updates the given properties of a Super SIM Fleet instance from your account. </summary>
    public class UpdateFleetOptions : IOptions<FleetResource>
    {
    
        ///<summary> The SID of the Fleet resource to update. </summary> 
        public string PathSid { get; }

        ///<summary> An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource. </summary> 
        public string UniqueName { get; set; }

        ///<summary> The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet's SIMs can connect to. </summary> 
        public string NetworkAccessProfile { get; set; }

        ///<summary> The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. </summary> 
        public Uri IpCommandsUrl { get; set; }

        ///<summary> A string representing the HTTP method to use when making a request to `ip_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`. </summary> 
        public Twilio.Http.HttpMethod IpCommandsMethod { get; set; }

        ///<summary> The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. </summary> 
        public Uri SmsCommandsUrl { get; set; }

        ///<summary> A string representing the HTTP method to use when making a request to `sms_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`. </summary> 
        public Twilio.Http.HttpMethod SmsCommandsMethod { get; set; }

        ///<summary> The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). </summary> 
        public int? DataLimit { get; set; }



        /// <summary> Construct a new UpdateFleetOptions </summary>
        /// <param name="pathSid"> The SID of the Fleet resource to update. </param>
        public UpdateFleetOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }
            if (NetworkAccessProfile != null)
            {
                p.Add(new KeyValuePair<string, string>("NetworkAccessProfile", NetworkAccessProfile));
            }
            if (IpCommandsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("IpCommandsUrl", Serializers.Url(IpCommandsUrl)));
            }
            if (IpCommandsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("IpCommandsMethod", IpCommandsMethod.ToString()));
            }
            if (SmsCommandsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCommandsUrl", Serializers.Url(SmsCommandsUrl)));
            }
            if (SmsCommandsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCommandsMethod", SmsCommandsMethod.ToString()));
            }
            if (DataLimit != null)
            {
                p.Add(new KeyValuePair<string, string>("DataLimit", DataLimit.ToString()));
            }
            return p;
        }

        

    }


}

