/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Supersim.V1.NetworkAccessProfile
{
    public class NetworkAccessProfileNetworkResource : Resource
    {
    

    

        
        private static Request BuildCreateRequest(CreateNetworkAccessProfileNetworkOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks";

            string PathNetworkAccessProfileSid = options.PathNetworkAccessProfileSid;
            path = path.Replace("{"+"NetworkAccessProfileSid"+"}", PathNetworkAccessProfileSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Supersim,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Add a Network resource to the Network Access Profile resource. </summary>
        /// <param name="options"> Create NetworkAccessProfileNetwork parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NetworkAccessProfileNetwork </returns>
        public static NetworkAccessProfileNetworkResource Create(CreateNetworkAccessProfileNetworkOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Add a Network resource to the Network Access Profile resource. </summary>
        /// <param name="options"> Create NetworkAccessProfileNetwork parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NetworkAccessProfileNetwork </returns>
        public static async System.Threading.Tasks.Task<NetworkAccessProfileNetworkResource> CreateAsync(CreateNetworkAccessProfileNetworkOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Add a Network resource to the Network Access Profile resource. </summary>
        /// <param name="pathNetworkAccessProfileSid"> The unique string that identifies the Network Access Profile resource. </param>
        /// <param name="network"> The SID of the Network resource to be added to the Network Access Profile resource. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NetworkAccessProfileNetwork </returns>
        public static NetworkAccessProfileNetworkResource Create(
                                          string pathNetworkAccessProfileSid,
                                          string network,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateNetworkAccessProfileNetworkOptions(pathNetworkAccessProfileSid, network){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Add a Network resource to the Network Access Profile resource. </summary>
        /// <param name="pathNetworkAccessProfileSid"> The unique string that identifies the Network Access Profile resource. </param>
        /// <param name="network"> The SID of the Network resource to be added to the Network Access Profile resource. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NetworkAccessProfileNetwork </returns>
        public static async System.Threading.Tasks.Task<NetworkAccessProfileNetworkResource> CreateAsync(
                                                                                  string pathNetworkAccessProfileSid,
                                                                                  string network,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateNetworkAccessProfileNetworkOptions(pathNetworkAccessProfileSid, network){  };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        /// <summary> Remove a Network resource from the Network Access Profile resource's. </summary>
        /// <param name="options"> Delete NetworkAccessProfileNetwork parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NetworkAccessProfileNetwork </returns>
        private static Request BuildDeleteRequest(DeleteNetworkAccessProfileNetworkOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}";

            string PathNetworkAccessProfileSid = options.PathNetworkAccessProfileSid;
            path = path.Replace("{"+"NetworkAccessProfileSid"+"}", PathNetworkAccessProfileSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Supersim,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Remove a Network resource from the Network Access Profile resource's. </summary>
        /// <param name="options"> Delete NetworkAccessProfileNetwork parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NetworkAccessProfileNetwork </returns>
        public static bool Delete(DeleteNetworkAccessProfileNetworkOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> Remove a Network resource from the Network Access Profile resource's. </summary>
        /// <param name="options"> Delete NetworkAccessProfileNetwork parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NetworkAccessProfileNetwork </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteNetworkAccessProfileNetworkOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> Remove a Network resource from the Network Access Profile resource's. </summary>
        /// <param name="pathNetworkAccessProfileSid"> The unique string that identifies the Network Access Profile resource. </param>
        /// <param name="pathSid"> The SID of the Network resource to be removed from the Network Access Profile resource. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NetworkAccessProfileNetwork </returns>
        public static bool Delete(string pathNetworkAccessProfileSid, string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteNetworkAccessProfileNetworkOptions(pathNetworkAccessProfileSid, pathSid)        ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> Remove a Network resource from the Network Access Profile resource's. </summary>
        /// <param name="pathNetworkAccessProfileSid"> The unique string that identifies the Network Access Profile resource. </param>
        /// <param name="pathSid"> The SID of the Network resource to be removed from the Network Access Profile resource. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NetworkAccessProfileNetwork </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathNetworkAccessProfileSid, string pathSid, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteNetworkAccessProfileNetworkOptions(pathNetworkAccessProfileSid, pathSid) ;
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchNetworkAccessProfileNetworkOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}";

            string PathNetworkAccessProfileSid = options.PathNetworkAccessProfileSid;
            path = path.Replace("{"+"NetworkAccessProfileSid"+"}", PathNetworkAccessProfileSid);
            string PathSid = options.PathSid;
            path = path.Replace("{"+"Sid"+"}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Supersim,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch a Network Access Profile resource's Network resource. </summary>
        /// <param name="options"> Fetch NetworkAccessProfileNetwork parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NetworkAccessProfileNetwork </returns>
        public static NetworkAccessProfileNetworkResource Fetch(FetchNetworkAccessProfileNetworkOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Fetch a Network Access Profile resource's Network resource. </summary>
        /// <param name="options"> Fetch NetworkAccessProfileNetwork parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NetworkAccessProfileNetwork </returns>
        public static async System.Threading.Tasks.Task<NetworkAccessProfileNetworkResource> FetchAsync(FetchNetworkAccessProfileNetworkOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Fetch a Network Access Profile resource's Network resource. </summary>
        /// <param name="pathNetworkAccessProfileSid"> The unique string that identifies the Network Access Profile resource. </param>
        /// <param name="pathSid"> The SID of the Network resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NetworkAccessProfileNetwork </returns>
        public static NetworkAccessProfileNetworkResource Fetch(
                                         string pathNetworkAccessProfileSid, 
                                         string pathSid, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchNetworkAccessProfileNetworkOptions(pathNetworkAccessProfileSid, pathSid){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Fetch a Network Access Profile resource's Network resource. </summary>
        /// <param name="pathNetworkAccessProfileSid"> The unique string that identifies the Network Access Profile resource. </param>
        /// <param name="pathSid"> The SID of the Network resource to fetch. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NetworkAccessProfileNetwork </returns>
        public static async System.Threading.Tasks.Task<NetworkAccessProfileNetworkResource> FetchAsync(string pathNetworkAccessProfileSid, string pathSid, ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new FetchNetworkAccessProfileNetworkOptions(pathNetworkAccessProfileSid, pathSid){  };
            return await FetchAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildReadRequest(ReadNetworkAccessProfileNetworkOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks";

            string PathNetworkAccessProfileSid = options.PathNetworkAccessProfileSid;
            path = path.Replace("{"+"NetworkAccessProfileSid"+"}", PathNetworkAccessProfileSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Supersim,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> Retrieve a list of Network Access Profile resource's Network resource. </summary>
        /// <param name="options"> Read NetworkAccessProfileNetwork parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NetworkAccessProfileNetwork </returns>
        public static ResourceSet<NetworkAccessProfileNetworkResource> Read(ReadNetworkAccessProfileNetworkOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<NetworkAccessProfileNetworkResource>.FromJson("networks", response.Content);
            return new ResourceSet<NetworkAccessProfileNetworkResource>(page, options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of Network Access Profile resource's Network resource. </summary>
        /// <param name="options"> Read NetworkAccessProfileNetwork parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NetworkAccessProfileNetwork </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<NetworkAccessProfileNetworkResource>> ReadAsync(ReadNetworkAccessProfileNetworkOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client), cancellationToken);

            var page = Page<NetworkAccessProfileNetworkResource>.FromJson("networks", response.Content);
            return new ResourceSet<NetworkAccessProfileNetworkResource>(page, options, client);
        }
        #endif
        /// <summary> Retrieve a list of Network Access Profile resource's Network resource. </summary>
        /// <param name="pathNetworkAccessProfileSid"> The unique string that identifies the Network Access Profile resource. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of NetworkAccessProfileNetwork </returns>
        public static ResourceSet<NetworkAccessProfileNetworkResource> Read(
                                                     string pathNetworkAccessProfileSid,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                    ITwilioRestClient client = null)
        {
            var options = new ReadNetworkAccessProfileNetworkOptions(pathNetworkAccessProfileSid){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> Retrieve a list of Network Access Profile resource's Network resource. </summary>
        /// <param name="pathNetworkAccessProfileSid"> The unique string that identifies the Network Access Profile resource. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of NetworkAccessProfileNetwork </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<NetworkAccessProfileNetworkResource>> ReadAsync(
                                                                                             string pathNetworkAccessProfileSid,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                            ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new ReadNetworkAccessProfileNetworkOptions(pathNetworkAccessProfileSid){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client, cancellationToken);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<NetworkAccessProfileNetworkResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<NetworkAccessProfileNetworkResource>.FromJson("networks", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<NetworkAccessProfileNetworkResource> NextPage(Page<NetworkAccessProfileNetworkResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<NetworkAccessProfileNetworkResource>.FromJson("networks", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<NetworkAccessProfileNetworkResource> PreviousPage(Page<NetworkAccessProfileNetworkResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<NetworkAccessProfileNetworkResource>.FromJson("networks", response.Content);
        }

    
        /// <summary>
        /// Converts a JSON string into a NetworkAccessProfileNetworkResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> NetworkAccessProfileNetworkResource object represented by the provided JSON </returns>
        public static NetworkAccessProfileNetworkResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<NetworkAccessProfileNetworkResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The unique string that identifies the Network resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The unique string that identifies the Network resource's Network Access Profile resource. </summary> 
        [JsonProperty("network_access_profile_sid")]
        public string NetworkAccessProfileSid { get; private set; }

        ///<summary> A human readable identifier of the Network this resource refers to. </summary> 
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }

        ///<summary> The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Network resource. </summary> 
        [JsonProperty("iso_country")]
        public string IsoCountry { get; private set; }

        ///<summary> Array of objects identifying the [MCC-MNCs](https://en.wikipedia.org/wiki/Mobile_country_code) that are included in the Network resource. </summary> 
        [JsonProperty("identifiers")]
        public List<object> Identifiers { get; private set; }

        ///<summary> The absolute URL of the Network resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private NetworkAccessProfileNetworkResource() {

        }
    }
}

