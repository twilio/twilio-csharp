/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;
using System.Linq;



namespace Twilio.Rest.Preview.Wireless
{

    /// <summary> create </summary>
    public class CreateRatePlanOptions : IOptions<RatePlanResource>
    {
        
        
        public string UniqueName { get; set; }

        
        public string FriendlyName { get; set; }

        
        public bool? DataEnabled { get; set; }

        
        public int? DataLimit { get; set; }

        
        public string DataMetering { get; set; }

        
        public bool? MessagingEnabled { get; set; }

        
        public bool? VoiceEnabled { get; set; }

        
        public bool? CommandsEnabled { get; set; }

        
        public bool? NationalRoamingEnabled { get; set; }

        
        public List<string> InternationalRoaming { get; set; }



        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (DataEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("DataEnabled", DataEnabled.Value.ToString().ToLower()));
            }
            if (DataLimit != null)
            {
                p.Add(new KeyValuePair<string, string>("DataLimit", DataLimit.ToString()));
            }
            if (DataMetering != null)
            {
                p.Add(new KeyValuePair<string, string>("DataMetering", DataMetering));
            }
            if (MessagingEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("MessagingEnabled", MessagingEnabled.Value.ToString().ToLower()));
            }
            if (VoiceEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("VoiceEnabled", VoiceEnabled.Value.ToString().ToLower()));
            }
            if (CommandsEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("CommandsEnabled", CommandsEnabled.Value.ToString().ToLower()));
            }
            if (NationalRoamingEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("NationalRoamingEnabled", NationalRoamingEnabled.Value.ToString().ToLower()));
            }
            if (InternationalRoaming != null)
            {
                p.AddRange(InternationalRoaming.Select(InternationalRoaming => new KeyValuePair<string, string>("InternationalRoaming", InternationalRoaming)));
            }
            return p;
        }

        

    }
    /// <summary> delete </summary>
    public class DeleteRatePlanOptions : IOptions<RatePlanResource>
    {
        
        
        public string PathSid { get; }



        /// <summary> Construct a new DeleteWirelessRatePlanOptions </summary>
        /// <param name="pathSid">  </param>
        public DeleteRatePlanOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> fetch </summary>
    public class FetchRatePlanOptions : IOptions<RatePlanResource>
    {
    
        
        public string PathSid { get; }



        /// <summary> Construct a new FetchWirelessRatePlanOptions </summary>
        /// <param name="pathSid">  </param>
        public FetchRatePlanOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> read </summary>
    public class ReadRatePlanOptions : ReadOptions<RatePlanResource>
    {
    



        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> update </summary>
    public class UpdateRatePlanOptions : IOptions<RatePlanResource>
    {
    
        
        public string PathSid { get; }

        
        public string UniqueName { get; set; }

        
        public string FriendlyName { get; set; }



        /// <summary> Construct a new UpdateWirelessRatePlanOptions </summary>
        /// <param name="pathSid">  </param>
        public UpdateRatePlanOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            return p;
        }

        

    }


}

