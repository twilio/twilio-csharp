/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Marketplace.V1
{
    public class ModuleDataResource : Resource
    {
    

    

        
        private static Request BuildCreateRequest(CreateModuleDataOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Listings";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Marketplace,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> This endpoint creates a Listing based on the given data. </summary>
        /// <param name="options"> Create ModuleData parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ModuleData </returns>
        public static ModuleDataResource Create(CreateModuleDataOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> This endpoint creates a Listing based on the given data. </summary>
        /// <param name="options"> Create ModuleData parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ModuleData </returns>
        public static async System.Threading.Tasks.Task<ModuleDataResource> CreateAsync(CreateModuleDataOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> This endpoint creates a Listing based on the given data. </summary>
        /// <param name="moduleInfo"> A JSON object containing essential attributes that define a Listing. </param>
        /// <param name="configuration"> A JSON object for providing Listing-specific configuration. Contains button setup, notification URL, and more. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ModuleData </returns>
        public static ModuleDataResource Create(
                                          string moduleInfo = null,
                                          string configuration = null,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateModuleDataOptions(){  ModuleInfo = moduleInfo, Configuration = configuration };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> This endpoint creates a Listing based on the given data. </summary>
        /// <param name="moduleInfo"> A JSON object containing essential attributes that define a Listing. </param>
        /// <param name="configuration"> A JSON object for providing Listing-specific configuration. Contains button setup, notification URL, and more. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ModuleData </returns>
        public static async System.Threading.Tasks.Task<ModuleDataResource> CreateAsync(
                                                                                  string moduleInfo = null,
                                                                                  string configuration = null,
                                                                                    ITwilioRestClient client = null)
        {
        var options = new CreateModuleDataOptions(){  ModuleInfo = moduleInfo, Configuration = configuration };
            return await CreateAsync(options, client);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchModuleDataOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Listings";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Marketplace,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> This endpoint returns the Listings owned by the authenticated Account. </summary>
        /// <param name="options"> Fetch ModuleData parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ModuleData </returns>
        public static ModuleDataResource Fetch(FetchModuleDataOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> This endpoint returns the Listings owned by the authenticated Account. </summary>
        /// <param name="options"> Fetch ModuleData parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ModuleData </returns>
        public static async System.Threading.Tasks.Task<ModuleDataResource> FetchAsync(FetchModuleDataOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> This endpoint returns the Listings owned by the authenticated Account. </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ModuleData </returns>
        public static ModuleDataResource Fetch(
                                        ITwilioRestClient client = null)
        {
            var options = new FetchModuleDataOptions(){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> This endpoint returns the Listings owned by the authenticated Account. </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ModuleData </returns>
        public static async System.Threading.Tasks.Task<ModuleDataResource> FetchAsync(ITwilioRestClient client = null)
        {
            var options = new FetchModuleDataOptions(){  };
            return await FetchAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ModuleDataResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ModuleDataResource object represented by the provided JSON </returns>
        public static ModuleDataResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ModuleDataResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> URL to query the subresource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> ModuleSid that identifies this Listing. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> A JSON object describing the module and is displayed under the Description tab of the Module detail page. You can define the main body of the description, highlight key features or aspects of the module and if applicable, provide code samples for developers </summary> 
        [JsonProperty("description")]
        public object Description { get; private set; }

        ///<summary> A JSON object containing information on how customers can obtain support for the module. Use this parameter to provide details such as contact information and support description. </summary> 
        [JsonProperty("support")]
        public object Support { get; private set; }

        ///<summary> A JSON object describing the module's privacy and legal policies and is displayed under the Policies tab of the Module detail page. The maximum file size for Policies is 5MB </summary> 
        [JsonProperty("policies")]
        public object Policies { get; private set; }

        ///<summary> A JSON object containing essential attributes that define a module. This information is presented on the Module detail page in the Twilio Marketplace Catalog. You can pass the following attributes in the JSON object </summary> 
        [JsonProperty("module_info")]
        public object ModuleInfo { get; private set; }

        ///<summary> A JSON object for providing comprehensive information, instructions, and resources related to the module </summary> 
        [JsonProperty("documentation")]
        public object Documentation { get; private set; }

        ///<summary> A JSON object for providing listing specific configuration. Contains button setup, notification url, among others. </summary> 
        [JsonProperty("configuration")]
        public object Configuration { get; private set; }

        ///<summary> A JSON object for providing Listing specific pricing information. </summary> 
        [JsonProperty("pricing")]
        public object Pricing { get; private set; }

        ///<summary> The listings </summary> 
        [JsonProperty("listings")]
        public List<object> Listings { get; private set; }



        private ModuleDataResource() {

        }
    }
}

