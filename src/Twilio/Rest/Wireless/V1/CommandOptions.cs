/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Wireless.V1
{

    /// <summary> Send a Command to a Sim. </summary>
    public class CreateCommandOptions : IOptions<CommandResource>
    {
        
        ///<summary> The message body of the Command. Can be plain text in text mode or a Base64 encoded byte string in binary mode. </summary> 
        public string Command { get; }

        ///<summary> The `sid` or `unique_name` of the [SIM](https://www.twilio.com/docs/iot/wireless/api/sim-resource) to send the Command to. </summary> 
        public string Sim { get; set; }

        ///<summary> The HTTP method we use to call `callback_url`. Can be: `POST` or `GET`, and the default is `POST`. </summary> 
        public Twilio.Http.HttpMethod CallbackMethod { get; set; }

        ///<summary> The URL we call using the `callback_url` when the Command has finished sending, whether the command was delivered or it failed. </summary> 
        public Uri CallbackUrl { get; set; }

        
        public CommandResource.CommandModeEnum CommandMode { get; set; }

        ///<summary> Whether to include the SID of the command in the message body. Can be: `none`, `start`, or `end`, and the default behavior is `none`. When sending a Command to a SIM in text mode, we can automatically include the SID of the Command in the message body, which could be used to ensure that the device does not process the same Command more than once.  A value of `start` will prepend the message with the Command SID, and `end` will append it to the end, separating the Command SID from the message body with a space. The length of the Command SID is included in the 160 character limit so the SMS body must be 128 characters or less before the Command SID is included. </summary> 
        public string IncludeSid { get; set; }

        ///<summary> Whether to request delivery receipt from the recipient. For Commands that request delivery receipt, the Command state transitions to 'delivered' once the server has received a delivery receipt from the device. The default value is `true`. </summary> 
        public bool? DeliveryReceiptRequested { get; set; }


        /// <summary> Construct a new CreateCommandOptions </summary>
        /// <param name="command"> The message body of the Command. Can be plain text in text mode or a Base64 encoded byte string in binary mode. </param>
        public CreateCommandOptions(string command)
        {
            Command = command;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Command != null)
            {
                p.Add(new KeyValuePair<string, string>("Command", Command));
            }
            if (Sim != null)
            {
                p.Add(new KeyValuePair<string, string>("Sim", Sim));
            }
            if (CallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackMethod", CallbackMethod.ToString()));
            }
            if (CallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackUrl", Serializers.Url(CallbackUrl)));
            }
            if (CommandMode != null)
            {
                p.Add(new KeyValuePair<string, string>("CommandMode", CommandMode.ToString()));
            }
            if (IncludeSid != null)
            {
                p.Add(new KeyValuePair<string, string>("IncludeSid", IncludeSid));
            }
            if (DeliveryReceiptRequested != null)
            {
                p.Add(new KeyValuePair<string, string>("DeliveryReceiptRequested", DeliveryReceiptRequested.Value.ToString().ToLower()));
            }
            return p;
        }

        

    }
    /// <summary> Delete a Command instance from your account. </summary>
    public class DeleteCommandOptions : IOptions<CommandResource>
    {
        
        ///<summary> The SID of the Command resource to delete. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteCommandOptions </summary>
        /// <param name="pathSid"> The SID of the Command resource to delete. </param>
        public DeleteCommandOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Fetch a Command instance from your account. </summary>
    public class FetchCommandOptions : IOptions<CommandResource>
    {
    
        ///<summary> The SID of the Command resource to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchCommandOptions </summary>
        /// <param name="pathSid"> The SID of the Command resource to fetch. </param>
        public FetchCommandOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a list of Commands from your account. </summary>
    public class ReadCommandOptions : ReadOptions<CommandResource>
    {
    
        ///<summary> The `sid` or `unique_name` of the [Sim resources](https://www.twilio.com/docs/iot/wireless/api/sim-resource) to read. </summary> 
        public string Sim { get; set; }

        ///<summary> The status of the resources to read. Can be: `queued`, `sent`, `delivered`, `received`, or `failed`. </summary> 
        public CommandResource.StatusEnum Status { get; set; }

        ///<summary> Only return Commands with this direction value. </summary> 
        public CommandResource.DirectionEnum Direction { get; set; }

        ///<summary> Only return Commands with this transport value. Can be: `sms` or `ip`. </summary> 
        public CommandResource.TransportEnum Transport { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Sim != null)
            {
                p.Add(new KeyValuePair<string, string>("Sim", Sim));
            }
            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }
            if (Direction != null)
            {
                p.Add(new KeyValuePair<string, string>("Direction", Direction.ToString()));
            }
            if (Transport != null)
            {
                p.Add(new KeyValuePair<string, string>("Transport", Transport.ToString()));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

}

