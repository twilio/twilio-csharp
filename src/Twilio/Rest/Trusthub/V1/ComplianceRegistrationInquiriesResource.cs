/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.Trusthub.V1
{
    public class ComplianceRegistrationInquiriesResource : Resource
    {
    

    
        public sealed class PhoneNumberTypeEnum : StringEnum
        {
            private PhoneNumberTypeEnum(string value) : base(value) {}
            public PhoneNumberTypeEnum() {}
            public static implicit operator PhoneNumberTypeEnum(string value)
            {
                return new PhoneNumberTypeEnum(value);
            }
            public static readonly PhoneNumberTypeEnum Local = new PhoneNumberTypeEnum("local");
            public static readonly PhoneNumberTypeEnum National = new PhoneNumberTypeEnum("national");
            public static readonly PhoneNumberTypeEnum Mobile = new PhoneNumberTypeEnum("mobile");
            public static readonly PhoneNumberTypeEnum TollFree = new PhoneNumberTypeEnum("toll-free");

        }
        public sealed class BusinessRegistrationAuthorityEnum : StringEnum
        {
            private BusinessRegistrationAuthorityEnum(string value) : base(value) {}
            public BusinessRegistrationAuthorityEnum() {}
            public static implicit operator BusinessRegistrationAuthorityEnum(string value)
            {
                return new BusinessRegistrationAuthorityEnum(value);
            }
            public static readonly BusinessRegistrationAuthorityEnum UkCrn = new BusinessRegistrationAuthorityEnum("UK:CRN");
            public static readonly BusinessRegistrationAuthorityEnum UsEin = new BusinessRegistrationAuthorityEnum("US:EIN");
            public static readonly BusinessRegistrationAuthorityEnum CaCbn = new BusinessRegistrationAuthorityEnum("CA:CBN");
            public static readonly BusinessRegistrationAuthorityEnum AuAcn = new BusinessRegistrationAuthorityEnum("AU:ACN");
            public static readonly BusinessRegistrationAuthorityEnum Other = new BusinessRegistrationAuthorityEnum("Other");

        }
        public sealed class EndUserTypeEnum : StringEnum
        {
            private EndUserTypeEnum(string value) : base(value) {}
            public EndUserTypeEnum() {}
            public static implicit operator EndUserTypeEnum(string value)
            {
                return new EndUserTypeEnum(value);
            }
            public static readonly EndUserTypeEnum Individual = new EndUserTypeEnum("Individual");
            public static readonly EndUserTypeEnum Business = new EndUserTypeEnum("Business");

        }
        public sealed class BusinessIdentityTypeEnum : StringEnum
        {
            private BusinessIdentityTypeEnum(string value) : base(value) {}
            public BusinessIdentityTypeEnum() {}
            public static implicit operator BusinessIdentityTypeEnum(string value)
            {
                return new BusinessIdentityTypeEnum(value);
            }
            public static readonly BusinessIdentityTypeEnum DirectCustomer = new BusinessIdentityTypeEnum("direct_customer");
            public static readonly BusinessIdentityTypeEnum IsvResellerOrPartner = new BusinessIdentityTypeEnum("isv_reseller_or_partner");
            public static readonly BusinessIdentityTypeEnum Unknown = new BusinessIdentityTypeEnum("unknown");

        }

        
        private static Request BuildCreateRequest(CreateComplianceRegistrationInquiriesOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/ComplianceInquiries/Registration/RegulatoryCompliance/GB/Initialize";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Trusthub,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Create a new Compliance Registration Inquiry for the authenticated account. This is necessary to start a new embedded session. </summary>
        /// <param name="options"> Create ComplianceRegistrationInquiries parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ComplianceRegistrationInquiries </returns>
        public static ComplianceRegistrationInquiriesResource Create(CreateComplianceRegistrationInquiriesOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a new Compliance Registration Inquiry for the authenticated account. This is necessary to start a new embedded session. </summary>
        /// <param name="options"> Create ComplianceRegistrationInquiries parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ComplianceRegistrationInquiries </returns>
        public static async System.Threading.Tasks.Task<ComplianceRegistrationInquiriesResource> CreateAsync(CreateComplianceRegistrationInquiriesOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a new Compliance Registration Inquiry for the authenticated account. This is necessary to start a new embedded session. </summary>
        /// <param name="endUserType">  </param>
        /// <param name="phoneNumberType">  </param>
        /// <param name="businessIdentityType">  </param>
        /// <param name="businessRegistrationAuthority">  </param>
        /// <param name="businessLegalName"> he name of the business or organization using the Tollfree number. </param>
        /// <param name="notificationEmail"> he email address to receive the notification about the verification result. </param>
        /// <param name="acceptedNotificationReceipt"> The email address to receive the notification about the verification result. </param>
        /// <param name="businessRegistrationNumber"> Business registration number of the business </param>
        /// <param name="businessWebsiteUrl"> The URL of the business website </param>
        /// <param name="friendlyName"> Friendly name for your business information </param>
        /// <param name="authorizedRepresentative1FirstName"> First name of the authorized representative </param>
        /// <param name="authorizedRepresentative1LastName"> Last name of the authorized representative </param>
        /// <param name="authorizedRepresentative1Phone"> Phone number of the authorized representative </param>
        /// <param name="authorizedRepresentative1Email"> Email address of the authorized representative </param>
        /// <param name="authorizedRepresentative1DateOfBirth"> Birthdate of the authorized representative </param>
        /// <param name="addressStreet"> Street address of the business </param>
        /// <param name="addressStreetSecondary"> Street address of the business </param>
        /// <param name="addressCity"> City of the business </param>
        /// <param name="addressSubdivision"> State or province of the business </param>
        /// <param name="addressPostalCode"> Postal code of the business </param>
        /// <param name="addressCountryCode"> Country code of the business </param>
        /// <param name="emergencyAddressStreet"> Street address of the business </param>
        /// <param name="emergencyAddressStreetSecondary"> Street address of the business </param>
        /// <param name="emergencyAddressCity"> City of the business </param>
        /// <param name="emergencyAddressSubdivision"> State or province of the business </param>
        /// <param name="emergencyAddressPostalCode"> Postal code of the business </param>
        /// <param name="emergencyAddressCountryCode"> Country code of the business </param>
        /// <param name="useAddressAsEmergencyAddress"> Use the business address as the emergency address </param>
        /// <param name="fileName"> The name of the verification document to upload </param>
        /// <param name="file"> The verification document to upload </param>
        /// <param name="firstName"> The first name of the Individual User. </param>
        /// <param name="lastName"> The last name of the Individual User. </param>
        /// <param name="dateOfBirth"> The date of birth of the Individual User. </param>
        /// <param name="individualEmail"> The email address of the Individual User. </param>
        /// <param name="individualPhone"> The phone number of the Individual User. </param>
        /// <param name="isIsvEmbed"> Indicates if the inquiry is being started from an ISV embedded component. </param>
        /// <param name="isvRegisteringForSelfOrTenant"> Indicates if the isv registering for self or tenant. </param>
        /// <param name="statusCallbackUrl"> The url we call to inform you of bundle changes. </param>
        /// <param name="themeSetId"> Theme id for styling the inquiry form. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ComplianceRegistrationInquiries </returns>
        public static ComplianceRegistrationInquiriesResource Create(
                                          ComplianceRegistrationInquiriesResource.EndUserTypeEnum endUserType,
                                          ComplianceRegistrationInquiriesResource.PhoneNumberTypeEnum phoneNumberType,
                                          ComplianceRegistrationInquiriesResource.BusinessIdentityTypeEnum businessIdentityType = null,
                                          ComplianceRegistrationInquiriesResource.BusinessRegistrationAuthorityEnum businessRegistrationAuthority = null,
                                          string businessLegalName = null,
                                          string notificationEmail = null,
                                          bool? acceptedNotificationReceipt = null,
                                          string businessRegistrationNumber = null,
                                          string businessWebsiteUrl = null,
                                          string friendlyName = null,
                                          string authorizedRepresentative1FirstName = null,
                                          string authorizedRepresentative1LastName = null,
                                          string authorizedRepresentative1Phone = null,
                                          string authorizedRepresentative1Email = null,
                                          string authorizedRepresentative1DateOfBirth = null,
                                          string addressStreet = null,
                                          string addressStreetSecondary = null,
                                          string addressCity = null,
                                          string addressSubdivision = null,
                                          string addressPostalCode = null,
                                          string addressCountryCode = null,
                                          string emergencyAddressStreet = null,
                                          string emergencyAddressStreetSecondary = null,
                                          string emergencyAddressCity = null,
                                          string emergencyAddressSubdivision = null,
                                          string emergencyAddressPostalCode = null,
                                          string emergencyAddressCountryCode = null,
                                          bool? useAddressAsEmergencyAddress = null,
                                          string fileName = null,
                                          string file = null,
                                          string firstName = null,
                                          string lastName = null,
                                          string dateOfBirth = null,
                                          string individualEmail = null,
                                          string individualPhone = null,
                                          bool? isIsvEmbed = null,
                                          string isvRegisteringForSelfOrTenant = null,
                                          string statusCallbackUrl = null,
                                          string themeSetId = null,
                                            ITwilioRestClient client = null)
        {
            var options = new CreateComplianceRegistrationInquiriesOptions(endUserType, phoneNumberType){  BusinessIdentityType = businessIdentityType, BusinessRegistrationAuthority = businessRegistrationAuthority, BusinessLegalName = businessLegalName, NotificationEmail = notificationEmail, AcceptedNotificationReceipt = acceptedNotificationReceipt, BusinessRegistrationNumber = businessRegistrationNumber, BusinessWebsiteUrl = businessWebsiteUrl, FriendlyName = friendlyName, AuthorizedRepresentative1FirstName = authorizedRepresentative1FirstName, AuthorizedRepresentative1LastName = authorizedRepresentative1LastName, AuthorizedRepresentative1Phone = authorizedRepresentative1Phone, AuthorizedRepresentative1Email = authorizedRepresentative1Email, AuthorizedRepresentative1DateOfBirth = authorizedRepresentative1DateOfBirth, AddressStreet = addressStreet, AddressStreetSecondary = addressStreetSecondary, AddressCity = addressCity, AddressSubdivision = addressSubdivision, AddressPostalCode = addressPostalCode, AddressCountryCode = addressCountryCode, EmergencyAddressStreet = emergencyAddressStreet, EmergencyAddressStreetSecondary = emergencyAddressStreetSecondary, EmergencyAddressCity = emergencyAddressCity, EmergencyAddressSubdivision = emergencyAddressSubdivision, EmergencyAddressPostalCode = emergencyAddressPostalCode, EmergencyAddressCountryCode = emergencyAddressCountryCode, UseAddressAsEmergencyAddress = useAddressAsEmergencyAddress, FileName = fileName, File = file, FirstName = firstName, LastName = lastName, DateOfBirth = dateOfBirth, IndividualEmail = individualEmail, IndividualPhone = individualPhone, IsIsvEmbed = isIsvEmbed, IsvRegisteringForSelfOrTenant = isvRegisteringForSelfOrTenant, StatusCallbackUrl = statusCallbackUrl, ThemeSetId = themeSetId };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a new Compliance Registration Inquiry for the authenticated account. This is necessary to start a new embedded session. </summary>
        /// <param name="endUserType">  </param>
        /// <param name="phoneNumberType">  </param>
        /// <param name="businessIdentityType">  </param>
        /// <param name="businessRegistrationAuthority">  </param>
        /// <param name="businessLegalName"> he name of the business or organization using the Tollfree number. </param>
        /// <param name="notificationEmail"> he email address to receive the notification about the verification result. </param>
        /// <param name="acceptedNotificationReceipt"> The email address to receive the notification about the verification result. </param>
        /// <param name="businessRegistrationNumber"> Business registration number of the business </param>
        /// <param name="businessWebsiteUrl"> The URL of the business website </param>
        /// <param name="friendlyName"> Friendly name for your business information </param>
        /// <param name="authorizedRepresentative1FirstName"> First name of the authorized representative </param>
        /// <param name="authorizedRepresentative1LastName"> Last name of the authorized representative </param>
        /// <param name="authorizedRepresentative1Phone"> Phone number of the authorized representative </param>
        /// <param name="authorizedRepresentative1Email"> Email address of the authorized representative </param>
        /// <param name="authorizedRepresentative1DateOfBirth"> Birthdate of the authorized representative </param>
        /// <param name="addressStreet"> Street address of the business </param>
        /// <param name="addressStreetSecondary"> Street address of the business </param>
        /// <param name="addressCity"> City of the business </param>
        /// <param name="addressSubdivision"> State or province of the business </param>
        /// <param name="addressPostalCode"> Postal code of the business </param>
        /// <param name="addressCountryCode"> Country code of the business </param>
        /// <param name="emergencyAddressStreet"> Street address of the business </param>
        /// <param name="emergencyAddressStreetSecondary"> Street address of the business </param>
        /// <param name="emergencyAddressCity"> City of the business </param>
        /// <param name="emergencyAddressSubdivision"> State or province of the business </param>
        /// <param name="emergencyAddressPostalCode"> Postal code of the business </param>
        /// <param name="emergencyAddressCountryCode"> Country code of the business </param>
        /// <param name="useAddressAsEmergencyAddress"> Use the business address as the emergency address </param>
        /// <param name="fileName"> The name of the verification document to upload </param>
        /// <param name="file"> The verification document to upload </param>
        /// <param name="firstName"> The first name of the Individual User. </param>
        /// <param name="lastName"> The last name of the Individual User. </param>
        /// <param name="dateOfBirth"> The date of birth of the Individual User. </param>
        /// <param name="individualEmail"> The email address of the Individual User. </param>
        /// <param name="individualPhone"> The phone number of the Individual User. </param>
        /// <param name="isIsvEmbed"> Indicates if the inquiry is being started from an ISV embedded component. </param>
        /// <param name="isvRegisteringForSelfOrTenant"> Indicates if the isv registering for self or tenant. </param>
        /// <param name="statusCallbackUrl"> The url we call to inform you of bundle changes. </param>
        /// <param name="themeSetId"> Theme id for styling the inquiry form. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ComplianceRegistrationInquiries </returns>
        public static async System.Threading.Tasks.Task<ComplianceRegistrationInquiriesResource> CreateAsync(
                                                                                  ComplianceRegistrationInquiriesResource.EndUserTypeEnum endUserType,
                                                                                  ComplianceRegistrationInquiriesResource.PhoneNumberTypeEnum phoneNumberType,
                                                                                  ComplianceRegistrationInquiriesResource.BusinessIdentityTypeEnum businessIdentityType = null,
                                                                                  ComplianceRegistrationInquiriesResource.BusinessRegistrationAuthorityEnum businessRegistrationAuthority = null,
                                                                                  string businessLegalName = null,
                                                                                  string notificationEmail = null,
                                                                                  bool? acceptedNotificationReceipt = null,
                                                                                  string businessRegistrationNumber = null,
                                                                                  string businessWebsiteUrl = null,
                                                                                  string friendlyName = null,
                                                                                  string authorizedRepresentative1FirstName = null,
                                                                                  string authorizedRepresentative1LastName = null,
                                                                                  string authorizedRepresentative1Phone = null,
                                                                                  string authorizedRepresentative1Email = null,
                                                                                  string authorizedRepresentative1DateOfBirth = null,
                                                                                  string addressStreet = null,
                                                                                  string addressStreetSecondary = null,
                                                                                  string addressCity = null,
                                                                                  string addressSubdivision = null,
                                                                                  string addressPostalCode = null,
                                                                                  string addressCountryCode = null,
                                                                                  string emergencyAddressStreet = null,
                                                                                  string emergencyAddressStreetSecondary = null,
                                                                                  string emergencyAddressCity = null,
                                                                                  string emergencyAddressSubdivision = null,
                                                                                  string emergencyAddressPostalCode = null,
                                                                                  string emergencyAddressCountryCode = null,
                                                                                  bool? useAddressAsEmergencyAddress = null,
                                                                                  string fileName = null,
                                                                                  string file = null,
                                                                                  string firstName = null,
                                                                                  string lastName = null,
                                                                                  string dateOfBirth = null,
                                                                                  string individualEmail = null,
                                                                                  string individualPhone = null,
                                                                                  bool? isIsvEmbed = null,
                                                                                  string isvRegisteringForSelfOrTenant = null,
                                                                                  string statusCallbackUrl = null,
                                                                                  string themeSetId = null,
                                                                                    ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateComplianceRegistrationInquiriesOptions(endUserType, phoneNumberType){  BusinessIdentityType = businessIdentityType, BusinessRegistrationAuthority = businessRegistrationAuthority, BusinessLegalName = businessLegalName, NotificationEmail = notificationEmail, AcceptedNotificationReceipt = acceptedNotificationReceipt, BusinessRegistrationNumber = businessRegistrationNumber, BusinessWebsiteUrl = businessWebsiteUrl, FriendlyName = friendlyName, AuthorizedRepresentative1FirstName = authorizedRepresentative1FirstName, AuthorizedRepresentative1LastName = authorizedRepresentative1LastName, AuthorizedRepresentative1Phone = authorizedRepresentative1Phone, AuthorizedRepresentative1Email = authorizedRepresentative1Email, AuthorizedRepresentative1DateOfBirth = authorizedRepresentative1DateOfBirth, AddressStreet = addressStreet, AddressStreetSecondary = addressStreetSecondary, AddressCity = addressCity, AddressSubdivision = addressSubdivision, AddressPostalCode = addressPostalCode, AddressCountryCode = addressCountryCode, EmergencyAddressStreet = emergencyAddressStreet, EmergencyAddressStreetSecondary = emergencyAddressStreetSecondary, EmergencyAddressCity = emergencyAddressCity, EmergencyAddressSubdivision = emergencyAddressSubdivision, EmergencyAddressPostalCode = emergencyAddressPostalCode, EmergencyAddressCountryCode = emergencyAddressCountryCode, UseAddressAsEmergencyAddress = useAddressAsEmergencyAddress, FileName = fileName, File = file, FirstName = firstName, LastName = lastName, DateOfBirth = dateOfBirth, IndividualEmail = individualEmail, IndividualPhone = individualPhone, IsIsvEmbed = isIsvEmbed, IsvRegisteringForSelfOrTenant = isvRegisteringForSelfOrTenant, StatusCallbackUrl = statusCallbackUrl, ThemeSetId = themeSetId };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        private static Request BuildUpdateRequest(UpdateComplianceRegistrationInquiriesOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/ComplianceInquiries/Registration/{RegistrationId}/RegulatoryCompliance/GB/Initialize";

            string PathRegistrationId = options.PathRegistrationId;
            path = path.Replace("{"+"RegistrationId"+"}", PathRegistrationId);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Trusthub,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Resume a specific Regulatory Compliance Inquiry that has expired, or re-open a rejected Compliance Inquiry for editing. </summary>
        /// <param name="options"> Update ComplianceRegistrationInquiries parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ComplianceRegistrationInquiries </returns>
        public static ComplianceRegistrationInquiriesResource Update(UpdateComplianceRegistrationInquiriesOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Resume a specific Regulatory Compliance Inquiry that has expired, or re-open a rejected Compliance Inquiry for editing. </summary>
        /// <param name="options"> Update ComplianceRegistrationInquiries parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ComplianceRegistrationInquiries </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<ComplianceRegistrationInquiriesResource> UpdateAsync(UpdateComplianceRegistrationInquiriesOptions options, 
                                                                                                    ITwilioRestClient client = null,
                                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Resume a specific Regulatory Compliance Inquiry that has expired, or re-open a rejected Compliance Inquiry for editing. </summary>
        /// <param name="pathRegistrationId"> The unique RegistrationId matching the Regulatory Compliance Inquiry that should be resumed or resubmitted. This value will have been returned by the initial Regulatory Compliance Inquiry creation call. </param>
        /// <param name="isIsvEmbed"> Indicates if the inquiry is being started from an ISV embedded component. </param>
        /// <param name="themeSetId"> Theme id for styling the inquiry form. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of ComplianceRegistrationInquiries </returns>
        public static ComplianceRegistrationInquiriesResource Update(
                                          string pathRegistrationId,
                                          bool? isIsvEmbed = null,
                                          string themeSetId = null,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateComplianceRegistrationInquiriesOptions(pathRegistrationId){ IsIsvEmbed = isIsvEmbed, ThemeSetId = themeSetId };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> Resume a specific Regulatory Compliance Inquiry that has expired, or re-open a rejected Compliance Inquiry for editing. </summary>
        /// <param name="pathRegistrationId"> The unique RegistrationId matching the Regulatory Compliance Inquiry that should be resumed or resubmitted. This value will have been returned by the initial Regulatory Compliance Inquiry creation call. </param>
        /// <param name="isIsvEmbed"> Indicates if the inquiry is being started from an ISV embedded component. </param>
        /// <param name="themeSetId"> Theme id for styling the inquiry form. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of ComplianceRegistrationInquiries </returns>
        public static async System.Threading.Tasks.Task<ComplianceRegistrationInquiriesResource> UpdateAsync(
                                                                              string pathRegistrationId,
                                                                              bool? isIsvEmbed = null,
                                                                              string themeSetId = null,
                                                                                ITwilioRestClient client = null , System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new UpdateComplianceRegistrationInquiriesOptions(pathRegistrationId){ IsIsvEmbed = isIsvEmbed, ThemeSetId = themeSetId };
            return await UpdateAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ComplianceRegistrationInquiriesResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ComplianceRegistrationInquiriesResource object represented by the provided JSON </returns>
        public static ComplianceRegistrationInquiriesResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ComplianceRegistrationInquiriesResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The unique ID used to start an embedded compliance registration session. </summary> 
        [JsonProperty("inquiry_id")]
        public string InquiryId { get; private set; }

        ///<summary> The session token used to start an embedded compliance registration session. </summary> 
        [JsonProperty("inquiry_session_token")]
        public string InquirySessionToken { get; private set; }

        ///<summary> The RegistrationId matching the Registration Profile that should be resumed or resubmitted for editing. </summary> 
        [JsonProperty("registration_id")]
        public string RegistrationId { get; private set; }

        ///<summary> The URL of this resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private ComplianceRegistrationInquiriesResource() {

        }
    }
}

