/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Trusthub.V1
{

    /// <summary> Create a new Trust Product. </summary>
    public class CreateTrustProductsOptions : IOptions<TrustProductsResource>
    {
        
        ///<summary> The string that you assigned to describe the resource. </summary> 
        public string FriendlyName { get; }

        ///<summary> The email address that will receive updates when the Trust Product resource changes status. </summary> 
        public string Email { get; }

        ///<summary> The unique string of a policy that is associated to the Trust Product resource. </summary> 
        public string PolicySid { get; }

        ///<summary> The URL we call to inform your application of status changes. </summary> 
        public Uri StatusCallback { get; set; }


        /// <summary> Construct a new CreateTrustProductOptions </summary>
        /// <param name="friendlyName"> The string that you assigned to describe the resource. </param>
        /// <param name="email"> The email address that will receive updates when the Trust Product resource changes status. </param>
        /// <param name="policySid"> The unique string of a policy that is associated to the Trust Product resource. </param>
        public CreateTrustProductsOptions(string friendlyName, string email, string policySid)
        {
            FriendlyName = friendlyName;
            Email = email;
            PolicySid = policySid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (Email != null)
            {
                p.Add(new KeyValuePair<string, string>("Email", Email));
            }
            if (PolicySid != null)
            {
                p.Add(new KeyValuePair<string, string>("PolicySid", PolicySid));
            }
            if (StatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
            }
            return p;
        }

        

    }
    /// <summary> Delete a specific Trust Product. </summary>
    public class DeleteTrustProductsOptions : IOptions<TrustProductsResource>
    {
        
        ///<summary> The unique string that we created to identify the Trust Product resource. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteTrustProductOptions </summary>
        /// <param name="pathSid"> The unique string that we created to identify the Trust Product resource. </param>
        public DeleteTrustProductsOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Fetch a specific Trust Product instance. </summary>
    public class FetchTrustProductsOptions : IOptions<TrustProductsResource>
    {
    
        ///<summary> The unique string that we created to identify the Trust Product resource. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchTrustProductOptions </summary>
        /// <param name="pathSid"> The unique string that we created to identify the Trust Product resource. </param>
        public FetchTrustProductsOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a list of all Trust Products for an account. </summary>
    public class ReadTrustProductsOptions : ReadOptions<TrustProductsResource>
    {
    
        ///<summary> The verification status of the Trust Product resource. </summary> 
        public TrustProductsResource.StatusEnum Status { get; set; }

        ///<summary> The string that you assigned to describe the resource. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> The unique string of a policy that is associated to the Trust Product resource. </summary> 
        public string PolicySid { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (PolicySid != null)
            {
                p.Add(new KeyValuePair<string, string>("PolicySid", PolicySid));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> Updates a Trust Product in an account. </summary>
    public class UpdateTrustProductsOptions : IOptions<TrustProductsResource>
    {
    
        ///<summary> The unique string that we created to identify the Trust Product resource. </summary> 
        public string PathSid { get; }

        
        public TrustProductsResource.StatusEnum Status { get; set; }

        ///<summary> The URL we call to inform your application of status changes. </summary> 
        public Uri StatusCallback { get; set; }

        ///<summary> The string that you assigned to describe the resource. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> The email address that will receive updates when the Trust Product resource changes status. </summary> 
        public string Email { get; set; }



        /// <summary> Construct a new UpdateTrustProductOptions </summary>
        /// <param name="pathSid"> The unique string that we created to identify the Trust Product resource. </param>
        public UpdateTrustProductsOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }
            if (StatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
            }
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (Email != null)
            {
                p.Add(new KeyValuePair<string, string>("Email", Email));
            }
            return p;
        }

        

    }


}

