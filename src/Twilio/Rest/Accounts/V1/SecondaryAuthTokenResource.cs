/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Accounts.V1
{
    public class SecondaryAuthTokenResource : Resource
    {
    

    

        
        private static Request BuildCreateRequest(CreateSecondaryAuthTokenOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/AuthTokens/Secondary";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Accounts,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Create a new secondary Auth Token </summary>
        /// <param name="options"> Create SecondaryAuthToken parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SecondaryAuthToken </returns>
        public static SecondaryAuthTokenResource Create(CreateSecondaryAuthTokenOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Create a new secondary Auth Token </summary>
        /// <param name="options"> Create SecondaryAuthToken parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SecondaryAuthToken </returns>
        public static async System.Threading.Tasks.Task<SecondaryAuthTokenResource> CreateAsync(CreateSecondaryAuthTokenOptions options, ITwilioRestClient client = null,  System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client), cancellationToken);
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Create a new secondary Auth Token </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SecondaryAuthToken </returns>
        public static SecondaryAuthTokenResource Create(
                                            ITwilioRestClient client = null)
        {
            var options = new CreateSecondaryAuthTokenOptions(){  };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Create a new secondary Auth Token </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SecondaryAuthToken </returns>
        public static async System.Threading.Tasks.Task<SecondaryAuthTokenResource> CreateAsync(
                                                                                    ITwilioRestClient client = null,
                                                                                    System.Threading.CancellationToken cancellationToken = default)
        {
        var options = new CreateSecondaryAuthTokenOptions(){  };
            return await CreateAsync(options, client, cancellationToken);
        }
        #endif
        
        /// <summary> Delete the secondary Auth Token from your account </summary>
        /// <param name="options"> Delete SecondaryAuthToken parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SecondaryAuthToken </returns>
        private static Request BuildDeleteRequest(DeleteSecondaryAuthTokenOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/AuthTokens/Secondary";


            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Accounts,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Delete the secondary Auth Token from your account </summary>
        /// <param name="options"> Delete SecondaryAuthToken parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SecondaryAuthToken </returns>
        public static bool Delete(DeleteSecondaryAuthTokenOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> Delete the secondary Auth Token from your account </summary>
        /// <param name="options"> Delete SecondaryAuthToken parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SecondaryAuthToken </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteSecondaryAuthTokenOptions options, 
                                                                        ITwilioRestClient client = null,
                                                                        System.Threading.CancellationToken cancellationToken = default)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client), cancellationToken);
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> Delete the secondary Auth Token from your account </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SecondaryAuthToken </returns>
        public static bool Delete(ITwilioRestClient client = null)
        {
            var options = new DeleteSecondaryAuthTokenOptions()  ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> Delete the secondary Auth Token from your account </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SecondaryAuthToken </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(ITwilioRestClient client = null, System.Threading.CancellationToken cancellationToken = default)
        {
            var options = new DeleteSecondaryAuthTokenOptions() ;
            return await DeleteAsync(options, client, cancellationToken);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a SecondaryAuthTokenResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> SecondaryAuthTokenResource object represented by the provided JSON </returns>
        public static SecondaryAuthTokenResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<SecondaryAuthTokenResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that the secondary Auth Token was created for. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The date and time in UTC when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in UTC when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The generated secondary Auth Token that can be used to authenticate future API requests. </summary> 
        [JsonProperty("secondary_auth_token")]
        public string SecondaryAuthToken { get; private set; }

        ///<summary> The URI for this resource, relative to `https://accounts.twilio.com` </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private SecondaryAuthTokenResource() {

        }
    }
}

