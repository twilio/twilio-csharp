/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Twilio.Rest.Accounts.V1
{
    public class MessagingGeopermissionsResource : Resource
    {
    

    

        
        private static Request BuildFetchRequest(FetchMessagingGeopermissionsOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Messaging/GeoPermissions";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Accounts,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> fetch </summary>
        /// <param name="options"> Fetch MessagingGeopermissions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of MessagingGeopermissions </returns>
        public static MessagingGeopermissionsResource Fetch(FetchMessagingGeopermissionsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="options"> Fetch MessagingGeopermissions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of MessagingGeopermissions </returns>
        public static async System.Threading.Tasks.Task<MessagingGeopermissionsResource> FetchAsync(FetchMessagingGeopermissionsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> fetch </summary>
        /// <param name="countryCode"> The country code to filter the geo permissions. If provided, only the geo permission for the specified country will be returned. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of MessagingGeopermissions </returns>
        public static MessagingGeopermissionsResource Fetch(
                                         string countryCode = null, 
                                        ITwilioRestClient client = null)
        {
            var options = new FetchMessagingGeopermissionsOptions(){ CountryCode = countryCode };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> fetch </summary>
        /// <param name="countryCode"> The country code to filter the geo permissions. If provided, only the geo permission for the specified country will be returned. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of MessagingGeopermissions </returns>
        public static async System.Threading.Tasks.Task<MessagingGeopermissionsResource> FetchAsync(string countryCode = null, ITwilioRestClient client = null)
        {
            var options = new FetchMessagingGeopermissionsOptions(){ CountryCode = countryCode };
            return await FetchAsync(options, client);
        }
        #endif
        
        private static Request BuildUpdateRequest(UpdateMessagingGeopermissionsOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Messaging/GeoPermissions";


            return new Request(
                HttpMethod.Patch,
                Rest.Domain.Accounts,
                path,
                contentType: EnumConstants.ContentTypeEnum.FORM_URLENCODED,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> update </summary>
        /// <param name="options"> Update MessagingGeopermissions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of MessagingGeopermissions </returns>
        public static MessagingGeopermissionsResource Update(UpdateMessagingGeopermissionsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> update </summary>
        /// <param name="options"> Update MessagingGeopermissions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of MessagingGeopermissions </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<MessagingGeopermissionsResource> UpdateAsync(UpdateMessagingGeopermissionsOptions options,
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> update </summary>
        /// <param name="permissions"> A list of objects where each object represents the Geo Permission to be updated. Each object contains the following fields: `country_code`, unique code for each country of Geo Permission; `type`, permission type of the Geo Permission i.e. country; `enabled`, configure true for enabling the Geo Permission, false for disabling the Geo Permission. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of MessagingGeopermissions </returns>
        public static MessagingGeopermissionsResource Update(
                                          List<object> permissions,
                                            ITwilioRestClient client = null)
        {
            var options = new UpdateMessagingGeopermissionsOptions(permissions){  };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> update </summary>
        /// <param name="permissions"> A list of objects where each object represents the Geo Permission to be updated. Each object contains the following fields: `country_code`, unique code for each country of Geo Permission; `type`, permission type of the Geo Permission i.e. country; `enabled`, configure true for enabling the Geo Permission, false for disabling the Geo Permission. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of MessagingGeopermissions </returns>
        public static async System.Threading.Tasks.Task<MessagingGeopermissionsResource> UpdateAsync(
                                                                              List<object> permissions,
                                                                                ITwilioRestClient client = null)
        {
            var options = new UpdateMessagingGeopermissionsOptions(permissions){  };
            return await UpdateAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a MessagingGeopermissionsResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> MessagingGeopermissionsResource object represented by the provided JSON </returns>
        public static MessagingGeopermissionsResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<MessagingGeopermissionsResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> A list of objects where each object represents the result of processing a messaging Geo Permission. Each object contains the following fields: `country_code`, the country code of the country for which the permission was updated; `type`, the type of the permission i.e. country; `enabled`, true if the permission is enabled else false; `error_code`, an integer where 0 indicates success and any non-zero value represents an error; and `error_messages`, an array of strings describing specific validation errors encountered. If the request is successful, the error_messages array will be empty. </summary> 
        [JsonProperty("permissions")]
        public object Permissions { get; private set; }



        private MessagingGeopermissionsResource() {

        }
    }
}

