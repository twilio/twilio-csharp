/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;
using System.Linq;



namespace Twilio.Rest.Events.V1
{

    /// <summary> Create a new Subscription. </summary>
    public class CreateSubscriptionOptions : IOptions<SubscriptionResource>
    {
        
        ///<summary> A human readable description for the Subscription **This value should not contain PII.** </summary> 
        public string Description { get; }

        ///<summary> The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created. </summary> 
        public string SinkSid { get; }

        ///<summary> An array of objects containing the subscribed Event Types </summary> 
        public List<object> Types { get; }


        /// <summary> Construct a new CreateSubscriptionOptions </summary>
        /// <param name="description"> A human readable description for the Subscription **This value should not contain PII.** </param>
        /// <param name="sinkSid"> The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created. </param>
        /// <param name="types"> An array of objects containing the subscribed Event Types </param>
        public CreateSubscriptionOptions(string description, string sinkSid, List<object> types)
        {
            Description = description;
            SinkSid = sinkSid;
            Types = types;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Description != null)
            {
                p.Add(new KeyValuePair<string, string>("Description", Description));
            }
            if (SinkSid != null)
            {
                p.Add(new KeyValuePair<string, string>("SinkSid", SinkSid));
            }
            if (Types != null)
            {
                p.AddRange(Types.Select(Types => new KeyValuePair<string, string>("Types", Serializers.JsonObject(Types))));
            }
            return p;
        }

        

    }
    /// <summary> Delete a specific Subscription. </summary>
    public class DeleteSubscriptionOptions : IOptions<SubscriptionResource>
    {
        
        ///<summary> A 34 character string that uniquely identifies this Subscription. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteSubscriptionOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Subscription. </param>
        public DeleteSubscriptionOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Fetch a specific Subscription. </summary>
    public class FetchSubscriptionOptions : IOptions<SubscriptionResource>
    {
    
        ///<summary> A 34 character string that uniquely identifies this Subscription. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchSubscriptionOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Subscription. </param>
        public FetchSubscriptionOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a paginated list of Subscriptions belonging to the account used to make the request. </summary>
    public class ReadSubscriptionOptions : ReadOptions<SubscriptionResource>
    {
    
        ///<summary> The SID of the sink that the list of Subscriptions should be filtered by. </summary> 
        public string SinkSid { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (SinkSid != null)
            {
                p.Add(new KeyValuePair<string, string>("SinkSid", SinkSid));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> Update a Subscription. </summary>
    public class UpdateSubscriptionOptions : IOptions<SubscriptionResource>
    {
    
        ///<summary> A 34 character string that uniquely identifies this Subscription. </summary> 
        public string PathSid { get; }

        ///<summary> A human readable description for the Subscription. </summary> 
        public string Description { get; set; }

        ///<summary> The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created. </summary> 
        public string SinkSid { get; set; }



        /// <summary> Construct a new UpdateSubscriptionOptions </summary>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this Subscription. </param>
        public UpdateSubscriptionOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Description != null)
            {
                p.Add(new KeyValuePair<string, string>("Description", Description));
            }
            if (SinkSid != null)
            {
                p.Add(new KeyValuePair<string, string>("SinkSid", SinkSid));
            }
            return p;
        }

        

    }


}

