/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Events.V1.Schema
{
    /// <summary> Fetch a specific schema and version. </summary>
    public class FetchSchemaVersionOptions : IOptions<SchemaVersionResource>
    {
    
        ///<summary> The unique identifier of the schema. Each schema can have multiple versions, that share the same id. </summary> 
        public string PathId { get; }

        ///<summary> The version of the schema </summary> 
        public int? PathSchemaVersion { get; }



        /// <summary> Construct a new FetchSchemaVersionOptions </summary>
        /// <param name="pathId"> The unique identifier of the schema. Each schema can have multiple versions, that share the same id. </param>
        /// <param name="pathSchemaVersion"> The version of the schema </param>
        public FetchSchemaVersionOptions(string pathId, int? pathSchemaVersion)
        {
            PathId = pathId;
            PathSchemaVersion = pathSchemaVersion;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> Retrieve a paginated list of versions of the schema. </summary>
    public class ReadSchemaVersionOptions : ReadOptions<SchemaVersionResource>
    {
    
        ///<summary> The unique identifier of the schema. Each schema can have multiple versions, that share the same id. </summary> 
        public string PathId { get; }



        /// <summary> Construct a new ListSchemaVersionOptions </summary>
        /// <param name="pathId"> The unique identifier of the schema. Each schema can have multiple versions, that share the same id. </param>
        public ReadSchemaVersionOptions(string pathId)
        {
            PathId = pathId;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

}

