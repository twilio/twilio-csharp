/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.Notify.V1
{

    /// <summary> create </summary>
    public class CreateServiceOptions : IOptions<ServiceResource>
    {
        
        ///<summary> A descriptive string that you create to describe the resource. It can be up to 64 characters long. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings. </summary> 
        public string ApnCredentialSid { get; set; }

        ///<summary> The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings. </summary> 
        public string GcmCredentialSid { get; set; }

        ///<summary> The SID of the [Messaging Service](https://www.twilio.com/docs/sms/quickstart#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications. </summary> 
        public string MessagingServiceSid { get; set; }

        ///<summary> Deprecated. </summary> 
        public string FacebookMessengerPageId { get; set; }

        ///<summary> The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. </summary> 
        public string DefaultApnNotificationProtocolVersion { get; set; }

        ///<summary> The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. </summary> 
        public string DefaultGcmNotificationProtocolVersion { get; set; }

        ///<summary> The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings. </summary> 
        public string FcmCredentialSid { get; set; }

        ///<summary> The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. </summary> 
        public string DefaultFcmNotificationProtocolVersion { get; set; }

        ///<summary> Whether to log notifications. Can be: `true` or `false` and the default is `true`. </summary> 
        public bool? LogEnabled { get; set; }

        ///<summary> Deprecated. </summary> 
        public string AlexaSkillId { get; set; }

        ///<summary> Deprecated. </summary> 
        public string DefaultAlexaNotificationProtocolVersion { get; set; }

        ///<summary> URL to send delivery status callback. </summary> 
        public string DeliveryCallbackUrl { get; set; }

        ///<summary> Callback configuration that enables delivery callbacks, default false </summary> 
        public bool? DeliveryCallbackEnabled { get; set; }



        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (ApnCredentialSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ApnCredentialSid", ApnCredentialSid));
            }
            if (GcmCredentialSid != null)
            {
                p.Add(new KeyValuePair<string, string>("GcmCredentialSid", GcmCredentialSid));
            }
            if (MessagingServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("MessagingServiceSid", MessagingServiceSid));
            }
            if (FacebookMessengerPageId != null)
            {
                p.Add(new KeyValuePair<string, string>("FacebookMessengerPageId", FacebookMessengerPageId));
            }
            if (DefaultApnNotificationProtocolVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultApnNotificationProtocolVersion", DefaultApnNotificationProtocolVersion));
            }
            if (DefaultGcmNotificationProtocolVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultGcmNotificationProtocolVersion", DefaultGcmNotificationProtocolVersion));
            }
            if (FcmCredentialSid != null)
            {
                p.Add(new KeyValuePair<string, string>("FcmCredentialSid", FcmCredentialSid));
            }
            if (DefaultFcmNotificationProtocolVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultFcmNotificationProtocolVersion", DefaultFcmNotificationProtocolVersion));
            }
            if (LogEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("LogEnabled", LogEnabled.Value.ToString().ToLower()));
            }
            if (AlexaSkillId != null)
            {
                p.Add(new KeyValuePair<string, string>("AlexaSkillId", AlexaSkillId));
            }
            if (DefaultAlexaNotificationProtocolVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultAlexaNotificationProtocolVersion", DefaultAlexaNotificationProtocolVersion));
            }
            if (DeliveryCallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("DeliveryCallbackUrl", DeliveryCallbackUrl));
            }
            if (DeliveryCallbackEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("DeliveryCallbackEnabled", DeliveryCallbackEnabled.Value.ToString().ToLower()));
            }
            return p;
        }

        

    }
    /// <summary> delete </summary>
    public class DeleteServiceOptions : IOptions<ServiceResource>
    {
        
        ///<summary> The Twilio-provided string that uniquely identifies the Service resource to delete. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteServiceOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Service resource to delete. </param>
        public DeleteServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> fetch </summary>
    public class FetchServiceOptions : IOptions<ServiceResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the Service resource to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchServiceOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Service resource to fetch. </param>
        public FetchServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }

    

    }


    /// <summary> read </summary>
    public class ReadServiceOptions : ReadOptions<ServiceResource>
    {
    
        ///<summary> The string that identifies the Service resources to read. </summary> 
        public string FriendlyName { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }

    

    }

    /// <summary> update </summary>
    public class UpdateServiceOptions : IOptions<ServiceResource>
    {
    
        ///<summary> The Twilio-provided string that uniquely identifies the Service resource to update. </summary> 
        public string PathSid { get; }

        ///<summary> A descriptive string that you create to describe the resource. It can be up to 64 characters long. </summary> 
        public string FriendlyName { get; set; }

        ///<summary> The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings. </summary> 
        public string ApnCredentialSid { get; set; }

        ///<summary> The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings. </summary> 
        public string GcmCredentialSid { get; set; }

        ///<summary> The SID of the [Messaging Service](https://www.twilio.com/docs/sms/quickstart#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications. </summary> 
        public string MessagingServiceSid { get; set; }

        ///<summary> Deprecated. </summary> 
        public string FacebookMessengerPageId { get; set; }

        ///<summary> The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. </summary> 
        public string DefaultApnNotificationProtocolVersion { get; set; }

        ///<summary> The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. </summary> 
        public string DefaultGcmNotificationProtocolVersion { get; set; }

        ///<summary> The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings. </summary> 
        public string FcmCredentialSid { get; set; }

        ///<summary> The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. </summary> 
        public string DefaultFcmNotificationProtocolVersion { get; set; }

        ///<summary> Whether to log notifications. Can be: `true` or `false` and the default is `true`. </summary> 
        public bool? LogEnabled { get; set; }

        ///<summary> Deprecated. </summary> 
        public string AlexaSkillId { get; set; }

        ///<summary> Deprecated. </summary> 
        public string DefaultAlexaNotificationProtocolVersion { get; set; }

        ///<summary> URL to send delivery status callback. </summary> 
        public string DeliveryCallbackUrl { get; set; }

        ///<summary> Callback configuration that enables delivery callbacks, default false </summary> 
        public bool? DeliveryCallbackEnabled { get; set; }



        /// <summary> Construct a new UpdateServiceOptions </summary>
        /// <param name="pathSid"> The Twilio-provided string that uniquely identifies the Service resource to update. </param>
        public UpdateServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }
            if (ApnCredentialSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ApnCredentialSid", ApnCredentialSid));
            }
            if (GcmCredentialSid != null)
            {
                p.Add(new KeyValuePair<string, string>("GcmCredentialSid", GcmCredentialSid));
            }
            if (MessagingServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("MessagingServiceSid", MessagingServiceSid));
            }
            if (FacebookMessengerPageId != null)
            {
                p.Add(new KeyValuePair<string, string>("FacebookMessengerPageId", FacebookMessengerPageId));
            }
            if (DefaultApnNotificationProtocolVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultApnNotificationProtocolVersion", DefaultApnNotificationProtocolVersion));
            }
            if (DefaultGcmNotificationProtocolVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultGcmNotificationProtocolVersion", DefaultGcmNotificationProtocolVersion));
            }
            if (FcmCredentialSid != null)
            {
                p.Add(new KeyValuePair<string, string>("FcmCredentialSid", FcmCredentialSid));
            }
            if (DefaultFcmNotificationProtocolVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultFcmNotificationProtocolVersion", DefaultFcmNotificationProtocolVersion));
            }
            if (LogEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("LogEnabled", LogEnabled.Value.ToString().ToLower()));
            }
            if (AlexaSkillId != null)
            {
                p.Add(new KeyValuePair<string, string>("AlexaSkillId", AlexaSkillId));
            }
            if (DefaultAlexaNotificationProtocolVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultAlexaNotificationProtocolVersion", DefaultAlexaNotificationProtocolVersion));
            }
            if (DeliveryCallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("DeliveryCallbackUrl", DeliveryCallbackUrl));
            }
            if (DeliveryCallbackEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("DeliveryCallbackEnabled", DeliveryCallbackEnabled.Value.ToString().ToLower()));
            }
            return p;
        }

        

    }


}

