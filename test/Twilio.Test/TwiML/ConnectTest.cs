/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using NUnit.Framework;
using System;
using Twilio.Converters;
using Twilio.TwiML.Voice;

namespace Twilio.Tests.TwiML
{

    [TestFixture]
    public class ConnectTest : TwilioTest
    {
        [Test]
        public void TestEmptyElement()
        {
            var elem = new Connect();

            Assert.AreEqual(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Connect></Connect>",
                elem.ToString()
            );
        }

        [Test]
        public void TestElementWithParams()
        {
            var elem = new Connect(new Uri("https://example.com"), Twilio.Http.HttpMethod.Get);
            Assert.AreEqual(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Connect action=\"https://example.com\" method=\"GET\"></Connect>",
                elem.ToString()
            );
        }

        [Test]
        public void TestElementWithExtraAttributes()
        {
            var elem = new Connect();
            elem.SetOption("newParam1", "value");
            elem.SetOption("newParam2", 1);

            Assert.AreEqual(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Connect newParam1=\"value\" newParam2=\"1\"></Connect>",
                elem.ToString()
            );
        }

        [Test]
        public void TestElementWithChildren()
        {
            var elem = new Connect();

            elem.Room("name", "participant_identity");

            elem.Autopilot("name");

            elem.Stream(
                "name",
                "connector_name",
                "url",
                Stream.TrackEnum.InboundTrack,
                "status_callback",
                Stream.StatusCallbackMethodEnum.Get
            );

            elem.VirtualAgent(
                "connector_name",
                "language",
                true,
                "status_callback",
                Twilio.Http.HttpMethod.Get
            );

            elem.Conversation(
                "service_instance_sid",
                true,
                1,
                1,
                new Uri("https://example.com"),
                Twilio.Http.HttpMethod.Get,
                Conversation.RecordEnum.DoNotRecord,
                Conversation.TrimEnum.TrimSilence,
                new Uri("https://example.com"),
                Twilio.Http.HttpMethod.Get,
                new[] {Conversation.RecordingEventEnum.InProgress},
                new Uri("https://example.com"),
                Twilio.Http.HttpMethod.Get,
                new[] {Conversation.EventEnum.CallInitiated}
            );

            elem.ConversationRelay(
                "url",
                "language",
                "tts_language",
                "transcription_language",
                "tts_provider",
                "voice",
                "transcription_provider",
                "speech_model",
                true,
                true,
                "welcome_greeting",
                true,
                true,
                true,
                true,
                true
            );

            elem.Assistant(
                "id",
                "language",
                "tts_language",
                "transcription_language",
                "tts_provider",
                "voice",
                "transcription_provider",
                "speech_model",
                true,
                true,
                "welcome_greeting",
                true,
                true,
                true,
                true,
                true
            );

            Assert.AreEqual(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Connect>" + Environment.NewLine +
                "  <Room participantIdentity=\"participant_identity\">name</Room>" + Environment.NewLine +
                "  <Autopilot>name</Autopilot>" + Environment.NewLine +
                "  <Stream name=\"name\" connectorName=\"connector_name\" url=\"url\" track=\"inbound_track\" statusCallback=\"status_callback\" statusCallbackMethod=\"GET\"></Stream>" + Environment.NewLine +
                "  <VirtualAgent connectorName=\"connector_name\" language=\"language\" sentimentAnalysis=\"true\" statusCallback=\"status_callback\" statusCallbackMethod=\"GET\"></VirtualAgent>" + Environment.NewLine +
                "  <Conversation serviceInstanceSid=\"service_instance_sid\" inboundAutocreation=\"true\" routingAssignmentTimeout=\"1\" inboundTimeout=\"1\" url=\"https://example.com\" method=\"GET\" record=\"do-not-record\" trim=\"trim-silence\" recordingStatusCallback=\"https://example.com\" recordingStatusCallbackMethod=\"GET\" recordingStatusCallbackEvent=\"in-progress\" statusCallback=\"https://example.com\" statusCallbackMethod=\"GET\" statusCallbackEvent=\"call-initiated\"></Conversation>" + Environment.NewLine +
                "  <ConversationRelay url=\"url\" language=\"language\" ttsLanguage=\"tts_language\" transcriptionLanguage=\"transcription_language\" ttsProvider=\"tts_provider\" voice=\"voice\" transcriptionProvider=\"transcription_provider\" speechModel=\"speech_model\" profanityFilter=\"true\" dtmfDetection=\"true\" welcomeGreeting=\"welcome_greeting\" partialPrompts=\"true\" interruptible=\"true\" interruptByDtmf=\"true\" welcomeGreetingInterruptible=\"true\" debug=\"true\"></ConversationRelay>" + Environment.NewLine +
                "  <Assistant id=\"id\" language=\"language\" ttsLanguage=\"tts_language\" transcriptionLanguage=\"transcription_language\" ttsProvider=\"tts_provider\" voice=\"voice\" transcriptionProvider=\"transcription_provider\" speechModel=\"speech_model\" profanityFilter=\"true\" dtmfDetection=\"true\" welcomeGreeting=\"welcome_greeting\" partialPrompts=\"true\" interruptible=\"true\" interruptByDtmf=\"true\" welcomeGreetingInterruptible=\"true\" debug=\"true\"></Assistant>" + Environment.NewLine +
                "</Connect>",
                elem.ToString()
            );
        }

        [Test]
        public void TestElementWithTextNode()
        {
            var elem = new Connect();

            elem.AddText("Here is the content");

            Assert.AreEqual(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Connect>Here is the content</Connect>",
                elem.ToString()
            );
        }

        [Test]
        public void TestAllowGenericChildNodes()
        {
            var elem = new Connect();
            elem.AddChild("generic-tag").AddText("Content").SetOption("tag", true);

            Assert.AreEqual(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Connect>" + Environment.NewLine +
                "  <generic-tag tag=\"True\">Content</generic-tag>" + Environment.NewLine +
                "</Connect>",
                elem.ToString()
            );
        }

        [Test]
        public void TestAllowGenericChildrenOfChildNodes()
        {
            var elem = new Connect();
            var child = new Room();
            elem.Nest(child).AddChild("generic-tag").SetOption("tag", true).AddText("Content");

            Assert.AreEqual(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Connect>" + Environment.NewLine +
                "  <Room>" + Environment.NewLine +
                "    <generic-tag tag=\"True\">Content</generic-tag>" + Environment.NewLine +
                "  </Room>" + Environment.NewLine +
                "</Connect>",
                elem.ToString()
            );
        }

        [Test]
        public void TestMixedContent()
        {
            var elem = new Connect();
            elem.AddText("before")
                .AddChild("Child").AddText("content");
            elem.AddText("after");

            Assert.AreEqual(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Connect>before<Child>content</Child>after</Connect>",
                elem.ToString()
            );
        }
    }

}